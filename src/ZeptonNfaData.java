/* Generated by: JavaCC 21 Parser Generator. ZeptonNfaData.java */
package xyz.zepton.lexer;

import java.util.Arrays;
import java.util.BitSet;
import java.util.EnumSet;
import java.util.EnumMap;
/**
 * Holder class for the data used by ZeptonLexer
 * to do the NFA thang
 */
class ZeptonNfaData implements ZeptonLexerConstants {
    // The functional interface that represents 
    // the acceptance method of an NFA state
    static interface NfaFunction {
        TokenType apply(int ch, BitSet bs, EnumSet<TokenType> validTypes);
    }
    // A lookup of the NFA function tables for the respective lexical states.
    private static final EnumMap<LexicalState, NfaFunction[]> functionTableMap= new EnumMap<> (LexicalState.class);
    // This data holder class is never instantiated
    private ZeptonNfaData() {
    }

    /**
   * @param the lexical state
   * @return the table of function pointers that implement the lexical state
   */
    static final NfaFunction[] getFunctionTableMap(LexicalState lexicalState) {
        return functionTableMap.get(lexicalState);
    }

    // Initialize the various NFA method tables
    static {
        NFA_FUNCTIONS_JAVA_init();
        NFA_FUNCTIONS_IN_MULTI_LINE_COMMENT_init();
        NFA_FUNCTIONS_IN_SINGLE_LINE_COMMENT_init();
    }
    // Just use the canned binary search to check whether the char
    // is in one of the intervals
    private static final boolean checkIntervals(int[] ranges, int ch) {
        int temp;
        return(temp= Arrays.binarySearch(ranges, ch))>=0||temp%2== 0;
    }

    static TokenType NFA_COMPOSITE_JAVA_0(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if (ch== '!') {
            nextStates.set(279);
        }
        else if (ch== '"') {
            nextStates.set(355);
            nextStates.set(23);
        }
        else if (ch== '%') {
            nextStates.set(430);
        }
        else if (ch== '&') {
            nextStates.set(79);
            nextStates.set(192);
        }
        else if (ch== '\'') {
            nextStates.set(50);
        }
        else if (ch== '*') {
            nextStates.set(401);
        }
        else if (ch== '+') {
            nextStates.set(213);
            nextStates.set(112);
        }
        else if (ch== '-') {
            nextStates.set(504);
            nextStates.set(217);
            nextStates.set(154);
        }
        else if (ch== '.') {
            nextStates.set(156);
            nextStates.set(353);
        }
        else if (ch== '/') {
            nextStates.set(121);
            nextStates.set(116);
            nextStates.set(80);
        }
        else if (ch== '0') {
            nextStates.set(130);
            nextStates.set(519);
            nextStates.set(270);
            nextStates.set(316);
            nextStates.set(414);
            nextStates.set(298);
            nextStates.set(395);
            nextStates.set(535);
        }
        if (ch>='0'&&ch<='9') {
            nextStates.set(73);
            nextStates.set(44);
            nextStates.set(38);
            nextStates.set(18);
        }
        else if (ch== ':') {
            nextStates.set(302);
        }
        else if (ch== '<') {
            nextStates.set(339);
            nextStates.set(202);
            nextStates.set(478);
        }
        else if (ch== '=') {
            nextStates.set(499);
        }
        else if (ch== '>') {
            nextStates.set(456);
            nextStates.set(310);
            nextStates.set(249);
            nextStates.set(489);
            nextStates.set(240);
        }
        else if (ch== '^') {
            nextStates.set(275);
        }
        else if (ch== 'a') {
            nextStates.set(210);
            nextStates.set(129);
        }
        else if (ch== 'b') {
            nextStates.set(534);
            nextStates.set(273);
            nextStates.set(89);
            nextStates.set(120);
        }
        else if (ch== 'c') {
            nextStates.set(138);
            nextStates.set(335);
            nextStates.set(103);
            nextStates.set(460);
            nextStates.set(459);
            nextStates.set(361);
        }
        else if (ch== 'd') {
            nextStates.set(391);
            nextStates.set(150);
            nextStates.set(233);
        }
        else if (ch== 'e') {
            nextStates.set(218);
            nextStates.set(122);
            nextStates.set(128);
        }
        else if (ch== 'f') {
            nextStates.set(508);
            nextStates.set(165);
            nextStates.set(417);
            nextStates.set(107);
            nextStates.set(299);
        }
        else if (ch== 'g') {
            nextStates.set(294);
        }
        else if (ch== 'i') {
            nextStates.set(332);
            nextStates.set(390);
            nextStates.set(337);
            nextStates.set(386);
            nextStates.set(303);
            nextStates.set(143);
        }
        else if (ch== 'l') {
            nextStates.set(321);
        }
        else if (ch== 'm') {
            nextStates.set(228);
        }
        else if (ch== 'n') {
            nextStates.set(199);
            nextStates.set(480);
            nextStates.set(465);
            nextStates.set(253);
        }
        else if (ch== 'p') {
            nextStates.set(446);
            nextStates.set(304);
            nextStates.set(351);
            nextStates.set(146);
            nextStates.set(163);
            nextStates.set(495);
        }
        else if (ch== 'r') {
            nextStates.set(464);
            nextStates.set(444);
        }
        else if (ch== 's') {
            nextStates.set(170);
            nextStates.set(422);
            nextStates.set(357);
            nextStates.set(497);
            nextStates.set(409);
            nextStates.set(399);
            nextStates.set(453);
        }
        else if (ch== 't') {
            nextStates.set(312);
            nextStates.set(537);
            nextStates.set(315);
            nextStates.set(220);
            nextStates.set(280);
            nextStates.set(512);
        }
        else if (ch== 'v') {
            nextStates.set(124);
            nextStates.set(517);
            nextStates.set(532);
        }
        else if (ch== 'w') {
            nextStates.set(106);
        }
        else if (ch== 'y') {
            nextStates.set(372);
        }
        else if (ch== '|') {
            nextStates.set(543);
            nextStates.set(349);
        }
        if (((ch== '$')||((ch>='A'&&ch<='Z')||((ch== '_')||(ch>='a'&&ch<='z'))))||(ch>=128&&checkIntervals(NFA_MOVES_JAVA_131, ch))) {
            nextStates.set(185);
            if (validTypes.contains(TokenType.IDENTIFIER)) type= TokenType.IDENTIFIER;
        }
        else if (ch== '%') {
            if (validTypes.contains(TokenType.REM)) type= TokenType.REM;
        }
        else if (ch== '^') {
            if (validTypes.contains(TokenType.XOR)) type= TokenType.XOR;
        }
        else if (ch== '|') {
            if (validTypes.contains(TokenType.BIT_OR)) type= TokenType.BIT_OR;
        }
        else if (ch== '&') {
            if (validTypes.contains(TokenType.BIT_AND)) type= TokenType.BIT_AND;
        }
        else if (ch== '/') {
            if (validTypes.contains(TokenType.SLASH)) type= TokenType.SLASH;
        }
        else if (ch== '*') {
            if (validTypes.contains(TokenType.STAR)) type= TokenType.STAR;
        }
        else if (ch== '-') {
            if (validTypes.contains(TokenType.MINUS)) type= TokenType.MINUS;
        }
        else if (ch== '+') {
            if (validTypes.contains(TokenType.PLUS)) type= TokenType.PLUS;
        }
        else if (ch== ':') {
            if (validTypes.contains(TokenType.COLON)) type= TokenType.COLON;
        }
        else if (ch== '?') {
            if (validTypes.contains(TokenType.HOOK)) type= TokenType.HOOK;
        }
        else if (ch== '~') {
            if (validTypes.contains(TokenType.TILDE)) type= TokenType.TILDE;
        }
        else if (ch== '!') {
            if (validTypes.contains(TokenType.BANG)) type= TokenType.BANG;
        }
        else if (ch== '<') {
            if (validTypes.contains(TokenType.LT)) type= TokenType.LT;
        }
        else if (ch== '>') {
            if (validTypes.contains(TokenType.GT)) type= TokenType.GT;
        }
        else if (ch== '=') {
            if (validTypes.contains(TokenType.ASSIGN)) type= TokenType.ASSIGN;
        }
        else if (ch== '@') {
            if (validTypes.contains(TokenType.AT)) type= TokenType.AT;
        }
        else if (ch== '.') {
            if (validTypes.contains(TokenType.DOT)) type= TokenType.DOT;
        }
        else if (ch== ',') {
            if (validTypes.contains(TokenType.COMMA)) type= TokenType.COMMA;
        }
        else if (ch== ';') {
            if (validTypes.contains(TokenType.SEMICOLON)) type= TokenType.SEMICOLON;
        }
        else if (ch== ']') {
            if (validTypes.contains(TokenType.RBRACKET)) type= TokenType.RBRACKET;
        }
        else if (ch== '[') {
            if (validTypes.contains(TokenType.LBRACKET)) type= TokenType.LBRACKET;
        }
        else if (ch== '}') {
            if (validTypes.contains(TokenType.RBRACE)) type= TokenType.RBRACE;
        }
        else if (ch== '{') {
            if (validTypes.contains(TokenType.LBRACE)) type= TokenType.LBRACE;
        }
        else if (ch== ')') {
            if (validTypes.contains(TokenType.RPAREN)) type= TokenType.RPAREN;
        }
        else if (ch== '(') {
            if (validTypes.contains(TokenType.LPAREN)) type= TokenType.LPAREN;
        }
        else if (ch>='0'&&ch<='9') {
            nextStates.set(65);
            if (validTypes.contains(TokenType.INTEGER_LITERAL)) type= TokenType.INTEGER_LITERAL;
        }
        if (ch== '_') {
            if (validTypes.contains(TokenType.UNDERSCORE)) type= TokenType.UNDERSCORE;
        }
        else if (ch== '\t') {
            nextStates.set(32);
            if (validTypes.contains(TokenType.WHITESPACE)) type= TokenType.WHITESPACE;
        }
        else if (ch== '\n') {
            nextStates.set(32);
            if (validTypes.contains(TokenType.WHITESPACE)) type= TokenType.WHITESPACE;
        }
        else if (ch== '\f') {
            nextStates.set(32);
            if (validTypes.contains(TokenType.WHITESPACE)) type= TokenType.WHITESPACE;
        }
        else if (ch== '\r') {
            nextStates.set(32);
            if (validTypes.contains(TokenType.WHITESPACE)) type= TokenType.WHITESPACE;
        }
        else if (ch== ' ') {
            nextStates.set(32);
            if (validTypes.contains(TokenType.WHITESPACE)) type= TokenType.WHITESPACE;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_1(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch== 'E')||(ch== 'e')) {
            nextStates.set(71);
        }
        else if ((ch== 'D')||((ch== 'F')||((ch== 'd')||(ch== 'f')))) {
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_2(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if (ch>='0'&&ch<='9') {
            nextStates.set(51);
        }
        else if ((ch== 'D')||((ch== 'F')||((ch== 'd')||(ch== 'f')))) {
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_3(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(49);
        }
        if (ch>='0'&&ch<='9') {
            nextStates.set(649);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        else if ((ch== 'D')||((ch== 'F')||((ch== 'd')||(ch== 'f')))) {
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_4(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>=0x0&&ch<='\t')||((ch== 0xb||ch== '\f')||((ch>=0xe&&ch<='!')||((ch>='#'&&ch<='[')||(ch>=']'))))) {
            nextStates.set(23);
        }
        else if (ch== '\\') {
            nextStates.set(25);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_5(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(5);
        }
        if (ch>='0'&&ch<='9') {
            nextStates.set(573);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_6(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch== '0'||ch== '1')||(ch== '_')) {
            nextStates.set(6);
        }
        if (ch== '0'||ch== '1') {
            if (validTypes.contains(TokenType.INTEGER_LITERAL)) type= TokenType.INTEGER_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_7(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||((ch== '_')||(ch>='a'&&ch<='f')))) {
            nextStates.set(7);
        }
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||(ch>='a'&&ch<='f'))) {
            if (validTypes.contains(TokenType.INTEGER_LITERAL)) type= TokenType.INTEGER_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_8(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='7')||(ch== '_')) {
            nextStates.set(8);
        }
        if (ch>='0'&&ch<='7') {
            if (validTypes.contains(TokenType.INTEGER_LITERAL)) type= TokenType.INTEGER_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_9(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch== '+')||(ch== '-')) {
            nextStates.set(583);
        }
        else if (ch>='0'&&ch<='9') {
            nextStates.set(16);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_10(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||((ch== '_')||(ch>='a'&&ch<='f')))) {
            nextStates.set(10);
        }
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||(ch>='a'&&ch<='f'))) {
            nextStates.set(660);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_11(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if (ch== '0') {
            nextStates.set(395);
            nextStates.set(298);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_12(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch== 'E')||(ch== 'e')) {
            nextStates.set(9);
        }
        else if (ch>='0'&&ch<='9') {
            nextStates.set(40);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        else if ((ch== 'D')||((ch== 'F')||((ch== 'd')||(ch== 'f')))) {
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_13(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if (ch== '.') {
            nextStates.set(156);
        }
        else if (ch== '0') {
            nextStates.set(395);
            nextStates.set(298);
        }
        if (ch>='0'&&ch<='9') {
            nextStates.set(18);
            nextStates.set(38);
            nextStates.set(73);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_14(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch== '+')||(ch== '-')) {
            nextStates.set(652);
        }
        else if (ch>='0'&&ch<='9') {
            nextStates.set(28);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_15(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(15);
        }
        if (ch>='0'&&ch<='9') {
            nextStates.set(41);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_16(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(45);
        }
        if (ch>='0'&&ch<='9') {
            nextStates.set(21);
            nextStates.set(16);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        else if ((ch== 'D')||((ch== 'F')||((ch== 'd')||(ch== 'f')))) {
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_17(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch== '\t')||((ch== '\f')||(ch== ' '))) {
            nextStates.set(17);
        }
        else if (ch== '\n') {
            nextStates.set(30);
        }
        else if (ch== '\r') {
            nextStates.set(295);
            nextStates.set(30);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_18(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(63);
        }
        if (ch>='0'&&ch<='9') {
            nextStates.set(72);
        }
        else if ((ch== 'E')||(ch== 'e')) {
            nextStates.set(43);
        }
        else if ((ch== 'D')||((ch== 'F')||((ch== 'd')||(ch== 'f')))) {
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_19(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>=0x0&&ch<='!')||((ch>='#'&&ch<='[')||(ch>=']'))) {
            nextStates.set(30);
        }
        else if (ch== '"') {
            nextStates.set(109);
            nextStates.set(293);
            nextStates.set(363);
        }
        if (ch>='0'&&ch<='7') {
            nextStates.set(30);
        }
        else if (ch== '\\') {
            nextStates.set(34);
            nextStates.set(60);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_20(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(20);
        }
        if (ch>='0'&&ch<='9') {
            nextStates.set(2);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_21(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if (ch>='0'&&ch<='9') {
            nextStates.set(16);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        else if ((ch== 'D')||((ch== 'F')||((ch== 'd')||(ch== 'f')))) {
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_22(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||((ch== '_')||(ch>='a'&&ch<='f')))) {
            nextStates.set(22);
        }
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||(ch>='a'&&ch<='f'))) {
            nextStates.set(639);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_23(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>=0x0&&ch<='\t')||((ch== 0xb||ch== '\f')||((ch>=0xe&&ch<='!')||((ch>='#'&&ch<='[')||(ch>=']'))))) {
            nextStates.set(23);
        }
        else if (ch== '\\') {
            nextStates.set(25);
        }
        else if (ch== '"') {
            if (validTypes.contains(TokenType.STRING_LITERAL)) type= TokenType.STRING_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_24(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(24);
        }
        if (ch>='0'&&ch<='9') {
            nextStates.set(638);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_25(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch== '"')||((ch== '\'')||((ch== '\\')||((ch== 'b')||((ch== 'f')||((ch== 'n')||(ch>='r'&&ch<='t'))))))) {
            nextStates.set(23);
        }
        else if (ch>='0'&&ch<='3') {
            nextStates.set(135);
        }
        if (ch>='0'&&ch<='7') {
            nextStates.set(70);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_26(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(26);
        }
        if (ch>='0'&&ch<='9') {
            nextStates.set(595);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_27(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||((ch== '_')||(ch>='a'&&ch<='f')))) {
            nextStates.set(27);
        }
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||(ch>='a'&&ch<='f'))) {
            nextStates.set(61);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_28(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(26);
        }
        if (ch>='0'&&ch<='9') {
            nextStates.set(595);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        else if ((ch== 'D')||((ch== 'F')||((ch== 'd')||(ch== 'f')))) {
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_29(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if (ch== '\n') {
            nextStates.set(30);
        }
        else if (ch== '\r') {
            nextStates.set(295);
            nextStates.set(30);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_30(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>=0x0&&ch<='!')||((ch>='#'&&ch<='[')||(ch>=']'))) {
            nextStates.set(30);
        }
        else if (ch== '"') {
            nextStates.set(109);
            nextStates.set(293);
            nextStates.set(363);
        }
        else if (ch== '\\') {
            nextStates.set(34);
            nextStates.set(60);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_31(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>=0x0&&ch<='!')||((ch>='#'&&ch<='[')||(ch>=']'))) {
            nextStates.set(30);
        }
        else if (ch== '"') {
            nextStates.set(293);
            nextStates.set(363);
        }
        else if (ch== '\\') {
            nextStates.set(34);
            nextStates.set(60);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_32(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if (ch== '\t') {
            nextStates.set(32);
            if (validTypes.contains(TokenType.WHITESPACE)) type= TokenType.WHITESPACE;
        }
        else if (ch== '\n') {
            nextStates.set(32);
            if (validTypes.contains(TokenType.WHITESPACE)) type= TokenType.WHITESPACE;
        }
        else if (ch== '\f') {
            nextStates.set(32);
            if (validTypes.contains(TokenType.WHITESPACE)) type= TokenType.WHITESPACE;
        }
        else if (ch== '\r') {
            nextStates.set(32);
            if (validTypes.contains(TokenType.WHITESPACE)) type= TokenType.WHITESPACE;
        }
        else if (ch== ' ') {
            nextStates.set(32);
            if (validTypes.contains(TokenType.WHITESPACE)) type= TokenType.WHITESPACE;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_33(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch== '0'||ch== '1')||(ch== '_')) {
            nextStates.set(64);
        }
        if (ch== '0'||ch== '1') {
            nextStates.set(660);
        }
        else if ((ch== 'L')||(ch== 'l')) {
            if (validTypes.contains(TokenType.LONG_LITERAL)) type= TokenType.LONG_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_34(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch== '"')||((ch== '\'')||((ch== '\\')||((ch== 'b')||((ch== 'f')||((ch== 'n')||(ch>='r'&&ch<='t'))))))) {
            nextStates.set(30);
        }
        else if (ch>='0'&&ch<='3') {
            nextStates.set(392);
        }
        if (ch>='0'&&ch<='7') {
            nextStates.set(19);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_35(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(35);
        }
        if (ch>='0'&&ch<='9') {
            nextStates.set(660);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_36(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(53);
        }
        if (ch>='0'&&ch<='9') {
            nextStates.set(58);
            nextStates.set(36);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        else if ((ch== 'D')||((ch== 'F')||((ch== 'd')||(ch== 'f')))) {
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_37(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch== '+')||(ch== '-')) {
            nextStates.set(651);
        }
        else if (ch>='0'&&ch<='9') {
            nextStates.set(3);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_38(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(24);
        }
        if (ch>='0'&&ch<='9') {
            nextStates.set(638);
        }
        else if (ch== '.') {
            nextStates.set(12);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_39(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if (ch== '.') {
            nextStates.set(156);
        }
        else if (ch>='0'&&ch<='9') {
            nextStates.set(18);
            nextStates.set(38);
            nextStates.set(73);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_40(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(56);
        }
        else if ((ch== 'E')||(ch== 'e')) {
            nextStates.set(9);
        }
        if (ch>='0'&&ch<='9') {
            nextStates.set(75);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        else if ((ch== 'D')||((ch== 'F')||((ch== 'd')||(ch== 'f')))) {
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_41(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if (ch>='0'&&ch<='9') {
            nextStates.set(42);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        else if ((ch== 'D')||((ch== 'F')||((ch== 'd')||(ch== 'f')))) {
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_42(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(15);
        }
        if (ch>='0'&&ch<='9') {
            nextStates.set(41);
            nextStates.set(42);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        else if ((ch== 'D')||((ch== 'F')||((ch== 'd')||(ch== 'f')))) {
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_43(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch== '+')||(ch== '-')) {
            nextStates.set(667);
        }
        else if (ch>='0'&&ch<='9') {
            nextStates.set(51);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_44(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(35);
        }
        if (ch>='0'&&ch<='9') {
            nextStates.set(660);
        }
        else if ((ch== 'L')||(ch== 'l')) {
            if (validTypes.contains(TokenType.LONG_LITERAL)) type= TokenType.LONG_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_45(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(45);
        }
        if (ch>='0'&&ch<='9') {
            nextStates.set(21);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_46(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||((ch== '_')||(ch>='a'&&ch<='f')))) {
            nextStates.set(46);
        }
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||(ch>='a'&&ch<='f'))) {
            nextStates.set(588);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_47(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch== '+')||(ch== '-')) {
            nextStates.set(655);
        }
        else if (ch>='0'&&ch<='9') {
            nextStates.set(42);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_48(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if (ch== '0') {
            nextStates.set(519);
            nextStates.set(130);
            nextStates.set(414);
        }
        if (ch>='0'&&ch<='9') {
            nextStates.set(65);
            if (validTypes.contains(TokenType.INTEGER_LITERAL)) type= TokenType.INTEGER_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_49(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(49);
        }
        if (ch>='0'&&ch<='9') {
            nextStates.set(649);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_50(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>=0x0&&ch<='\t')||((ch== 0xb||ch== '\f')||((ch>=0xe&&ch<='&')||((ch>='('&&ch<='[')||(ch>=']'))))) {
            nextStates.set(571);
        }
        else if (ch== '\\') {
            nextStates.set(76);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_51(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(20);
        }
        if (ch>='0'&&ch<='9') {
            nextStates.set(51);
            nextStates.set(2);
        }
        else if ((ch== 'D')||((ch== 'F')||((ch== 'd')||(ch== 'f')))) {
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_52(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='7')||(ch== '_')) {
            nextStates.set(59);
        }
        if (ch>='0'&&ch<='7') {
            nextStates.set(660);
        }
        else if ((ch== 'L')||(ch== 'l')) {
            if (validTypes.contains(TokenType.LONG_LITERAL)) type= TokenType.LONG_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_53(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(53);
        }
        if (ch>='0'&&ch<='9') {
            nextStates.set(58);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_54(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if (ch== '0') {
            nextStates.set(316);
            nextStates.set(535);
            nextStates.set(270);
        }
        if (ch>='0'&&ch<='9') {
            nextStates.set(44);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_55(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(62);
        }
        else if ((ch== 'E')||(ch== 'e')) {
            nextStates.set(71);
        }
        if (ch>='0'&&ch<='9') {
            nextStates.set(1);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        else if ((ch== 'D')||((ch== 'F')||((ch== 'd')||(ch== 'f')))) {
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_56(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(56);
        }
        if (ch>='0'&&ch<='9') {
            nextStates.set(75);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_57(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if (ch>='0'&&ch<='7') {
            nextStates.set(571);
        }
        else if (ch== '\'') {
            if (validTypes.contains(TokenType.CHARACTER_LITERAL)) type= TokenType.CHARACTER_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_58(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if (ch>='0'&&ch<='9') {
            nextStates.set(36);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        else if ((ch== 'D')||((ch== 'F')||((ch== 'd')||(ch== 'f')))) {
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_59(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='7')||(ch== '_')) {
            nextStates.set(59);
        }
        if (ch>='0'&&ch<='7') {
            nextStates.set(660);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_60(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if (ch== '\n') {
            nextStates.set(30);
        }
        else if (ch== '\r') {
            nextStates.set(369);
            nextStates.set(30);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_61(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if (ch== '.') {
            nextStates.set(642);
        }
        else if ((ch== 'P')||(ch== 'p')) {
            nextStates.set(37);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_62(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(62);
        }
        if (ch>='0'&&ch<='9') {
            nextStates.set(1);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_63(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(63);
        }
        if (ch>='0'&&ch<='9') {
            nextStates.set(72);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_64(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch== '0'||ch== '1')||(ch== '_')) {
            nextStates.set(64);
        }
        if (ch== '0'||ch== '1') {
            nextStates.set(660);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_65(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(65);
        }
        if (ch>='0'&&ch<='9') {
            if (validTypes.contains(TokenType.INTEGER_LITERAL)) type= TokenType.INTEGER_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_66(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if (ch== '.') {
            nextStates.set(642);
        }
        else if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||((ch== '_')||(ch>='a'&&ch<='f')))) {
            nextStates.set(27);
        }
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||(ch>='a'&&ch<='f'))) {
            nextStates.set(61);
        }
        else if ((ch== 'P')||(ch== 'p')) {
            nextStates.set(37);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_67(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if (ch== '.') {
            nextStates.set(290);
        }
        else if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||(ch>='a'&&ch<='f'))) {
            nextStates.set(69);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_68(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||((ch== '_')||(ch>='a'&&ch<='f')))) {
            nextStates.set(46);
        }
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||(ch>='a'&&ch<='f'))) {
            nextStates.set(588);
        }
        else if ((ch== 'P')||(ch== 'p')) {
            nextStates.set(14);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_69(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if (ch== '.') {
            nextStates.set(290);
        }
        else if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||((ch== '_')||(ch>='a'&&ch<='f')))) {
            nextStates.set(22);
        }
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||(ch>='a'&&ch<='f'))) {
            nextStates.set(639);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_70(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>=0x0&&ch<='\t')||((ch== 0xb||ch== '\f')||((ch>=0xe&&ch<='!')||((ch>='#'&&ch<='[')||(ch>=']'))))) {
            nextStates.set(23);
        }
        if (ch>='0'&&ch<='7') {
            nextStates.set(23);
        }
        else if (ch== '\\') {
            nextStates.set(25);
        }
        else if (ch== '"') {
            if (validTypes.contains(TokenType.STRING_LITERAL)) type= TokenType.STRING_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_71(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch== '+')||(ch== '-')) {
            nextStates.set(636);
        }
        else if (ch>='0'&&ch<='9') {
            nextStates.set(36);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_72(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch== 'E')||(ch== 'e')) {
            nextStates.set(43);
        }
        else if ((ch== 'D')||((ch== 'F')||((ch== 'd')||(ch== 'f')))) {
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_73(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(5);
        }
        if (ch>='0'&&ch<='9') {
            nextStates.set(573);
        }
        else if ((ch== 'E')||(ch== 'e')) {
            nextStates.set(47);
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_74(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||((ch== '_')||(ch>='a'&&ch<='f')))) {
            nextStates.set(10);
        }
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||(ch>='a'&&ch<='f'))) {
            nextStates.set(660);
        }
        else if ((ch== 'L')||(ch== 'l')) {
            if (validTypes.contains(TokenType.LONG_LITERAL)) type= TokenType.LONG_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_75(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if ((ch== 'E')||(ch== 'e')) {
            nextStates.set(9);
        }
        else if ((ch== 'D')||((ch== 'F')||((ch== 'd')||(ch== 'f')))) {
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) type= TokenType.FLOATING_POINT_LITERAL;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_JAVA_76(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if (checkIntervals(NFA_MOVES_JAVA_557, ch)) {
            nextStates.set(571);
        }
        else if (ch>='0'&&ch<='3') {
            nextStates.set(477);
        }
        if (ch>='0'&&ch<='7') {
            nextStates.set(57);
        }
        return type;
    }

    static TokenType NFA_JAVA_77(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'r') {
            nextStates.set(464);
        }
        return null;
    }

    static TokenType NFA_JAVA_78(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'l') {
            nextStates.set(92);
        }
        return null;
    }

    static TokenType NFA_JAVA_79(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '=') {
            if (validTypes.contains(TokenType.ANDASSIGN)) return TokenType.ANDASSIGN;
        }
        return null;
    }

    static TokenType NFA_JAVA_80(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '*') {
            if (validTypes.contains(TokenType.MULTI_LINE_COMMENT_START)) return TokenType.MULTI_LINE_COMMENT_START;
        }
        return null;
    }

    static TokenType NFA_JAVA_81(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'c') {
            if (validTypes.contains(TokenType.PUBLIC)) return TokenType.PUBLIC;
        }
        return null;
    }

    static TokenType NFA_JAVA_82(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 's') {
            nextStates.set(422);
        }
        return null;
    }

    static TokenType NFA_JAVA_83(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '[') {
            if (validTypes.contains(TokenType.LBRACKET)) return TokenType.LBRACKET;
        }
        return null;
    }

    static TokenType NFA_JAVA_84(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'n') {
            nextStates.set(379);
        }
        return null;
    }

    static TokenType NFA_JAVA_85(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '.') {
            if (validTypes.contains(TokenType.DOT)) return TokenType.DOT;
        }
        return null;
    }

    static TokenType NFA_JAVA_86(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'r') {
            nextStates.set(439);
        }
        return null;
    }

    static TokenType NFA_JAVA_87(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            nextStates.set(312);
        }
        return null;
    }

    static TokenType NFA_JAVA_88(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'd') {
            if (validTypes.contains(TokenType.YIELD)) return TokenType.YIELD;
        }
        return null;
    }

    static TokenType NFA_JAVA_89(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'r') {
            nextStates.set(205);
        }
        return null;
    }

    static TokenType NFA_JAVA_90(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'i') {
            nextStates.set(169);
        }
        return null;
    }

    static TokenType NFA_JAVA_91(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'r') {
            if (validTypes.contains(TokenType.VAR)) return TokenType.VAR;
        }
        return null;
    }

    static TokenType NFA_JAVA_92(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            nextStates.set(393);
        }
        return null;
    }

    static TokenType NFA_JAVA_93(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '>') {
            nextStates.set(489);
        }
        return null;
    }

    static TokenType NFA_JAVA_94(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            nextStates.set(518);
        }
        return null;
    }

    static TokenType NFA_JAVA_95(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'a') {
            nextStates.set(325);
        }
        return null;
    }

    static TokenType NFA_JAVA_96(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'g') {
            if (validTypes.contains(TokenType.LONG)) return TokenType.LONG;
        }
        return null;
    }

    static TokenType NFA_JAVA_97(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'i') {
            nextStates.set(389);
        }
        return null;
    }

    static TokenType NFA_JAVA_98(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 's') {
            nextStates.set(502);
        }
        return null;
    }

    static TokenType NFA_JAVA_99(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '+') {
            if (validTypes.contains(TokenType.PLUS)) return TokenType.PLUS;
        }
        return null;
    }

    static TokenType NFA_JAVA_100(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'm') {
            nextStates.set(291);
        }
        return null;
    }

    static TokenType NFA_JAVA_101(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '*') {
            if (validTypes.contains(TokenType.STAR)) return TokenType.STAR;
        }
        return null;
    }

    static TokenType NFA_JAVA_102(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '0'||ch== '1') {
            nextStates.set(33);
        }
        return null;
    }

    static TokenType NFA_JAVA_103(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'a') {
            nextStates.set(216);
        }
        return null;
    }

    static TokenType NFA_JAVA_104(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '-') {
            nextStates.set(504);
        }
        return null;
    }

    static TokenType NFA_JAVA_105(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'p') {
            nextStates.set(351);
        }
        return null;
    }

    static TokenType NFA_JAVA_106(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'h') {
            nextStates.set(148);
        }
        return null;
    }

    static TokenType NFA_JAVA_107(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'o') {
            nextStates.set(225);
        }
        return null;
    }

    static TokenType NFA_JAVA_108(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '*') {
            nextStates.set(401);
        }
        return null;
    }

    static TokenType NFA_JAVA_109(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '"') {
            nextStates.set(437);
        }
        return null;
    }

    static TokenType NFA_JAVA_110(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||(ch>='a'&&ch<='f'))) {
            nextStates.set(7);
            if (validTypes.contains(TokenType.INTEGER_LITERAL)) return TokenType.INTEGER_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_111(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||(ch>='a'&&ch<='f'))) {
            nextStates.set(66);
        }
        return null;
    }

    static TokenType NFA_JAVA_112(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '=') {
            if (validTypes.contains(TokenType.PLUSASSIGN)) return TokenType.PLUSASSIGN;
        }
        return null;
    }

    static TokenType NFA_JAVA_113(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'r') {
            nextStates.set(208);
        }
        return null;
    }

    static TokenType NFA_JAVA_114(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            if (validTypes.contains(TokenType.INTERFACE)) return TokenType.INTERFACE;
        }
        return null;
    }

    static TokenType NFA_JAVA_115(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'n') {
            if (validTypes.contains(TokenType.BOOLEAN)) return TokenType.BOOLEAN;
        }
        return null;
    }

    static TokenType NFA_JAVA_116(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '=') {
            if (validTypes.contains(TokenType.SLASHASSIGN)) return TokenType.SLASHASSIGN;
        }
        return null;
    }

    static TokenType NFA_JAVA_117(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            if (validTypes.contains(TokenType.DOUBLE)) return TokenType.DOUBLE;
        }
        return null;
    }

    static TokenType NFA_JAVA_118(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '-') {
            if (validTypes.contains(TokenType.MINUS)) return TokenType.MINUS;
        }
        return null;
    }

    static TokenType NFA_JAVA_119(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'i') {
            nextStates.set(337);
        }
        return null;
    }

    static TokenType NFA_JAVA_120(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'y') {
            nextStates.set(520);
        }
        return null;
    }

    static TokenType NFA_JAVA_121(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '/') {
            if (validTypes.contains(TokenType.SINGLE_LINE_COMMENT_START)) return TokenType.SINGLE_LINE_COMMENT_START;
        }
        return null;
    }

    static TokenType NFA_JAVA_122(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'l') {
            nextStates.set(265);
        }
        return null;
    }

    static TokenType NFA_JAVA_123(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'a') {
            nextStates.set(516);
        }
        return null;
    }

    static TokenType NFA_JAVA_124(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'o') {
            nextStates.set(524);
        }
        return null;
    }

    static TokenType NFA_JAVA_125(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'a') {
            nextStates.set(371);
        }
        return null;
    }

    static TokenType NFA_JAVA_126(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'c') {
            nextStates.set(328);
        }
        return null;
    }

    static TokenType NFA_JAVA_127(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'i') {
            nextStates.set(147);
        }
        return null;
    }

    static TokenType NFA_JAVA_128(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'x') {
            nextStates.set(188);
        }
        return null;
    }

    static TokenType NFA_JAVA_129(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 's') {
            nextStates.set(474);
        }
        return null;
    }

    static TokenType NFA_JAVA_130(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== 'B')||(ch== 'b')) {
            nextStates.set(411);
        }
        return null;
    }

    static private int[] NFA_MOVES_JAVA_131= NFA_MOVES_JAVA_131_init();
    static private int[] NFA_MOVES_JAVA_131_init() {
        int[] result= new int[1292];
        result[0]= '$';
        result[1]= '$';
        result[2]= 'A';
        result[3]= 'Z';
        result[4]= '_';
        result[5]= '_';
        result[6]= 'a';
        result[7]= 'z';
        result[8]= 0xa2;
        result[9]= 0xa5;
        result[10]= 0xaa;
        result[11]= 0xaa;
        result[12]= 0xb5;
        result[13]= 0xb5;
        result[14]= 0xba;
        result[15]= 0xba;
        result[16]= 0xc0;
        result[17]= 0xd6;
        result[18]= 0xd8;
        result[19]= 0xf6;
        result[20]= 0xf8;
        result[21]= 0x2c1;
        result[22]= 0x2c6;
        result[23]= 0x2d1;
        result[24]= 0x2e0;
        result[25]= 0x2e4;
        result[26]= 0x2ec;
        result[27]= 0x2ec;
        result[28]= 0x2ee;
        result[29]= 0x2ee;
        result[30]= 0x370;
        result[31]= 0x374;
        result[32]= 0x376;
        result[33]= 0x377;
        result[34]= 0x37a;
        result[35]= 0x37d;
        result[36]= 0x37f;
        result[37]= 0x37f;
        result[38]= 0x386;
        result[39]= 0x386;
        result[40]= 0x388;
        result[41]= 0x38a;
        result[42]= 0x38c;
        result[43]= 0x38c;
        result[44]= 0x38e;
        result[45]= 0x3a1;
        result[46]= 0x3a3;
        result[47]= 0x3f5;
        result[48]= 0x3f7;
        result[49]= 0x481;
        result[50]= 0x48a;
        result[51]= 0x52f;
        result[52]= 0x531;
        result[53]= 0x556;
        result[54]= 0x559;
        result[55]= 0x559;
        result[56]= 0x560;
        result[57]= 0x588;
        result[58]= 0x58f;
        result[59]= 0x58f;
        result[60]= 0x5d0;
        result[61]= 0x5ea;
        result[62]= 0x5ef;
        result[63]= 0x5f2;
        result[64]= 0x60b;
        result[65]= 0x60b;
        result[66]= 0x620;
        result[67]= 0x64a;
        result[68]= 0x66e;
        result[69]= 0x66f;
        result[70]= 0x671;
        result[71]= 0x6d3;
        result[72]= 0x6d5;
        result[73]= 0x6d5;
        result[74]= 0x6e5;
        result[75]= 0x6e6;
        result[76]= 0x6ee;
        result[77]= 0x6ef;
        result[78]= 0x6fa;
        result[79]= 0x6fc;
        result[80]= 0x6ff;
        result[81]= 0x6ff;
        result[82]= 0x710;
        result[83]= 0x710;
        result[84]= 0x712;
        result[85]= 0x72f;
        result[86]= 0x74d;
        result[87]= 0x7a5;
        result[88]= 0x7b1;
        result[89]= 0x7b1;
        result[90]= 0x7ca;
        result[91]= 0x7ea;
        result[92]= 0x7f4;
        result[93]= 0x7f5;
        result[94]= 0x7fa;
        result[95]= 0x7fa;
        result[96]= 0x7fe;
        result[97]= 0x815;
        result[98]= 0x81a;
        result[99]= 0x81a;
        result[100]= 0x824;
        result[101]= 0x824;
        result[102]= 0x828;
        result[103]= 0x828;
        result[104]= 0x840;
        result[105]= 0x858;
        result[106]= 0x860;
        result[107]= 0x86a;
        result[108]= 0x8a0;
        result[109]= 0x8b4;
        result[110]= 0x8b6;
        result[111]= 0x8c7;
        result[112]= 0x904;
        result[113]= 0x939;
        result[114]= 0x93d;
        result[115]= 0x93d;
        result[116]= 0x950;
        result[117]= 0x950;
        result[118]= 0x958;
        result[119]= 0x961;
        result[120]= 0x971;
        result[121]= 0x980;
        result[122]= 0x985;
        result[123]= 0x98c;
        result[124]= 0x98f;
        result[125]= 0x990;
        result[126]= 0x993;
        result[127]= 0x9a8;
        result[128]= 0x9aa;
        result[129]= 0x9b0;
        result[130]= 0x9b2;
        result[131]= 0x9b2;
        result[132]= 0x9b6;
        result[133]= 0x9b9;
        result[134]= 0x9bd;
        result[135]= 0x9bd;
        result[136]= 0x9ce;
        result[137]= 0x9ce;
        result[138]= 0x9dc;
        result[139]= 0x9dd;
        result[140]= 0x9df;
        result[141]= 0x9e1;
        result[142]= 0x9f0;
        result[143]= 0x9f3;
        result[144]= 0x9fb;
        result[145]= 0x9fc;
        result[146]= 0xa05;
        result[147]= 0xa0a;
        result[148]= 0xa0f;
        result[149]= 0xa10;
        result[150]= 0xa13;
        result[151]= 0xa28;
        result[152]= 0xa2a;
        result[153]= 0xa30;
        result[154]= 0xa32;
        result[155]= 0xa33;
        result[156]= 0xa35;
        result[157]= 0xa36;
        result[158]= 0xa38;
        result[159]= 0xa39;
        result[160]= 0xa59;
        result[161]= 0xa5c;
        result[162]= 0xa5e;
        result[163]= 0xa5e;
        result[164]= 0xa72;
        result[165]= 0xa74;
        result[166]= 0xa85;
        result[167]= 0xa8d;
        result[168]= 0xa8f;
        result[169]= 0xa91;
        result[170]= 0xa93;
        result[171]= 0xaa8;
        result[172]= 0xaaa;
        result[173]= 0xab0;
        result[174]= 0xab2;
        result[175]= 0xab3;
        result[176]= 0xab5;
        result[177]= 0xab9;
        result[178]= 0xabd;
        result[179]= 0xabd;
        result[180]= 0xad0;
        result[181]= 0xad0;
        result[182]= 0xae0;
        result[183]= 0xae1;
        result[184]= 0xaf1;
        result[185]= 0xaf1;
        result[186]= 0xaf9;
        result[187]= 0xaf9;
        result[188]= 0xb05;
        result[189]= 0xb0c;
        result[190]= 0xb0f;
        result[191]= 0xb10;
        result[192]= 0xb13;
        result[193]= 0xb28;
        result[194]= 0xb2a;
        result[195]= 0xb30;
        result[196]= 0xb32;
        result[197]= 0xb33;
        result[198]= 0xb35;
        result[199]= 0xb39;
        result[200]= 0xb3d;
        result[201]= 0xb3d;
        result[202]= 0xb5c;
        result[203]= 0xb5d;
        result[204]= 0xb5f;
        result[205]= 0xb61;
        result[206]= 0xb71;
        result[207]= 0xb71;
        result[208]= 0xb83;
        result[209]= 0xb83;
        result[210]= 0xb85;
        result[211]= 0xb8a;
        result[212]= 0xb8e;
        result[213]= 0xb90;
        result[214]= 0xb92;
        result[215]= 0xb95;
        result[216]= 0xb99;
        result[217]= 0xb9a;
        result[218]= 0xb9c;
        result[219]= 0xb9c;
        result[220]= 0xb9e;
        result[221]= 0xb9f;
        result[222]= 0xba3;
        result[223]= 0xba4;
        result[224]= 0xba8;
        result[225]= 0xbaa;
        result[226]= 0xbae;
        result[227]= 0xbb9;
        result[228]= 0xbd0;
        result[229]= 0xbd0;
        result[230]= 0xbf9;
        result[231]= 0xbf9;
        result[232]= 0xc05;
        result[233]= 0xc0c;
        result[234]= 0xc0e;
        result[235]= 0xc10;
        result[236]= 0xc12;
        result[237]= 0xc28;
        result[238]= 0xc2a;
        result[239]= 0xc39;
        result[240]= 0xc3d;
        result[241]= 0xc3d;
        result[242]= 0xc58;
        result[243]= 0xc5a;
        result[244]= 0xc60;
        result[245]= 0xc61;
        result[246]= 0xc80;
        result[247]= 0xc80;
        result[248]= 0xc85;
        result[249]= 0xc8c;
        result[250]= 0xc8e;
        result[251]= 0xc90;
        result[252]= 0xc92;
        result[253]= 0xca8;
        result[254]= 0xcaa;
        result[255]= 0xcb3;
        result[256]= 0xcb5;
        result[257]= 0xcb9;
        result[258]= 0xcbd;
        result[259]= 0xcbd;
        result[260]= 0xcde;
        result[261]= 0xcde;
        result[262]= 0xce0;
        result[263]= 0xce1;
        result[264]= 0xcf1;
        result[265]= 0xcf2;
        result[266]= 0xd04;
        result[267]= 0xd0c;
        result[268]= 0xd0e;
        result[269]= 0xd10;
        result[270]= 0xd12;
        result[271]= 0xd3a;
        result[272]= 0xd3d;
        result[273]= 0xd3d;
        result[274]= 0xd4e;
        result[275]= 0xd4e;
        result[276]= 0xd54;
        result[277]= 0xd56;
        result[278]= 0xd5f;
        result[279]= 0xd61;
        result[280]= 0xd7a;
        result[281]= 0xd7f;
        result[282]= 0xd85;
        result[283]= 0xd96;
        result[284]= 0xd9a;
        result[285]= 0xdb1;
        result[286]= 0xdb3;
        result[287]= 0xdbb;
        result[288]= 0xdbd;
        result[289]= 0xdbd;
        result[290]= 0xdc0;
        result[291]= 0xdc6;
        result[292]= 0xe01;
        result[293]= 0xe30;
        result[294]= 0xe32;
        result[295]= 0xe33;
        result[296]= 0xe3f;
        result[297]= 0xe46;
        result[298]= 0xe81;
        result[299]= 0xe82;
        result[300]= 0xe84;
        result[301]= 0xe84;
        result[302]= 0xe86;
        result[303]= 0xe8a;
        result[304]= 0xe8c;
        result[305]= 0xea3;
        result[306]= 0xea5;
        result[307]= 0xea5;
        result[308]= 0xea7;
        result[309]= 0xeb0;
        result[310]= 0xeb2;
        result[311]= 0xeb3;
        result[312]= 0xebd;
        result[313]= 0xebd;
        result[314]= 0xec0;
        result[315]= 0xec4;
        result[316]= 0xec6;
        result[317]= 0xec6;
        result[318]= 0xedc;
        result[319]= 0xedf;
        result[320]= 0xf00;
        result[321]= 0xf00;
        result[322]= 0xf40;
        result[323]= 0xf47;
        result[324]= 0xf49;
        result[325]= 0xf6c;
        result[326]= 0xf88;
        result[327]= 0xf8c;
        result[328]= 0x1000;
        result[329]= 0x102a;
        result[330]= 0x103f;
        result[331]= 0x103f;
        result[332]= 0x1050;
        result[333]= 0x1055;
        result[334]= 0x105a;
        result[335]= 0x105d;
        result[336]= 0x1061;
        result[337]= 0x1061;
        result[338]= 0x1065;
        result[339]= 0x1066;
        result[340]= 0x106e;
        result[341]= 0x1070;
        result[342]= 0x1075;
        result[343]= 0x1081;
        result[344]= 0x108e;
        result[345]= 0x108e;
        result[346]= 0x10a0;
        result[347]= 0x10c5;
        result[348]= 0x10c7;
        result[349]= 0x10c7;
        result[350]= 0x10cd;
        result[351]= 0x10cd;
        result[352]= 0x10d0;
        result[353]= 0x10fa;
        result[354]= 0x10fc;
        result[355]= 0x1248;
        result[356]= 0x124a;
        result[357]= 0x124d;
        result[358]= 0x1250;
        result[359]= 0x1256;
        result[360]= 0x1258;
        result[361]= 0x1258;
        result[362]= 0x125a;
        result[363]= 0x125d;
        result[364]= 0x1260;
        result[365]= 0x1288;
        result[366]= 0x128a;
        result[367]= 0x128d;
        result[368]= 0x1290;
        result[369]= 0x12b0;
        result[370]= 0x12b2;
        result[371]= 0x12b5;
        result[372]= 0x12b8;
        result[373]= 0x12be;
        result[374]= 0x12c0;
        result[375]= 0x12c0;
        result[376]= 0x12c2;
        result[377]= 0x12c5;
        result[378]= 0x12c8;
        result[379]= 0x12d6;
        result[380]= 0x12d8;
        result[381]= 0x1310;
        result[382]= 0x1312;
        result[383]= 0x1315;
        result[384]= 0x1318;
        result[385]= 0x135a;
        result[386]= 0x1380;
        result[387]= 0x138f;
        result[388]= 0x13a0;
        result[389]= 0x13f5;
        result[390]= 0x13f8;
        result[391]= 0x13fd;
        result[392]= 0x1401;
        result[393]= 0x166c;
        result[394]= 0x166f;
        result[395]= 0x167f;
        result[396]= 0x1681;
        result[397]= 0x169a;
        result[398]= 0x16a0;
        result[399]= 0x16ea;
        result[400]= 0x16ee;
        result[401]= 0x16f8;
        result[402]= 0x1700;
        result[403]= 0x170c;
        result[404]= 0x170e;
        result[405]= 0x1711;
        result[406]= 0x1720;
        result[407]= 0x1731;
        result[408]= 0x1740;
        result[409]= 0x1751;
        result[410]= 0x1760;
        result[411]= 0x176c;
        result[412]= 0x176e;
        result[413]= 0x1770;
        result[414]= 0x1780;
        result[415]= 0x17b3;
        result[416]= 0x17d7;
        result[417]= 0x17d7;
        result[418]= 0x17db;
        result[419]= 0x17dc;
        result[420]= 0x1820;
        result[421]= 0x1878;
        result[422]= 0x1880;
        result[423]= 0x1884;
        result[424]= 0x1887;
        result[425]= 0x18a8;
        result[426]= 0x18aa;
        result[427]= 0x18aa;
        result[428]= 0x18b0;
        result[429]= 0x18f5;
        result[430]= 0x1900;
        result[431]= 0x191e;
        result[432]= 0x1950;
        result[433]= 0x196d;
        result[434]= 0x1970;
        result[435]= 0x1974;
        result[436]= 0x1980;
        result[437]= 0x19ab;
        result[438]= 0x19b0;
        result[439]= 0x19c9;
        result[440]= 0x1a00;
        result[441]= 0x1a16;
        result[442]= 0x1a20;
        result[443]= 0x1a54;
        result[444]= 0x1aa7;
        result[445]= 0x1aa7;
        result[446]= 0x1b05;
        result[447]= 0x1b33;
        result[448]= 0x1b45;
        result[449]= 0x1b4b;
        result[450]= 0x1b83;
        result[451]= 0x1ba0;
        result[452]= 0x1bae;
        result[453]= 0x1baf;
        result[454]= 0x1bba;
        result[455]= 0x1be5;
        result[456]= 0x1c00;
        result[457]= 0x1c23;
        result[458]= 0x1c4d;
        result[459]= 0x1c4f;
        result[460]= 0x1c5a;
        result[461]= 0x1c7d;
        result[462]= 0x1c80;
        result[463]= 0x1c88;
        result[464]= 0x1c90;
        result[465]= 0x1cba;
        result[466]= 0x1cbd;
        result[467]= 0x1cbf;
        result[468]= 0x1ce9;
        result[469]= 0x1cec;
        result[470]= 0x1cee;
        result[471]= 0x1cf3;
        result[472]= 0x1cf5;
        result[473]= 0x1cf6;
        result[474]= 0x1cfa;
        result[475]= 0x1cfa;
        result[476]= 0x1d00;
        result[477]= 0x1dbf;
        result[478]= 0x1e00;
        result[479]= 0x1f15;
        result[480]= 0x1f18;
        result[481]= 0x1f1d;
        result[482]= 0x1f20;
        result[483]= 0x1f45;
        result[484]= 0x1f48;
        result[485]= 0x1f4d;
        result[486]= 0x1f50;
        result[487]= 0x1f57;
        result[488]= 0x1f59;
        result[489]= 0x1f59;
        result[490]= 0x1f5b;
        result[491]= 0x1f5b;
        result[492]= 0x1f5d;
        result[493]= 0x1f5d;
        result[494]= 0x1f5f;
        result[495]= 0x1f7d;
        result[496]= 0x1f80;
        result[497]= 0x1fb4;
        result[498]= 0x1fb6;
        result[499]= 0x1fbc;
        result[500]= 0x1fbe;
        result[501]= 0x1fbe;
        result[502]= 0x1fc2;
        result[503]= 0x1fc4;
        result[504]= 0x1fc6;
        result[505]= 0x1fcc;
        result[506]= 0x1fd0;
        result[507]= 0x1fd3;
        result[508]= 0x1fd6;
        result[509]= 0x1fdb;
        result[510]= 0x1fe0;
        result[511]= 0x1fec;
        result[512]= 0x1ff2;
        result[513]= 0x1ff4;
        result[514]= 0x1ff6;
        result[515]= 0x1ffc;
        result[516]= 0x203f;
        result[517]= 0x2040;
        result[518]= 0x2054;
        result[519]= 0x2054;
        result[520]= 0x2071;
        result[521]= 0x2071;
        result[522]= 0x207f;
        result[523]= 0x207f;
        result[524]= 0x2090;
        result[525]= 0x209c;
        result[526]= 0x20a0;
        result[527]= 0x20bf;
        result[528]= 0x2102;
        result[529]= 0x2102;
        result[530]= 0x2107;
        result[531]= 0x2107;
        result[532]= 0x210a;
        result[533]= 0x2113;
        result[534]= 0x2115;
        result[535]= 0x2115;
        result[536]= 0x2119;
        result[537]= 0x211d;
        result[538]= 0x2124;
        result[539]= 0x2124;
        result[540]= 0x2126;
        result[541]= 0x2126;
        result[542]= 0x2128;
        result[543]= 0x2128;
        result[544]= 0x212a;
        result[545]= 0x212d;
        result[546]= 0x212f;
        result[547]= 0x2139;
        result[548]= 0x213c;
        result[549]= 0x213f;
        result[550]= 0x2145;
        result[551]= 0x2149;
        result[552]= 0x214e;
        result[553]= 0x214e;
        result[554]= 0x2160;
        result[555]= 0x2188;
        result[556]= 0x2c00;
        result[557]= 0x2c2e;
        result[558]= 0x2c30;
        result[559]= 0x2c5e;
        result[560]= 0x2c60;
        result[561]= 0x2ce4;
        result[562]= 0x2ceb;
        result[563]= 0x2cee;
        result[564]= 0x2cf2;
        result[565]= 0x2cf3;
        result[566]= 0x2d00;
        result[567]= 0x2d25;
        result[568]= 0x2d27;
        result[569]= 0x2d27;
        result[570]= 0x2d2d;
        result[571]= 0x2d2d;
        result[572]= 0x2d30;
        result[573]= 0x2d67;
        result[574]= 0x2d6f;
        result[575]= 0x2d6f;
        result[576]= 0x2d80;
        result[577]= 0x2d96;
        result[578]= 0x2da0;
        result[579]= 0x2da6;
        result[580]= 0x2da8;
        result[581]= 0x2dae;
        result[582]= 0x2db0;
        result[583]= 0x2db6;
        result[584]= 0x2db8;
        result[585]= 0x2dbe;
        result[586]= 0x2dc0;
        result[587]= 0x2dc6;
        result[588]= 0x2dc8;
        result[589]= 0x2dce;
        result[590]= 0x2dd0;
        result[591]= 0x2dd6;
        result[592]= 0x2dd8;
        result[593]= 0x2dde;
        result[594]= 0x2e2f;
        result[595]= 0x2e2f;
        result[596]= 0x3005;
        result[597]= 0x3007;
        result[598]= 0x3021;
        result[599]= 0x3029;
        result[600]= 0x3031;
        result[601]= 0x3035;
        result[602]= 0x3038;
        result[603]= 0x303c;
        result[604]= 0x3041;
        result[605]= 0x3096;
        result[606]= 0x309d;
        result[607]= 0x309f;
        result[608]= 0x30a1;
        result[609]= 0x30fa;
        result[610]= 0x30fc;
        result[611]= 0x30ff;
        result[612]= 0x3105;
        result[613]= 0x312f;
        result[614]= 0x3131;
        result[615]= 0x318e;
        result[616]= 0x31a0;
        result[617]= 0x31bf;
        result[618]= 0x31f0;
        result[619]= 0x31ff;
        result[620]= 0x3400;
        result[621]= 0x4dbf;
        result[622]= 0x4e00;
        result[623]= 0x9ffc;
        result[624]= 0xa000;
        result[625]= 0xa48c;
        result[626]= 0xa4d0;
        result[627]= 0xa4fd;
        result[628]= 0xa500;
        result[629]= 0xa60c;
        result[630]= 0xa610;
        result[631]= 0xa61f;
        result[632]= 0xa62a;
        result[633]= 0xa62b;
        result[634]= 0xa640;
        result[635]= 0xa66e;
        result[636]= 0xa67f;
        result[637]= 0xa69d;
        result[638]= 0xa6a0;
        result[639]= 0xa6ef;
        result[640]= 0xa717;
        result[641]= 0xa71f;
        result[642]= 0xa722;
        result[643]= 0xa788;
        result[644]= 0xa78b;
        result[645]= 0xa7bf;
        result[646]= 0xa7c2;
        result[647]= 0xa7ca;
        result[648]= 0xa7f5;
        result[649]= 0xa801;
        result[650]= 0xa803;
        result[651]= 0xa805;
        result[652]= 0xa807;
        result[653]= 0xa80a;
        result[654]= 0xa80c;
        result[655]= 0xa822;
        result[656]= 0xa838;
        result[657]= 0xa838;
        result[658]= 0xa840;
        result[659]= 0xa873;
        result[660]= 0xa882;
        result[661]= 0xa8b3;
        result[662]= 0xa8f2;
        result[663]= 0xa8f7;
        result[664]= 0xa8fb;
        result[665]= 0xa8fb;
        result[666]= 0xa8fd;
        result[667]= 0xa8fe;
        result[668]= 0xa90a;
        result[669]= 0xa925;
        result[670]= 0xa930;
        result[671]= 0xa946;
        result[672]= 0xa960;
        result[673]= 0xa97c;
        result[674]= 0xa984;
        result[675]= 0xa9b2;
        result[676]= 0xa9cf;
        result[677]= 0xa9cf;
        result[678]= 0xa9e0;
        result[679]= 0xa9e4;
        result[680]= 0xa9e6;
        result[681]= 0xa9ef;
        result[682]= 0xa9fa;
        result[683]= 0xa9fe;
        result[684]= 0xaa00;
        result[685]= 0xaa28;
        result[686]= 0xaa40;
        result[687]= 0xaa42;
        result[688]= 0xaa44;
        result[689]= 0xaa4b;
        result[690]= 0xaa60;
        result[691]= 0xaa76;
        result[692]= 0xaa7a;
        result[693]= 0xaa7a;
        result[694]= 0xaa7e;
        result[695]= 0xaaaf;
        result[696]= 0xaab1;
        result[697]= 0xaab1;
        result[698]= 0xaab5;
        result[699]= 0xaab6;
        result[700]= 0xaab9;
        result[701]= 0xaabd;
        result[702]= 0xaac0;
        result[703]= 0xaac0;
        result[704]= 0xaac2;
        result[705]= 0xaac2;
        result[706]= 0xaadb;
        result[707]= 0xaadd;
        result[708]= 0xaae0;
        result[709]= 0xaaea;
        result[710]= 0xaaf2;
        result[711]= 0xaaf4;
        result[712]= 0xab01;
        result[713]= 0xab06;
        result[714]= 0xab09;
        result[715]= 0xab0e;
        result[716]= 0xab11;
        result[717]= 0xab16;
        result[718]= 0xab20;
        result[719]= 0xab26;
        result[720]= 0xab28;
        result[721]= 0xab2e;
        result[722]= 0xab30;
        result[723]= 0xab5a;
        result[724]= 0xab5c;
        result[725]= 0xab69;
        result[726]= 0xab70;
        result[727]= 0xabe2;
        result[728]= 0xac00;
        result[729]= 0xd7a3;
        result[730]= 0xd7b0;
        result[731]= 0xd7c6;
        result[732]= 0xd7cb;
        result[733]= 0xd7fb;
        result[734]= 0xf900;
        result[735]= 0xfa6d;
        result[736]= 0xfa70;
        result[737]= 0xfad9;
        result[738]= 0xfb00;
        result[739]= 0xfb06;
        result[740]= 0xfb13;
        result[741]= 0xfb17;
        result[742]= 0xfb1d;
        result[743]= 0xfb1d;
        result[744]= 0xfb1f;
        result[745]= 0xfb28;
        result[746]= 0xfb2a;
        result[747]= 0xfb36;
        result[748]= 0xfb38;
        result[749]= 0xfb3c;
        result[750]= 0xfb3e;
        result[751]= 0xfb3e;
        result[752]= 0xfb40;
        result[753]= 0xfb41;
        result[754]= 0xfb43;
        result[755]= 0xfb44;
        result[756]= 0xfb46;
        result[757]= 0xfbb1;
        result[758]= 0xfbd3;
        result[759]= 0xfd3d;
        result[760]= 0xfd50;
        result[761]= 0xfd8f;
        result[762]= 0xfd92;
        result[763]= 0xfdc7;
        result[764]= 0xfdf0;
        result[765]= 0xfdfc;
        result[766]= 0xfe33;
        result[767]= 0xfe34;
        result[768]= 0xfe4d;
        result[769]= 0xfe4f;
        result[770]= 0xfe69;
        result[771]= 0xfe69;
        result[772]= 0xfe70;
        result[773]= 0xfe74;
        result[774]= 0xfe76;
        result[775]= 0xfefc;
        result[776]= 0xff04;
        result[777]= 0xff04;
        result[778]= 0xff21;
        result[779]= 0xff3a;
        result[780]= 0xff3f;
        result[781]= 0xff3f;
        result[782]= 0xff41;
        result[783]= 0xff5a;
        result[784]= 0xff66;
        result[785]= 0xffbe;
        result[786]= 0xffc2;
        result[787]= 0xffc7;
        result[788]= 0xffca;
        result[789]= 0xffcf;
        result[790]= 0xffd2;
        result[791]= 0xffd7;
        result[792]= 0xffda;
        result[793]= 0xffdc;
        result[794]= 0xffe0;
        result[795]= 0xffe1;
        result[796]= 0xffe5;
        result[797]= 0xffe6;
        result[798]= 0x10000;
        result[799]= 0x1000b;
        result[800]= 0x1000d;
        result[801]= 0x10026;
        result[802]= 0x10028;
        result[803]= 0x1003a;
        result[804]= 0x1003c;
        result[805]= 0x1003d;
        result[806]= 0x1003f;
        result[807]= 0x1004d;
        result[808]= 0x10050;
        result[809]= 0x1005d;
        result[810]= 0x10080;
        result[811]= 0x100fa;
        result[812]= 0x10140;
        result[813]= 0x10174;
        result[814]= 0x10280;
        result[815]= 0x1029c;
        result[816]= 0x102a0;
        result[817]= 0x102d0;
        result[818]= 0x10300;
        result[819]= 0x1031f;
        result[820]= 0x1032d;
        result[821]= 0x1034a;
        result[822]= 0x10350;
        result[823]= 0x10375;
        result[824]= 0x10380;
        result[825]= 0x1039d;
        result[826]= 0x103a0;
        result[827]= 0x103c3;
        result[828]= 0x103c8;
        result[829]= 0x103cf;
        result[830]= 0x103d1;
        result[831]= 0x103d5;
        result[832]= 0x10400;
        result[833]= 0x1049d;
        result[834]= 0x104b0;
        result[835]= 0x104d3;
        result[836]= 0x104d8;
        result[837]= 0x104fb;
        result[838]= 0x10500;
        result[839]= 0x10527;
        result[840]= 0x10530;
        result[841]= 0x10563;
        result[842]= 0x10600;
        result[843]= 0x10736;
        result[844]= 0x10740;
        result[845]= 0x10755;
        result[846]= 0x10760;
        result[847]= 0x10767;
        result[848]= 0x10800;
        result[849]= 0x10805;
        result[850]= 0x10808;
        result[851]= 0x10808;
        result[852]= 0x1080a;
        result[853]= 0x10835;
        result[854]= 0x10837;
        result[855]= 0x10838;
        result[856]= 0x1083c;
        result[857]= 0x1083c;
        result[858]= 0x1083f;
        result[859]= 0x10855;
        result[860]= 0x10860;
        result[861]= 0x10876;
        result[862]= 0x10880;
        result[863]= 0x1089e;
        result[864]= 0x108e0;
        result[865]= 0x108f2;
        result[866]= 0x108f4;
        result[867]= 0x108f5;
        result[868]= 0x10900;
        result[869]= 0x10915;
        result[870]= 0x10920;
        result[871]= 0x10939;
        result[872]= 0x10980;
        result[873]= 0x109b7;
        result[874]= 0x109be;
        result[875]= 0x109bf;
        result[876]= 0x10a00;
        result[877]= 0x10a00;
        result[878]= 0x10a10;
        result[879]= 0x10a13;
        result[880]= 0x10a15;
        result[881]= 0x10a17;
        result[882]= 0x10a19;
        result[883]= 0x10a35;
        result[884]= 0x10a60;
        result[885]= 0x10a7c;
        result[886]= 0x10a80;
        result[887]= 0x10a9c;
        result[888]= 0x10ac0;
        result[889]= 0x10ac7;
        result[890]= 0x10ac9;
        result[891]= 0x10ae4;
        result[892]= 0x10b00;
        result[893]= 0x10b35;
        result[894]= 0x10b40;
        result[895]= 0x10b55;
        result[896]= 0x10b60;
        result[897]= 0x10b72;
        result[898]= 0x10b80;
        result[899]= 0x10b91;
        result[900]= 0x10c00;
        result[901]= 0x10c48;
        result[902]= 0x10c80;
        result[903]= 0x10cb2;
        result[904]= 0x10cc0;
        result[905]= 0x10cf2;
        result[906]= 0x10d00;
        result[907]= 0x10d23;
        result[908]= 0x10e80;
        result[909]= 0x10ea9;
        result[910]= 0x10eb0;
        result[911]= 0x10eb1;
        result[912]= 0x10f00;
        result[913]= 0x10f1c;
        result[914]= 0x10f27;
        result[915]= 0x10f27;
        result[916]= 0x10f30;
        result[917]= 0x10f45;
        result[918]= 0x10fb0;
        result[919]= 0x10fc4;
        result[920]= 0x10fe0;
        result[921]= 0x10ff6;
        result[922]= 0x11003;
        result[923]= 0x11037;
        result[924]= 0x11083;
        result[925]= 0x110af;
        result[926]= 0x110d0;
        result[927]= 0x110e8;
        result[928]= 0x11103;
        result[929]= 0x11126;
        result[930]= 0x11144;
        result[931]= 0x11144;
        result[932]= 0x11147;
        result[933]= 0x11147;
        result[934]= 0x11150;
        result[935]= 0x11172;
        result[936]= 0x11176;
        result[937]= 0x11176;
        result[938]= 0x11183;
        result[939]= 0x111b2;
        result[940]= 0x111c1;
        result[941]= 0x111c4;
        result[942]= 0x111da;
        result[943]= 0x111da;
        result[944]= 0x111dc;
        result[945]= 0x111dc;
        result[946]= 0x11200;
        result[947]= 0x11211;
        result[948]= 0x11213;
        result[949]= 0x1122b;
        result[950]= 0x11280;
        result[951]= 0x11286;
        result[952]= 0x11288;
        result[953]= 0x11288;
        result[954]= 0x1128a;
        result[955]= 0x1128d;
        result[956]= 0x1128f;
        result[957]= 0x1129d;
        result[958]= 0x1129f;
        result[959]= 0x112a8;
        result[960]= 0x112b0;
        result[961]= 0x112de;
        result[962]= 0x11305;
        result[963]= 0x1130c;
        result[964]= 0x1130f;
        result[965]= 0x11310;
        result[966]= 0x11313;
        result[967]= 0x11328;
        result[968]= 0x1132a;
        result[969]= 0x11330;
        result[970]= 0x11332;
        result[971]= 0x11333;
        result[972]= 0x11335;
        result[973]= 0x11339;
        result[974]= 0x1133d;
        result[975]= 0x1133d;
        result[976]= 0x11350;
        result[977]= 0x11350;
        result[978]= 0x1135d;
        result[979]= 0x11361;
        result[980]= 0x11400;
        result[981]= 0x11434;
        result[982]= 0x11447;
        result[983]= 0x1144a;
        result[984]= 0x1145f;
        result[985]= 0x11461;
        result[986]= 0x11480;
        result[987]= 0x114af;
        result[988]= 0x114c4;
        result[989]= 0x114c5;
        result[990]= 0x114c7;
        result[991]= 0x114c7;
        result[992]= 0x11580;
        result[993]= 0x115ae;
        result[994]= 0x115d8;
        result[995]= 0x115db;
        result[996]= 0x11600;
        result[997]= 0x1162f;
        result[998]= 0x11644;
        result[999]= 0x11644;
        result[1000]= 0x11680;
        result[1001]= 0x116aa;
        result[1002]= 0x116b8;
        result[1003]= 0x116b8;
        result[1004]= 0x11700;
        result[1005]= 0x1171a;
        result[1006]= 0x11800;
        result[1007]= 0x1182b;
        result[1008]= 0x118a0;
        result[1009]= 0x118df;
        result[1010]= 0x118ff;
        result[1011]= 0x11906;
        result[1012]= 0x11909;
        result[1013]= 0x11909;
        result[1014]= 0x1190c;
        result[1015]= 0x11913;
        result[1016]= 0x11915;
        result[1017]= 0x11916;
        result[1018]= 0x11918;
        result[1019]= 0x1192f;
        result[1020]= 0x1193f;
        result[1021]= 0x1193f;
        result[1022]= 0x11941;
        result[1023]= 0x11941;
        result[1024]= 0x119a0;
        result[1025]= 0x119a7;
        result[1026]= 0x119aa;
        result[1027]= 0x119d0;
        result[1028]= 0x119e1;
        result[1029]= 0x119e1;
        result[1030]= 0x119e3;
        result[1031]= 0x119e3;
        result[1032]= 0x11a00;
        result[1033]= 0x11a00;
        result[1034]= 0x11a0b;
        result[1035]= 0x11a32;
        result[1036]= 0x11a3a;
        result[1037]= 0x11a3a;
        result[1038]= 0x11a50;
        result[1039]= 0x11a50;
        result[1040]= 0x11a5c;
        result[1041]= 0x11a89;
        result[1042]= 0x11a9d;
        result[1043]= 0x11a9d;
        result[1044]= 0x11ac0;
        result[1045]= 0x11af8;
        result[1046]= 0x11c00;
        result[1047]= 0x11c08;
        result[1048]= 0x11c0a;
        result[1049]= 0x11c2e;
        result[1050]= 0x11c40;
        result[1051]= 0x11c40;
        result[1052]= 0x11c72;
        result[1053]= 0x11c8f;
        result[1054]= 0x11d00;
        result[1055]= 0x11d06;
        result[1056]= 0x11d08;
        result[1057]= 0x11d09;
        result[1058]= 0x11d0b;
        result[1059]= 0x11d30;
        result[1060]= 0x11d46;
        result[1061]= 0x11d46;
        result[1062]= 0x11d60;
        result[1063]= 0x11d65;
        result[1064]= 0x11d67;
        result[1065]= 0x11d68;
        result[1066]= 0x11d6a;
        result[1067]= 0x11d89;
        result[1068]= 0x11d98;
        result[1069]= 0x11d98;
        result[1070]= 0x11ee0;
        result[1071]= 0x11ef2;
        result[1072]= 0x11fb0;
        result[1073]= 0x11fb0;
        result[1074]= 0x11fdd;
        result[1075]= 0x11fe0;
        result[1076]= 0x12000;
        result[1077]= 0x12399;
        result[1078]= 0x12400;
        result[1079]= 0x1246e;
        result[1080]= 0x12480;
        result[1081]= 0x12543;
        result[1082]= 0x13000;
        result[1083]= 0x1342e;
        result[1084]= 0x14400;
        result[1085]= 0x14646;
        result[1086]= 0x16800;
        result[1087]= 0x16a38;
        result[1088]= 0x16a40;
        result[1089]= 0x16a5e;
        result[1090]= 0x16ad0;
        result[1091]= 0x16aed;
        result[1092]= 0x16b00;
        result[1093]= 0x16b2f;
        result[1094]= 0x16b40;
        result[1095]= 0x16b43;
        result[1096]= 0x16b63;
        result[1097]= 0x16b77;
        result[1098]= 0x16b7d;
        result[1099]= 0x16b8f;
        result[1100]= 0x16e40;
        result[1101]= 0x16e7f;
        result[1102]= 0x16f00;
        result[1103]= 0x16f4a;
        result[1104]= 0x16f50;
        result[1105]= 0x16f50;
        result[1106]= 0x16f93;
        result[1107]= 0x16f9f;
        result[1108]= 0x16fe0;
        result[1109]= 0x16fe1;
        result[1110]= 0x16fe3;
        result[1111]= 0x16fe3;
        result[1112]= 0x17000;
        result[1113]= 0x187f7;
        result[1114]= 0x18800;
        result[1115]= 0x18cd5;
        result[1116]= 0x18d00;
        result[1117]= 0x18d08;
        result[1118]= 0x1b000;
        result[1119]= 0x1b11e;
        result[1120]= 0x1b150;
        result[1121]= 0x1b152;
        result[1122]= 0x1b164;
        result[1123]= 0x1b167;
        result[1124]= 0x1b170;
        result[1125]= 0x1b2fb;
        result[1126]= 0x1bc00;
        result[1127]= 0x1bc6a;
        result[1128]= 0x1bc70;
        result[1129]= 0x1bc7c;
        result[1130]= 0x1bc80;
        result[1131]= 0x1bc88;
        result[1132]= 0x1bc90;
        result[1133]= 0x1bc99;
        result[1134]= 0x1d400;
        result[1135]= 0x1d454;
        result[1136]= 0x1d456;
        result[1137]= 0x1d49c;
        result[1138]= 0x1d49e;
        result[1139]= 0x1d49f;
        result[1140]= 0x1d4a2;
        result[1141]= 0x1d4a2;
        result[1142]= 0x1d4a5;
        result[1143]= 0x1d4a6;
        result[1144]= 0x1d4a9;
        result[1145]= 0x1d4ac;
        result[1146]= 0x1d4ae;
        result[1147]= 0x1d4b9;
        result[1148]= 0x1d4bb;
        result[1149]= 0x1d4bb;
        result[1150]= 0x1d4bd;
        result[1151]= 0x1d4c3;
        result[1152]= 0x1d4c5;
        result[1153]= 0x1d505;
        result[1154]= 0x1d507;
        result[1155]= 0x1d50a;
        result[1156]= 0x1d50d;
        result[1157]= 0x1d514;
        result[1158]= 0x1d516;
        result[1159]= 0x1d51c;
        result[1160]= 0x1d51e;
        result[1161]= 0x1d539;
        result[1162]= 0x1d53b;
        result[1163]= 0x1d53e;
        result[1164]= 0x1d540;
        result[1165]= 0x1d544;
        result[1166]= 0x1d546;
        result[1167]= 0x1d546;
        result[1168]= 0x1d54a;
        result[1169]= 0x1d550;
        result[1170]= 0x1d552;
        result[1171]= 0x1d6a5;
        result[1172]= 0x1d6a8;
        result[1173]= 0x1d6c0;
        result[1174]= 0x1d6c2;
        result[1175]= 0x1d6da;
        result[1176]= 0x1d6dc;
        result[1177]= 0x1d6fa;
        result[1178]= 0x1d6fc;
        result[1179]= 0x1d714;
        result[1180]= 0x1d716;
        result[1181]= 0x1d734;
        result[1182]= 0x1d736;
        result[1183]= 0x1d74e;
        result[1184]= 0x1d750;
        result[1185]= 0x1d76e;
        result[1186]= 0x1d770;
        result[1187]= 0x1d788;
        result[1188]= 0x1d78a;
        result[1189]= 0x1d7a8;
        result[1190]= 0x1d7aa;
        result[1191]= 0x1d7c2;
        result[1192]= 0x1d7c4;
        result[1193]= 0x1d7cb;
        result[1194]= 0x1e100;
        result[1195]= 0x1e12c;
        result[1196]= 0x1e137;
        result[1197]= 0x1e13d;
        result[1198]= 0x1e14e;
        result[1199]= 0x1e14e;
        result[1200]= 0x1e2c0;
        result[1201]= 0x1e2eb;
        result[1202]= 0x1e2ff;
        result[1203]= 0x1e2ff;
        result[1204]= 0x1e800;
        result[1205]= 0x1e8c4;
        result[1206]= 0x1e900;
        result[1207]= 0x1e943;
        result[1208]= 0x1e94b;
        result[1209]= 0x1e94b;
        result[1210]= 0x1ecb0;
        result[1211]= 0x1ecb0;
        result[1212]= 0x1ee00;
        result[1213]= 0x1ee03;
        result[1214]= 0x1ee05;
        result[1215]= 0x1ee1f;
        result[1216]= 0x1ee21;
        result[1217]= 0x1ee22;
        result[1218]= 0x1ee24;
        result[1219]= 0x1ee24;
        result[1220]= 0x1ee27;
        result[1221]= 0x1ee27;
        result[1222]= 0x1ee29;
        result[1223]= 0x1ee32;
        result[1224]= 0x1ee34;
        result[1225]= 0x1ee37;
        result[1226]= 0x1ee39;
        result[1227]= 0x1ee39;
        result[1228]= 0x1ee3b;
        result[1229]= 0x1ee3b;
        result[1230]= 0x1ee42;
        result[1231]= 0x1ee42;
        result[1232]= 0x1ee47;
        result[1233]= 0x1ee47;
        result[1234]= 0x1ee49;
        result[1235]= 0x1ee49;
        result[1236]= 0x1ee4b;
        result[1237]= 0x1ee4b;
        result[1238]= 0x1ee4d;
        result[1239]= 0x1ee4f;
        result[1240]= 0x1ee51;
        result[1241]= 0x1ee52;
        result[1242]= 0x1ee54;
        result[1243]= 0x1ee54;
        result[1244]= 0x1ee57;
        result[1245]= 0x1ee57;
        result[1246]= 0x1ee59;
        result[1247]= 0x1ee59;
        result[1248]= 0x1ee5b;
        result[1249]= 0x1ee5b;
        result[1250]= 0x1ee5d;
        result[1251]= 0x1ee5d;
        result[1252]= 0x1ee5f;
        result[1253]= 0x1ee5f;
        result[1254]= 0x1ee61;
        result[1255]= 0x1ee62;
        result[1256]= 0x1ee64;
        result[1257]= 0x1ee64;
        result[1258]= 0x1ee67;
        result[1259]= 0x1ee6a;
        result[1260]= 0x1ee6c;
        result[1261]= 0x1ee72;
        result[1262]= 0x1ee74;
        result[1263]= 0x1ee77;
        result[1264]= 0x1ee79;
        result[1265]= 0x1ee7c;
        result[1266]= 0x1ee7e;
        result[1267]= 0x1ee7e;
        result[1268]= 0x1ee80;
        result[1269]= 0x1ee89;
        result[1270]= 0x1ee8b;
        result[1271]= 0x1ee9b;
        result[1272]= 0x1eea1;
        result[1273]= 0x1eea3;
        result[1274]= 0x1eea5;
        result[1275]= 0x1eea9;
        result[1276]= 0x1eeab;
        result[1277]= 0x1eebb;
        result[1278]= 0x20000;
        result[1279]= 0x2a6dd;
        result[1280]= 0x2a700;
        result[1281]= 0x2b734;
        result[1282]= 0x2b740;
        result[1283]= 0x2b81d;
        result[1284]= 0x2b820;
        result[1285]= 0x2cea1;
        result[1286]= 0x2ceb0;
        result[1287]= 0x2ebe0;
        result[1288]= 0x2f800;
        result[1289]= 0x2fa1d;
        result[1290]= 0x30000;
        result[1291]= 0x3134a;
        return result;
    }

    static TokenType NFA_JAVA_131(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (((ch== '$')||((ch>='A'&&ch<='Z')||((ch== '_')||(ch>='a'&&ch<='z'))))||(ch>=128&&checkIntervals(NFA_MOVES_JAVA_131, ch))) {
            nextStates.set(185);
            if (validTypes.contains(TokenType.IDENTIFIER)) return TokenType.IDENTIFIER;
        }
        return null;
    }

    static TokenType NFA_JAVA_132(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'o') {
            nextStates.set(473);
        }
        return null;
    }

    static TokenType NFA_JAVA_133(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            nextStates.set(404);
        }
        return null;
    }

    static TokenType NFA_JAVA_134(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            nextStates.set(435);
        }
        return null;
    }

    static TokenType NFA_JAVA_135(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='7') {
            nextStates.set(487);
        }
        return null;
    }

    static TokenType NFA_JAVA_136(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'l') {
            nextStates.set(305);
        }
        return null;
    }

    static TokenType NFA_JAVA_137(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'o') {
            nextStates.set(207);
        }
        return null;
    }

    static TokenType NFA_JAVA_138(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'l') {
            nextStates.set(153);
        }
        return null;
    }

    static TokenType NFA_JAVA_139(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '>') {
            nextStates.set(310);
        }
        return null;
    }

    static TokenType NFA_JAVA_140(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'o') {
            nextStates.set(533);
        }
        return null;
    }

    static TokenType NFA_JAVA_141(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '=') {
            if (validTypes.contains(TokenType.LSHIFTASSIGN)) return TokenType.LSHIFTASSIGN;
        }
        return null;
    }

    static TokenType NFA_JAVA_142(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'o') {
            nextStates.set(347);
        }
        return null;
    }

    static TokenType NFA_JAVA_143(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'm') {
            nextStates.set(345);
        }
        return null;
    }

    static TokenType NFA_JAVA_144(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'c') {
            nextStates.set(358);
        }
        return null;
    }

    static TokenType NFA_JAVA_145(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '/') {
            nextStates.set(121);
        }
        return null;
    }

    static TokenType NFA_JAVA_146(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'r') {
            nextStates.set(238);
        }
        return null;
    }

    static TokenType NFA_JAVA_147(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            nextStates.set(383);
        }
        return null;
    }

    static TokenType NFA_JAVA_148(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'i') {
            nextStates.set(239);
        }
        return null;
    }

    static TokenType NFA_JAVA_149(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            nextStates.set(315);
        }
        return null;
    }

    static TokenType NFA_JAVA_150(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'o') {
            if (validTypes.contains(TokenType.DO)) return TokenType.DO;
        }
        return null;
    }

    static TokenType NFA_JAVA_151(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 's') {
            if (validTypes.contains(TokenType.EXTENDS)) return TokenType.EXTENDS;
        }
        return null;
    }

    static TokenType NFA_JAVA_152(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            nextStates.set(323);
        }
        return null;
    }

    static TokenType NFA_JAVA_153(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'a') {
            nextStates.set(98);
        }
        return null;
    }

    static TokenType NFA_JAVA_154(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '-') {
            if (validTypes.contains(TokenType.DECR)) return TokenType.DECR;
        }
        return null;
    }

    static TokenType NFA_JAVA_155(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            nextStates.set(327);
        }
        return null;
    }

    static TokenType NFA_JAVA_156(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='9') {
            nextStates.set(55);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) return TokenType.FLOATING_POINT_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_157(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'o') {
            nextStates.set(78);
        }
        return null;
    }

    static TokenType NFA_JAVA_158(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'n') {
            nextStates.set(168);
        }
        return null;
    }

    static TokenType NFA_JAVA_159(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'm') {
            nextStates.set(228);
        }
        return null;
    }

    static TokenType NFA_JAVA_160(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 's') {
            nextStates.set(356);
        }
        return null;
    }

    static TokenType NFA_JAVA_161(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'n') {
            nextStates.set(199);
        }
        return null;
    }

    static TokenType NFA_JAVA_162(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            nextStates.set(187);
        }
        return null;
    }

    static TokenType NFA_JAVA_163(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            nextStates.set(219);
        }
        return null;
    }

    static TokenType NFA_JAVA_164(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 's') {
            nextStates.set(251);
        }
        return null;
    }

    static TokenType NFA_JAVA_165(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'i') {
            nextStates.set(84);
        }
        return null;
    }

    static TokenType NFA_JAVA_166(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'l') {
            nextStates.set(321);
        }
        return null;
    }

    static TokenType NFA_JAVA_167(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '-') {
            nextStates.set(217);
        }
        return null;
    }

    static TokenType NFA_JAVA_168(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'i') {
            nextStates.set(287);
        }
        return null;
    }

    static TokenType NFA_JAVA_169(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'c') {
            if (validTypes.contains(TokenType.STATIC)) return TokenType.STATIC;
        }
        return null;
    }

    static TokenType NFA_JAVA_170(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'u') {
            nextStates.set(429);
        }
        return null;
    }

    static TokenType NFA_JAVA_171(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '<') {
            nextStates.set(202);
        }
        return null;
    }

    static TokenType NFA_JAVA_172(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'u') {
            nextStates.set(483);
        }
        return null;
    }

    static TokenType NFA_JAVA_173(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            if (validTypes.contains(TokenType.WHILE)) return TokenType.WHILE;
        }
        return null;
    }

    static TokenType NFA_JAVA_174(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'a') {
            nextStates.set(210);
        }
        return null;
    }

    static TokenType NFA_JAVA_175(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'r') {
            nextStates.set(493);
        }
        return null;
    }

    static TokenType NFA_JAVA_176(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            nextStates.set(314);
        }
        return null;
    }

    static TokenType NFA_JAVA_177(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'n') {
            nextStates.set(465);
        }
        return null;
    }

    static TokenType NFA_JAVA_178(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '=') {
            if (validTypes.contains(TokenType.RSIGNEDSHIFTASSIGN)) return TokenType.RSIGNEDSHIFTASSIGN;
        }
        return null;
    }

    static TokenType NFA_JAVA_179(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'u') {
            nextStates.set(113);
        }
        return null;
    }

    static TokenType NFA_JAVA_180(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'a') {
            nextStates.set(334);
        }
        return null;
    }

    static TokenType NFA_JAVA_181(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'l') {
            nextStates.set(198);
        }
        return null;
    }

    static TokenType NFA_JAVA_182(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'o') {
            nextStates.set(158);
        }
        return null;
    }

    static TokenType NFA_JAVA_183(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 's') {
            nextStates.set(350);
        }
        return null;
    }

    static TokenType NFA_JAVA_184(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'y') {
            nextStates.set(372);
        }
        return null;
    }

    static private int[] NFA_MOVES_JAVA_185= NFA_MOVES_JAVA_185_init();
    static private int[] NFA_MOVES_JAVA_185_init() {
        int[] result= new int[1524];
        result[0]= 0x0;
        result[1]= 0x8;
        result[2]= 0xe;
        result[3]= 0x1b;
        result[4]= '$';
        result[5]= '$';
        result[6]= '0';
        result[7]= '9';
        result[8]= 'A';
        result[9]= 'Z';
        result[10]= '_';
        result[11]= '_';
        result[12]= 'a';
        result[13]= 'z';
        result[14]= 0x7f;
        result[15]= 0x9f;
        result[16]= 0xa2;
        result[17]= 0xa5;
        result[18]= 0xaa;
        result[19]= 0xaa;
        result[20]= 0xad;
        result[21]= 0xad;
        result[22]= 0xb5;
        result[23]= 0xb5;
        result[24]= 0xba;
        result[25]= 0xba;
        result[26]= 0xc0;
        result[27]= 0xd6;
        result[28]= 0xd8;
        result[29]= 0xf6;
        result[30]= 0xf8;
        result[31]= 0x2c1;
        result[32]= 0x2c6;
        result[33]= 0x2d1;
        result[34]= 0x2e0;
        result[35]= 0x2e4;
        result[36]= 0x2ec;
        result[37]= 0x2ec;
        result[38]= 0x2ee;
        result[39]= 0x2ee;
        result[40]= 0x300;
        result[41]= 0x374;
        result[42]= 0x376;
        result[43]= 0x377;
        result[44]= 0x37a;
        result[45]= 0x37d;
        result[46]= 0x37f;
        result[47]= 0x37f;
        result[48]= 0x386;
        result[49]= 0x386;
        result[50]= 0x388;
        result[51]= 0x38a;
        result[52]= 0x38c;
        result[53]= 0x38c;
        result[54]= 0x38e;
        result[55]= 0x3a1;
        result[56]= 0x3a3;
        result[57]= 0x3f5;
        result[58]= 0x3f7;
        result[59]= 0x481;
        result[60]= 0x483;
        result[61]= 0x487;
        result[62]= 0x48a;
        result[63]= 0x52f;
        result[64]= 0x531;
        result[65]= 0x556;
        result[66]= 0x559;
        result[67]= 0x559;
        result[68]= 0x560;
        result[69]= 0x588;
        result[70]= 0x58f;
        result[71]= 0x58f;
        result[72]= 0x591;
        result[73]= 0x5bd;
        result[74]= 0x5bf;
        result[75]= 0x5bf;
        result[76]= 0x5c1;
        result[77]= 0x5c2;
        result[78]= 0x5c4;
        result[79]= 0x5c5;
        result[80]= 0x5c7;
        result[81]= 0x5c7;
        result[82]= 0x5d0;
        result[83]= 0x5ea;
        result[84]= 0x5ef;
        result[85]= 0x5f2;
        result[86]= 0x600;
        result[87]= 0x605;
        result[88]= 0x60b;
        result[89]= 0x60b;
        result[90]= 0x610;
        result[91]= 0x61a;
        result[92]= 0x61c;
        result[93]= 0x61c;
        result[94]= 0x620;
        result[95]= 0x669;
        result[96]= 0x66e;
        result[97]= 0x6d3;
        result[98]= 0x6d5;
        result[99]= 0x6dd;
        result[100]= 0x6df;
        result[101]= 0x6e8;
        result[102]= 0x6ea;
        result[103]= 0x6fc;
        result[104]= 0x6ff;
        result[105]= 0x6ff;
        result[106]= 0x70f;
        result[107]= 0x74a;
        result[108]= 0x74d;
        result[109]= 0x7b1;
        result[110]= 0x7c0;
        result[111]= 0x7f5;
        result[112]= 0x7fa;
        result[113]= 0x7fa;
        result[114]= 0x7fd;
        result[115]= 0x82d;
        result[116]= 0x840;
        result[117]= 0x85b;
        result[118]= 0x860;
        result[119]= 0x86a;
        result[120]= 0x8a0;
        result[121]= 0x8b4;
        result[122]= 0x8b6;
        result[123]= 0x8c7;
        result[124]= 0x8d3;
        result[125]= 0x963;
        result[126]= 0x966;
        result[127]= 0x96f;
        result[128]= 0x971;
        result[129]= 0x983;
        result[130]= 0x985;
        result[131]= 0x98c;
        result[132]= 0x98f;
        result[133]= 0x990;
        result[134]= 0x993;
        result[135]= 0x9a8;
        result[136]= 0x9aa;
        result[137]= 0x9b0;
        result[138]= 0x9b2;
        result[139]= 0x9b2;
        result[140]= 0x9b6;
        result[141]= 0x9b9;
        result[142]= 0x9bc;
        result[143]= 0x9c4;
        result[144]= 0x9c7;
        result[145]= 0x9c8;
        result[146]= 0x9cb;
        result[147]= 0x9ce;
        result[148]= 0x9d7;
        result[149]= 0x9d7;
        result[150]= 0x9dc;
        result[151]= 0x9dd;
        result[152]= 0x9df;
        result[153]= 0x9e3;
        result[154]= 0x9e6;
        result[155]= 0x9f3;
        result[156]= 0x9fb;
        result[157]= 0x9fc;
        result[158]= 0x9fe;
        result[159]= 0x9fe;
        result[160]= 0xa01;
        result[161]= 0xa03;
        result[162]= 0xa05;
        result[163]= 0xa0a;
        result[164]= 0xa0f;
        result[165]= 0xa10;
        result[166]= 0xa13;
        result[167]= 0xa28;
        result[168]= 0xa2a;
        result[169]= 0xa30;
        result[170]= 0xa32;
        result[171]= 0xa33;
        result[172]= 0xa35;
        result[173]= 0xa36;
        result[174]= 0xa38;
        result[175]= 0xa39;
        result[176]= 0xa3c;
        result[177]= 0xa3c;
        result[178]= 0xa3e;
        result[179]= 0xa42;
        result[180]= 0xa47;
        result[181]= 0xa48;
        result[182]= 0xa4b;
        result[183]= 0xa4d;
        result[184]= 0xa51;
        result[185]= 0xa51;
        result[186]= 0xa59;
        result[187]= 0xa5c;
        result[188]= 0xa5e;
        result[189]= 0xa5e;
        result[190]= 0xa66;
        result[191]= 0xa75;
        result[192]= 0xa81;
        result[193]= 0xa83;
        result[194]= 0xa85;
        result[195]= 0xa8d;
        result[196]= 0xa8f;
        result[197]= 0xa91;
        result[198]= 0xa93;
        result[199]= 0xaa8;
        result[200]= 0xaaa;
        result[201]= 0xab0;
        result[202]= 0xab2;
        result[203]= 0xab3;
        result[204]= 0xab5;
        result[205]= 0xab9;
        result[206]= 0xabc;
        result[207]= 0xac5;
        result[208]= 0xac7;
        result[209]= 0xac9;
        result[210]= 0xacb;
        result[211]= 0xacd;
        result[212]= 0xad0;
        result[213]= 0xad0;
        result[214]= 0xae0;
        result[215]= 0xae3;
        result[216]= 0xae6;
        result[217]= 0xaef;
        result[218]= 0xaf1;
        result[219]= 0xaf1;
        result[220]= 0xaf9;
        result[221]= 0xaff;
        result[222]= 0xb01;
        result[223]= 0xb03;
        result[224]= 0xb05;
        result[225]= 0xb0c;
        result[226]= 0xb0f;
        result[227]= 0xb10;
        result[228]= 0xb13;
        result[229]= 0xb28;
        result[230]= 0xb2a;
        result[231]= 0xb30;
        result[232]= 0xb32;
        result[233]= 0xb33;
        result[234]= 0xb35;
        result[235]= 0xb39;
        result[236]= 0xb3c;
        result[237]= 0xb44;
        result[238]= 0xb47;
        result[239]= 0xb48;
        result[240]= 0xb4b;
        result[241]= 0xb4d;
        result[242]= 0xb55;
        result[243]= 0xb57;
        result[244]= 0xb5c;
        result[245]= 0xb5d;
        result[246]= 0xb5f;
        result[247]= 0xb63;
        result[248]= 0xb66;
        result[249]= 0xb6f;
        result[250]= 0xb71;
        result[251]= 0xb71;
        result[252]= 0xb82;
        result[253]= 0xb83;
        result[254]= 0xb85;
        result[255]= 0xb8a;
        result[256]= 0xb8e;
        result[257]= 0xb90;
        result[258]= 0xb92;
        result[259]= 0xb95;
        result[260]= 0xb99;
        result[261]= 0xb9a;
        result[262]= 0xb9c;
        result[263]= 0xb9c;
        result[264]= 0xb9e;
        result[265]= 0xb9f;
        result[266]= 0xba3;
        result[267]= 0xba4;
        result[268]= 0xba8;
        result[269]= 0xbaa;
        result[270]= 0xbae;
        result[271]= 0xbb9;
        result[272]= 0xbbe;
        result[273]= 0xbc2;
        result[274]= 0xbc6;
        result[275]= 0xbc8;
        result[276]= 0xbca;
        result[277]= 0xbcd;
        result[278]= 0xbd0;
        result[279]= 0xbd0;
        result[280]= 0xbd7;
        result[281]= 0xbd7;
        result[282]= 0xbe6;
        result[283]= 0xbef;
        result[284]= 0xbf9;
        result[285]= 0xbf9;
        result[286]= 0xc00;
        result[287]= 0xc0c;
        result[288]= 0xc0e;
        result[289]= 0xc10;
        result[290]= 0xc12;
        result[291]= 0xc28;
        result[292]= 0xc2a;
        result[293]= 0xc39;
        result[294]= 0xc3d;
        result[295]= 0xc44;
        result[296]= 0xc46;
        result[297]= 0xc48;
        result[298]= 0xc4a;
        result[299]= 0xc4d;
        result[300]= 0xc55;
        result[301]= 0xc56;
        result[302]= 0xc58;
        result[303]= 0xc5a;
        result[304]= 0xc60;
        result[305]= 0xc63;
        result[306]= 0xc66;
        result[307]= 0xc6f;
        result[308]= 0xc80;
        result[309]= 0xc83;
        result[310]= 0xc85;
        result[311]= 0xc8c;
        result[312]= 0xc8e;
        result[313]= 0xc90;
        result[314]= 0xc92;
        result[315]= 0xca8;
        result[316]= 0xcaa;
        result[317]= 0xcb3;
        result[318]= 0xcb5;
        result[319]= 0xcb9;
        result[320]= 0xcbc;
        result[321]= 0xcc4;
        result[322]= 0xcc6;
        result[323]= 0xcc8;
        result[324]= 0xcca;
        result[325]= 0xccd;
        result[326]= 0xcd5;
        result[327]= 0xcd6;
        result[328]= 0xcde;
        result[329]= 0xcde;
        result[330]= 0xce0;
        result[331]= 0xce3;
        result[332]= 0xce6;
        result[333]= 0xcef;
        result[334]= 0xcf1;
        result[335]= 0xcf2;
        result[336]= 0xd00;
        result[337]= 0xd0c;
        result[338]= 0xd0e;
        result[339]= 0xd10;
        result[340]= 0xd12;
        result[341]= 0xd44;
        result[342]= 0xd46;
        result[343]= 0xd48;
        result[344]= 0xd4a;
        result[345]= 0xd4e;
        result[346]= 0xd54;
        result[347]= 0xd57;
        result[348]= 0xd5f;
        result[349]= 0xd63;
        result[350]= 0xd66;
        result[351]= 0xd6f;
        result[352]= 0xd7a;
        result[353]= 0xd7f;
        result[354]= 0xd81;
        result[355]= 0xd83;
        result[356]= 0xd85;
        result[357]= 0xd96;
        result[358]= 0xd9a;
        result[359]= 0xdb1;
        result[360]= 0xdb3;
        result[361]= 0xdbb;
        result[362]= 0xdbd;
        result[363]= 0xdbd;
        result[364]= 0xdc0;
        result[365]= 0xdc6;
        result[366]= 0xdca;
        result[367]= 0xdca;
        result[368]= 0xdcf;
        result[369]= 0xdd4;
        result[370]= 0xdd6;
        result[371]= 0xdd6;
        result[372]= 0xdd8;
        result[373]= 0xddf;
        result[374]= 0xde6;
        result[375]= 0xdef;
        result[376]= 0xdf2;
        result[377]= 0xdf3;
        result[378]= 0xe01;
        result[379]= 0xe3a;
        result[380]= 0xe3f;
        result[381]= 0xe4e;
        result[382]= 0xe50;
        result[383]= 0xe59;
        result[384]= 0xe81;
        result[385]= 0xe82;
        result[386]= 0xe84;
        result[387]= 0xe84;
        result[388]= 0xe86;
        result[389]= 0xe8a;
        result[390]= 0xe8c;
        result[391]= 0xea3;
        result[392]= 0xea5;
        result[393]= 0xea5;
        result[394]= 0xea7;
        result[395]= 0xebd;
        result[396]= 0xec0;
        result[397]= 0xec4;
        result[398]= 0xec6;
        result[399]= 0xec6;
        result[400]= 0xec8;
        result[401]= 0xecd;
        result[402]= 0xed0;
        result[403]= 0xed9;
        result[404]= 0xedc;
        result[405]= 0xedf;
        result[406]= 0xf00;
        result[407]= 0xf00;
        result[408]= 0xf18;
        result[409]= 0xf19;
        result[410]= 0xf20;
        result[411]= 0xf29;
        result[412]= 0xf35;
        result[413]= 0xf35;
        result[414]= 0xf37;
        result[415]= 0xf37;
        result[416]= 0xf39;
        result[417]= 0xf39;
        result[418]= 0xf3e;
        result[419]= 0xf47;
        result[420]= 0xf49;
        result[421]= 0xf6c;
        result[422]= 0xf71;
        result[423]= 0xf84;
        result[424]= 0xf86;
        result[425]= 0xf97;
        result[426]= 0xf99;
        result[427]= 0xfbc;
        result[428]= 0xfc6;
        result[429]= 0xfc6;
        result[430]= 0x1000;
        result[431]= 0x1049;
        result[432]= 0x1050;
        result[433]= 0x109d;
        result[434]= 0x10a0;
        result[435]= 0x10c5;
        result[436]= 0x10c7;
        result[437]= 0x10c7;
        result[438]= 0x10cd;
        result[439]= 0x10cd;
        result[440]= 0x10d0;
        result[441]= 0x10fa;
        result[442]= 0x10fc;
        result[443]= 0x1248;
        result[444]= 0x124a;
        result[445]= 0x124d;
        result[446]= 0x1250;
        result[447]= 0x1256;
        result[448]= 0x1258;
        result[449]= 0x1258;
        result[450]= 0x125a;
        result[451]= 0x125d;
        result[452]= 0x1260;
        result[453]= 0x1288;
        result[454]= 0x128a;
        result[455]= 0x128d;
        result[456]= 0x1290;
        result[457]= 0x12b0;
        result[458]= 0x12b2;
        result[459]= 0x12b5;
        result[460]= 0x12b8;
        result[461]= 0x12be;
        result[462]= 0x12c0;
        result[463]= 0x12c0;
        result[464]= 0x12c2;
        result[465]= 0x12c5;
        result[466]= 0x12c8;
        result[467]= 0x12d6;
        result[468]= 0x12d8;
        result[469]= 0x1310;
        result[470]= 0x1312;
        result[471]= 0x1315;
        result[472]= 0x1318;
        result[473]= 0x135a;
        result[474]= 0x135d;
        result[475]= 0x135f;
        result[476]= 0x1380;
        result[477]= 0x138f;
        result[478]= 0x13a0;
        result[479]= 0x13f5;
        result[480]= 0x13f8;
        result[481]= 0x13fd;
        result[482]= 0x1401;
        result[483]= 0x166c;
        result[484]= 0x166f;
        result[485]= 0x167f;
        result[486]= 0x1681;
        result[487]= 0x169a;
        result[488]= 0x16a0;
        result[489]= 0x16ea;
        result[490]= 0x16ee;
        result[491]= 0x16f8;
        result[492]= 0x1700;
        result[493]= 0x170c;
        result[494]= 0x170e;
        result[495]= 0x1714;
        result[496]= 0x1720;
        result[497]= 0x1734;
        result[498]= 0x1740;
        result[499]= 0x1753;
        result[500]= 0x1760;
        result[501]= 0x176c;
        result[502]= 0x176e;
        result[503]= 0x1770;
        result[504]= 0x1772;
        result[505]= 0x1773;
        result[506]= 0x1780;
        result[507]= 0x17d3;
        result[508]= 0x17d7;
        result[509]= 0x17d7;
        result[510]= 0x17db;
        result[511]= 0x17dd;
        result[512]= 0x17e0;
        result[513]= 0x17e9;
        result[514]= 0x180b;
        result[515]= 0x180e;
        result[516]= 0x1810;
        result[517]= 0x1819;
        result[518]= 0x1820;
        result[519]= 0x1878;
        result[520]= 0x1880;
        result[521]= 0x18aa;
        result[522]= 0x18b0;
        result[523]= 0x18f5;
        result[524]= 0x1900;
        result[525]= 0x191e;
        result[526]= 0x1920;
        result[527]= 0x192b;
        result[528]= 0x1930;
        result[529]= 0x193b;
        result[530]= 0x1946;
        result[531]= 0x196d;
        result[532]= 0x1970;
        result[533]= 0x1974;
        result[534]= 0x1980;
        result[535]= 0x19ab;
        result[536]= 0x19b0;
        result[537]= 0x19c9;
        result[538]= 0x19d0;
        result[539]= 0x19d9;
        result[540]= 0x1a00;
        result[541]= 0x1a1b;
        result[542]= 0x1a20;
        result[543]= 0x1a5e;
        result[544]= 0x1a60;
        result[545]= 0x1a7c;
        result[546]= 0x1a7f;
        result[547]= 0x1a89;
        result[548]= 0x1a90;
        result[549]= 0x1a99;
        result[550]= 0x1aa7;
        result[551]= 0x1aa7;
        result[552]= 0x1ab0;
        result[553]= 0x1abd;
        result[554]= 0x1abf;
        result[555]= 0x1ac0;
        result[556]= 0x1b00;
        result[557]= 0x1b4b;
        result[558]= 0x1b50;
        result[559]= 0x1b59;
        result[560]= 0x1b6b;
        result[561]= 0x1b73;
        result[562]= 0x1b80;
        result[563]= 0x1bf3;
        result[564]= 0x1c00;
        result[565]= 0x1c37;
        result[566]= 0x1c40;
        result[567]= 0x1c49;
        result[568]= 0x1c4d;
        result[569]= 0x1c7d;
        result[570]= 0x1c80;
        result[571]= 0x1c88;
        result[572]= 0x1c90;
        result[573]= 0x1cba;
        result[574]= 0x1cbd;
        result[575]= 0x1cbf;
        result[576]= 0x1cd0;
        result[577]= 0x1cd2;
        result[578]= 0x1cd4;
        result[579]= 0x1cfa;
        result[580]= 0x1d00;
        result[581]= 0x1df9;
        result[582]= 0x1dfb;
        result[583]= 0x1f15;
        result[584]= 0x1f18;
        result[585]= 0x1f1d;
        result[586]= 0x1f20;
        result[587]= 0x1f45;
        result[588]= 0x1f48;
        result[589]= 0x1f4d;
        result[590]= 0x1f50;
        result[591]= 0x1f57;
        result[592]= 0x1f59;
        result[593]= 0x1f59;
        result[594]= 0x1f5b;
        result[595]= 0x1f5b;
        result[596]= 0x1f5d;
        result[597]= 0x1f5d;
        result[598]= 0x1f5f;
        result[599]= 0x1f7d;
        result[600]= 0x1f80;
        result[601]= 0x1fb4;
        result[602]= 0x1fb6;
        result[603]= 0x1fbc;
        result[604]= 0x1fbe;
        result[605]= 0x1fbe;
        result[606]= 0x1fc2;
        result[607]= 0x1fc4;
        result[608]= 0x1fc6;
        result[609]= 0x1fcc;
        result[610]= 0x1fd0;
        result[611]= 0x1fd3;
        result[612]= 0x1fd6;
        result[613]= 0x1fdb;
        result[614]= 0x1fe0;
        result[615]= 0x1fec;
        result[616]= 0x1ff2;
        result[617]= 0x1ff4;
        result[618]= 0x1ff6;
        result[619]= 0x1ffc;
        result[620]= 0x200b;
        result[621]= 0x200f;
        result[622]= 0x202a;
        result[623]= 0x202e;
        result[624]= 0x203f;
        result[625]= 0x2040;
        result[626]= 0x2054;
        result[627]= 0x2054;
        result[628]= 0x2060;
        result[629]= 0x2064;
        result[630]= 0x2066;
        result[631]= 0x206f;
        result[632]= 0x2071;
        result[633]= 0x2071;
        result[634]= 0x207f;
        result[635]= 0x207f;
        result[636]= 0x2090;
        result[637]= 0x209c;
        result[638]= 0x20a0;
        result[639]= 0x20bf;
        result[640]= 0x20d0;
        result[641]= 0x20dc;
        result[642]= 0x20e1;
        result[643]= 0x20e1;
        result[644]= 0x20e5;
        result[645]= 0x20f0;
        result[646]= 0x2102;
        result[647]= 0x2102;
        result[648]= 0x2107;
        result[649]= 0x2107;
        result[650]= 0x210a;
        result[651]= 0x2113;
        result[652]= 0x2115;
        result[653]= 0x2115;
        result[654]= 0x2119;
        result[655]= 0x211d;
        result[656]= 0x2124;
        result[657]= 0x2124;
        result[658]= 0x2126;
        result[659]= 0x2126;
        result[660]= 0x2128;
        result[661]= 0x2128;
        result[662]= 0x212a;
        result[663]= 0x212d;
        result[664]= 0x212f;
        result[665]= 0x2139;
        result[666]= 0x213c;
        result[667]= 0x213f;
        result[668]= 0x2145;
        result[669]= 0x2149;
        result[670]= 0x214e;
        result[671]= 0x214e;
        result[672]= 0x2160;
        result[673]= 0x2188;
        result[674]= 0x2c00;
        result[675]= 0x2c2e;
        result[676]= 0x2c30;
        result[677]= 0x2c5e;
        result[678]= 0x2c60;
        result[679]= 0x2ce4;
        result[680]= 0x2ceb;
        result[681]= 0x2cf3;
        result[682]= 0x2d00;
        result[683]= 0x2d25;
        result[684]= 0x2d27;
        result[685]= 0x2d27;
        result[686]= 0x2d2d;
        result[687]= 0x2d2d;
        result[688]= 0x2d30;
        result[689]= 0x2d67;
        result[690]= 0x2d6f;
        result[691]= 0x2d6f;
        result[692]= 0x2d7f;
        result[693]= 0x2d96;
        result[694]= 0x2da0;
        result[695]= 0x2da6;
        result[696]= 0x2da8;
        result[697]= 0x2dae;
        result[698]= 0x2db0;
        result[699]= 0x2db6;
        result[700]= 0x2db8;
        result[701]= 0x2dbe;
        result[702]= 0x2dc0;
        result[703]= 0x2dc6;
        result[704]= 0x2dc8;
        result[705]= 0x2dce;
        result[706]= 0x2dd0;
        result[707]= 0x2dd6;
        result[708]= 0x2dd8;
        result[709]= 0x2dde;
        result[710]= 0x2de0;
        result[711]= 0x2dff;
        result[712]= 0x2e2f;
        result[713]= 0x2e2f;
        result[714]= 0x3005;
        result[715]= 0x3007;
        result[716]= 0x3021;
        result[717]= 0x302f;
        result[718]= 0x3031;
        result[719]= 0x3035;
        result[720]= 0x3038;
        result[721]= 0x303c;
        result[722]= 0x3041;
        result[723]= 0x3096;
        result[724]= 0x3099;
        result[725]= 0x309a;
        result[726]= 0x309d;
        result[727]= 0x309f;
        result[728]= 0x30a1;
        result[729]= 0x30fa;
        result[730]= 0x30fc;
        result[731]= 0x30ff;
        result[732]= 0x3105;
        result[733]= 0x312f;
        result[734]= 0x3131;
        result[735]= 0x318e;
        result[736]= 0x31a0;
        result[737]= 0x31bf;
        result[738]= 0x31f0;
        result[739]= 0x31ff;
        result[740]= 0x3400;
        result[741]= 0x4dbf;
        result[742]= 0x4e00;
        result[743]= 0x9ffc;
        result[744]= 0xa000;
        result[745]= 0xa48c;
        result[746]= 0xa4d0;
        result[747]= 0xa4fd;
        result[748]= 0xa500;
        result[749]= 0xa60c;
        result[750]= 0xa610;
        result[751]= 0xa62b;
        result[752]= 0xa640;
        result[753]= 0xa66f;
        result[754]= 0xa674;
        result[755]= 0xa67d;
        result[756]= 0xa67f;
        result[757]= 0xa6f1;
        result[758]= 0xa717;
        result[759]= 0xa71f;
        result[760]= 0xa722;
        result[761]= 0xa788;
        result[762]= 0xa78b;
        result[763]= 0xa7bf;
        result[764]= 0xa7c2;
        result[765]= 0xa7ca;
        result[766]= 0xa7f5;
        result[767]= 0xa827;
        result[768]= 0xa82c;
        result[769]= 0xa82c;
        result[770]= 0xa838;
        result[771]= 0xa838;
        result[772]= 0xa840;
        result[773]= 0xa873;
        result[774]= 0xa880;
        result[775]= 0xa8c5;
        result[776]= 0xa8d0;
        result[777]= 0xa8d9;
        result[778]= 0xa8e0;
        result[779]= 0xa8f7;
        result[780]= 0xa8fb;
        result[781]= 0xa8fb;
        result[782]= 0xa8fd;
        result[783]= 0xa92d;
        result[784]= 0xa930;
        result[785]= 0xa953;
        result[786]= 0xa960;
        result[787]= 0xa97c;
        result[788]= 0xa980;
        result[789]= 0xa9c0;
        result[790]= 0xa9cf;
        result[791]= 0xa9d9;
        result[792]= 0xa9e0;
        result[793]= 0xa9fe;
        result[794]= 0xaa00;
        result[795]= 0xaa36;
        result[796]= 0xaa40;
        result[797]= 0xaa4d;
        result[798]= 0xaa50;
        result[799]= 0xaa59;
        result[800]= 0xaa60;
        result[801]= 0xaa76;
        result[802]= 0xaa7a;
        result[803]= 0xaac2;
        result[804]= 0xaadb;
        result[805]= 0xaadd;
        result[806]= 0xaae0;
        result[807]= 0xaaef;
        result[808]= 0xaaf2;
        result[809]= 0xaaf6;
        result[810]= 0xab01;
        result[811]= 0xab06;
        result[812]= 0xab09;
        result[813]= 0xab0e;
        result[814]= 0xab11;
        result[815]= 0xab16;
        result[816]= 0xab20;
        result[817]= 0xab26;
        result[818]= 0xab28;
        result[819]= 0xab2e;
        result[820]= 0xab30;
        result[821]= 0xab5a;
        result[822]= 0xab5c;
        result[823]= 0xab69;
        result[824]= 0xab70;
        result[825]= 0xabea;
        result[826]= 0xabec;
        result[827]= 0xabed;
        result[828]= 0xabf0;
        result[829]= 0xabf9;
        result[830]= 0xac00;
        result[831]= 0xd7a3;
        result[832]= 0xd7b0;
        result[833]= 0xd7c6;
        result[834]= 0xd7cb;
        result[835]= 0xd7fb;
        result[836]= 0xf900;
        result[837]= 0xfa6d;
        result[838]= 0xfa70;
        result[839]= 0xfad9;
        result[840]= 0xfb00;
        result[841]= 0xfb06;
        result[842]= 0xfb13;
        result[843]= 0xfb17;
        result[844]= 0xfb1d;
        result[845]= 0xfb28;
        result[846]= 0xfb2a;
        result[847]= 0xfb36;
        result[848]= 0xfb38;
        result[849]= 0xfb3c;
        result[850]= 0xfb3e;
        result[851]= 0xfb3e;
        result[852]= 0xfb40;
        result[853]= 0xfb41;
        result[854]= 0xfb43;
        result[855]= 0xfb44;
        result[856]= 0xfb46;
        result[857]= 0xfbb1;
        result[858]= 0xfbd3;
        result[859]= 0xfd3d;
        result[860]= 0xfd50;
        result[861]= 0xfd8f;
        result[862]= 0xfd92;
        result[863]= 0xfdc7;
        result[864]= 0xfdf0;
        result[865]= 0xfdfc;
        result[866]= 0xfe00;
        result[867]= 0xfe0f;
        result[868]= 0xfe20;
        result[869]= 0xfe2f;
        result[870]= 0xfe33;
        result[871]= 0xfe34;
        result[872]= 0xfe4d;
        result[873]= 0xfe4f;
        result[874]= 0xfe69;
        result[875]= 0xfe69;
        result[876]= 0xfe70;
        result[877]= 0xfe74;
        result[878]= 0xfe76;
        result[879]= 0xfefc;
        result[880]= 0xfeff;
        result[881]= 0xfeff;
        result[882]= 0xff04;
        result[883]= 0xff04;
        result[884]= 0xff10;
        result[885]= 0xff19;
        result[886]= 0xff21;
        result[887]= 0xff3a;
        result[888]= 0xff3f;
        result[889]= 0xff3f;
        result[890]= 0xff41;
        result[891]= 0xff5a;
        result[892]= 0xff66;
        result[893]= 0xffbe;
        result[894]= 0xffc2;
        result[895]= 0xffc7;
        result[896]= 0xffca;
        result[897]= 0xffcf;
        result[898]= 0xffd2;
        result[899]= 0xffd7;
        result[900]= 0xffda;
        result[901]= 0xffdc;
        result[902]= 0xffe0;
        result[903]= 0xffe1;
        result[904]= 0xffe5;
        result[905]= 0xffe6;
        result[906]= 0xfff9;
        result[907]= 0xfffb;
        result[908]= 0x10000;
        result[909]= 0x1000b;
        result[910]= 0x1000d;
        result[911]= 0x10026;
        result[912]= 0x10028;
        result[913]= 0x1003a;
        result[914]= 0x1003c;
        result[915]= 0x1003d;
        result[916]= 0x1003f;
        result[917]= 0x1004d;
        result[918]= 0x10050;
        result[919]= 0x1005d;
        result[920]= 0x10080;
        result[921]= 0x100fa;
        result[922]= 0x10140;
        result[923]= 0x10174;
        result[924]= 0x101fd;
        result[925]= 0x101fd;
        result[926]= 0x10280;
        result[927]= 0x1029c;
        result[928]= 0x102a0;
        result[929]= 0x102d0;
        result[930]= 0x102e0;
        result[931]= 0x102e0;
        result[932]= 0x10300;
        result[933]= 0x1031f;
        result[934]= 0x1032d;
        result[935]= 0x1034a;
        result[936]= 0x10350;
        result[937]= 0x1037a;
        result[938]= 0x10380;
        result[939]= 0x1039d;
        result[940]= 0x103a0;
        result[941]= 0x103c3;
        result[942]= 0x103c8;
        result[943]= 0x103cf;
        result[944]= 0x103d1;
        result[945]= 0x103d5;
        result[946]= 0x10400;
        result[947]= 0x1049d;
        result[948]= 0x104a0;
        result[949]= 0x104a9;
        result[950]= 0x104b0;
        result[951]= 0x104d3;
        result[952]= 0x104d8;
        result[953]= 0x104fb;
        result[954]= 0x10500;
        result[955]= 0x10527;
        result[956]= 0x10530;
        result[957]= 0x10563;
        result[958]= 0x10600;
        result[959]= 0x10736;
        result[960]= 0x10740;
        result[961]= 0x10755;
        result[962]= 0x10760;
        result[963]= 0x10767;
        result[964]= 0x10800;
        result[965]= 0x10805;
        result[966]= 0x10808;
        result[967]= 0x10808;
        result[968]= 0x1080a;
        result[969]= 0x10835;
        result[970]= 0x10837;
        result[971]= 0x10838;
        result[972]= 0x1083c;
        result[973]= 0x1083c;
        result[974]= 0x1083f;
        result[975]= 0x10855;
        result[976]= 0x10860;
        result[977]= 0x10876;
        result[978]= 0x10880;
        result[979]= 0x1089e;
        result[980]= 0x108e0;
        result[981]= 0x108f2;
        result[982]= 0x108f4;
        result[983]= 0x108f5;
        result[984]= 0x10900;
        result[985]= 0x10915;
        result[986]= 0x10920;
        result[987]= 0x10939;
        result[988]= 0x10980;
        result[989]= 0x109b7;
        result[990]= 0x109be;
        result[991]= 0x109bf;
        result[992]= 0x10a00;
        result[993]= 0x10a03;
        result[994]= 0x10a05;
        result[995]= 0x10a06;
        result[996]= 0x10a0c;
        result[997]= 0x10a13;
        result[998]= 0x10a15;
        result[999]= 0x10a17;
        result[1000]= 0x10a19;
        result[1001]= 0x10a35;
        result[1002]= 0x10a38;
        result[1003]= 0x10a3a;
        result[1004]= 0x10a3f;
        result[1005]= 0x10a3f;
        result[1006]= 0x10a60;
        result[1007]= 0x10a7c;
        result[1008]= 0x10a80;
        result[1009]= 0x10a9c;
        result[1010]= 0x10ac0;
        result[1011]= 0x10ac7;
        result[1012]= 0x10ac9;
        result[1013]= 0x10ae6;
        result[1014]= 0x10b00;
        result[1015]= 0x10b35;
        result[1016]= 0x10b40;
        result[1017]= 0x10b55;
        result[1018]= 0x10b60;
        result[1019]= 0x10b72;
        result[1020]= 0x10b80;
        result[1021]= 0x10b91;
        result[1022]= 0x10c00;
        result[1023]= 0x10c48;
        result[1024]= 0x10c80;
        result[1025]= 0x10cb2;
        result[1026]= 0x10cc0;
        result[1027]= 0x10cf2;
        result[1028]= 0x10d00;
        result[1029]= 0x10d27;
        result[1030]= 0x10d30;
        result[1031]= 0x10d39;
        result[1032]= 0x10e80;
        result[1033]= 0x10ea9;
        result[1034]= 0x10eab;
        result[1035]= 0x10eac;
        result[1036]= 0x10eb0;
        result[1037]= 0x10eb1;
        result[1038]= 0x10f00;
        result[1039]= 0x10f1c;
        result[1040]= 0x10f27;
        result[1041]= 0x10f27;
        result[1042]= 0x10f30;
        result[1043]= 0x10f50;
        result[1044]= 0x10fb0;
        result[1045]= 0x10fc4;
        result[1046]= 0x10fe0;
        result[1047]= 0x10ff6;
        result[1048]= 0x11000;
        result[1049]= 0x11046;
        result[1050]= 0x11066;
        result[1051]= 0x1106f;
        result[1052]= 0x1107f;
        result[1053]= 0x110ba;
        result[1054]= 0x110bd;
        result[1055]= 0x110bd;
        result[1056]= 0x110cd;
        result[1057]= 0x110cd;
        result[1058]= 0x110d0;
        result[1059]= 0x110e8;
        result[1060]= 0x110f0;
        result[1061]= 0x110f9;
        result[1062]= 0x11100;
        result[1063]= 0x11134;
        result[1064]= 0x11136;
        result[1065]= 0x1113f;
        result[1066]= 0x11144;
        result[1067]= 0x11147;
        result[1068]= 0x11150;
        result[1069]= 0x11173;
        result[1070]= 0x11176;
        result[1071]= 0x11176;
        result[1072]= 0x11180;
        result[1073]= 0x111c4;
        result[1074]= 0x111c9;
        result[1075]= 0x111cc;
        result[1076]= 0x111ce;
        result[1077]= 0x111da;
        result[1078]= 0x111dc;
        result[1079]= 0x111dc;
        result[1080]= 0x11200;
        result[1081]= 0x11211;
        result[1082]= 0x11213;
        result[1083]= 0x11237;
        result[1084]= 0x1123e;
        result[1085]= 0x1123e;
        result[1086]= 0x11280;
        result[1087]= 0x11286;
        result[1088]= 0x11288;
        result[1089]= 0x11288;
        result[1090]= 0x1128a;
        result[1091]= 0x1128d;
        result[1092]= 0x1128f;
        result[1093]= 0x1129d;
        result[1094]= 0x1129f;
        result[1095]= 0x112a8;
        result[1096]= 0x112b0;
        result[1097]= 0x112ea;
        result[1098]= 0x112f0;
        result[1099]= 0x112f9;
        result[1100]= 0x11300;
        result[1101]= 0x11303;
        result[1102]= 0x11305;
        result[1103]= 0x1130c;
        result[1104]= 0x1130f;
        result[1105]= 0x11310;
        result[1106]= 0x11313;
        result[1107]= 0x11328;
        result[1108]= 0x1132a;
        result[1109]= 0x11330;
        result[1110]= 0x11332;
        result[1111]= 0x11333;
        result[1112]= 0x11335;
        result[1113]= 0x11339;
        result[1114]= 0x1133b;
        result[1115]= 0x11344;
        result[1116]= 0x11347;
        result[1117]= 0x11348;
        result[1118]= 0x1134b;
        result[1119]= 0x1134d;
        result[1120]= 0x11350;
        result[1121]= 0x11350;
        result[1122]= 0x11357;
        result[1123]= 0x11357;
        result[1124]= 0x1135d;
        result[1125]= 0x11363;
        result[1126]= 0x11366;
        result[1127]= 0x1136c;
        result[1128]= 0x11370;
        result[1129]= 0x11374;
        result[1130]= 0x11400;
        result[1131]= 0x1144a;
        result[1132]= 0x11450;
        result[1133]= 0x11459;
        result[1134]= 0x1145e;
        result[1135]= 0x11461;
        result[1136]= 0x11480;
        result[1137]= 0x114c5;
        result[1138]= 0x114c7;
        result[1139]= 0x114c7;
        result[1140]= 0x114d0;
        result[1141]= 0x114d9;
        result[1142]= 0x11580;
        result[1143]= 0x115b5;
        result[1144]= 0x115b8;
        result[1145]= 0x115c0;
        result[1146]= 0x115d8;
        result[1147]= 0x115dd;
        result[1148]= 0x11600;
        result[1149]= 0x11640;
        result[1150]= 0x11644;
        result[1151]= 0x11644;
        result[1152]= 0x11650;
        result[1153]= 0x11659;
        result[1154]= 0x11680;
        result[1155]= 0x116b8;
        result[1156]= 0x116c0;
        result[1157]= 0x116c9;
        result[1158]= 0x11700;
        result[1159]= 0x1171a;
        result[1160]= 0x1171d;
        result[1161]= 0x1172b;
        result[1162]= 0x11730;
        result[1163]= 0x11739;
        result[1164]= 0x11800;
        result[1165]= 0x1183a;
        result[1166]= 0x118a0;
        result[1167]= 0x118e9;
        result[1168]= 0x118ff;
        result[1169]= 0x11906;
        result[1170]= 0x11909;
        result[1171]= 0x11909;
        result[1172]= 0x1190c;
        result[1173]= 0x11913;
        result[1174]= 0x11915;
        result[1175]= 0x11916;
        result[1176]= 0x11918;
        result[1177]= 0x11935;
        result[1178]= 0x11937;
        result[1179]= 0x11938;
        result[1180]= 0x1193b;
        result[1181]= 0x11943;
        result[1182]= 0x11950;
        result[1183]= 0x11959;
        result[1184]= 0x119a0;
        result[1185]= 0x119a7;
        result[1186]= 0x119aa;
        result[1187]= 0x119d7;
        result[1188]= 0x119da;
        result[1189]= 0x119e1;
        result[1190]= 0x119e3;
        result[1191]= 0x119e4;
        result[1192]= 0x11a00;
        result[1193]= 0x11a3e;
        result[1194]= 0x11a47;
        result[1195]= 0x11a47;
        result[1196]= 0x11a50;
        result[1197]= 0x11a99;
        result[1198]= 0x11a9d;
        result[1199]= 0x11a9d;
        result[1200]= 0x11ac0;
        result[1201]= 0x11af8;
        result[1202]= 0x11c00;
        result[1203]= 0x11c08;
        result[1204]= 0x11c0a;
        result[1205]= 0x11c36;
        result[1206]= 0x11c38;
        result[1207]= 0x11c40;
        result[1208]= 0x11c50;
        result[1209]= 0x11c59;
        result[1210]= 0x11c72;
        result[1211]= 0x11c8f;
        result[1212]= 0x11c92;
        result[1213]= 0x11ca7;
        result[1214]= 0x11ca9;
        result[1215]= 0x11cb6;
        result[1216]= 0x11d00;
        result[1217]= 0x11d06;
        result[1218]= 0x11d08;
        result[1219]= 0x11d09;
        result[1220]= 0x11d0b;
        result[1221]= 0x11d36;
        result[1222]= 0x11d3a;
        result[1223]= 0x11d3a;
        result[1224]= 0x11d3c;
        result[1225]= 0x11d3d;
        result[1226]= 0x11d3f;
        result[1227]= 0x11d47;
        result[1228]= 0x11d50;
        result[1229]= 0x11d59;
        result[1230]= 0x11d60;
        result[1231]= 0x11d65;
        result[1232]= 0x11d67;
        result[1233]= 0x11d68;
        result[1234]= 0x11d6a;
        result[1235]= 0x11d8e;
        result[1236]= 0x11d90;
        result[1237]= 0x11d91;
        result[1238]= 0x11d93;
        result[1239]= 0x11d98;
        result[1240]= 0x11da0;
        result[1241]= 0x11da9;
        result[1242]= 0x11ee0;
        result[1243]= 0x11ef6;
        result[1244]= 0x11fb0;
        result[1245]= 0x11fb0;
        result[1246]= 0x11fdd;
        result[1247]= 0x11fe0;
        result[1248]= 0x12000;
        result[1249]= 0x12399;
        result[1250]= 0x12400;
        result[1251]= 0x1246e;
        result[1252]= 0x12480;
        result[1253]= 0x12543;
        result[1254]= 0x13000;
        result[1255]= 0x1342e;
        result[1256]= 0x13430;
        result[1257]= 0x13438;
        result[1258]= 0x14400;
        result[1259]= 0x14646;
        result[1260]= 0x16800;
        result[1261]= 0x16a38;
        result[1262]= 0x16a40;
        result[1263]= 0x16a5e;
        result[1264]= 0x16a60;
        result[1265]= 0x16a69;
        result[1266]= 0x16ad0;
        result[1267]= 0x16aed;
        result[1268]= 0x16af0;
        result[1269]= 0x16af4;
        result[1270]= 0x16b00;
        result[1271]= 0x16b36;
        result[1272]= 0x16b40;
        result[1273]= 0x16b43;
        result[1274]= 0x16b50;
        result[1275]= 0x16b59;
        result[1276]= 0x16b63;
        result[1277]= 0x16b77;
        result[1278]= 0x16b7d;
        result[1279]= 0x16b8f;
        result[1280]= 0x16e40;
        result[1281]= 0x16e7f;
        result[1282]= 0x16f00;
        result[1283]= 0x16f4a;
        result[1284]= 0x16f4f;
        result[1285]= 0x16f87;
        result[1286]= 0x16f8f;
        result[1287]= 0x16f9f;
        result[1288]= 0x16fe0;
        result[1289]= 0x16fe1;
        result[1290]= 0x16fe3;
        result[1291]= 0x16fe4;
        result[1292]= 0x16ff0;
        result[1293]= 0x16ff1;
        result[1294]= 0x17000;
        result[1295]= 0x187f7;
        result[1296]= 0x18800;
        result[1297]= 0x18cd5;
        result[1298]= 0x18d00;
        result[1299]= 0x18d08;
        result[1300]= 0x1b000;
        result[1301]= 0x1b11e;
        result[1302]= 0x1b150;
        result[1303]= 0x1b152;
        result[1304]= 0x1b164;
        result[1305]= 0x1b167;
        result[1306]= 0x1b170;
        result[1307]= 0x1b2fb;
        result[1308]= 0x1bc00;
        result[1309]= 0x1bc6a;
        result[1310]= 0x1bc70;
        result[1311]= 0x1bc7c;
        result[1312]= 0x1bc80;
        result[1313]= 0x1bc88;
        result[1314]= 0x1bc90;
        result[1315]= 0x1bc99;
        result[1316]= 0x1bc9d;
        result[1317]= 0x1bc9e;
        result[1318]= 0x1bca0;
        result[1319]= 0x1bca3;
        result[1320]= 0x1d165;
        result[1321]= 0x1d169;
        result[1322]= 0x1d16d;
        result[1323]= 0x1d182;
        result[1324]= 0x1d185;
        result[1325]= 0x1d18b;
        result[1326]= 0x1d1aa;
        result[1327]= 0x1d1ad;
        result[1328]= 0x1d242;
        result[1329]= 0x1d244;
        result[1330]= 0x1d400;
        result[1331]= 0x1d454;
        result[1332]= 0x1d456;
        result[1333]= 0x1d49c;
        result[1334]= 0x1d49e;
        result[1335]= 0x1d49f;
        result[1336]= 0x1d4a2;
        result[1337]= 0x1d4a2;
        result[1338]= 0x1d4a5;
        result[1339]= 0x1d4a6;
        result[1340]= 0x1d4a9;
        result[1341]= 0x1d4ac;
        result[1342]= 0x1d4ae;
        result[1343]= 0x1d4b9;
        result[1344]= 0x1d4bb;
        result[1345]= 0x1d4bb;
        result[1346]= 0x1d4bd;
        result[1347]= 0x1d4c3;
        result[1348]= 0x1d4c5;
        result[1349]= 0x1d505;
        result[1350]= 0x1d507;
        result[1351]= 0x1d50a;
        result[1352]= 0x1d50d;
        result[1353]= 0x1d514;
        result[1354]= 0x1d516;
        result[1355]= 0x1d51c;
        result[1356]= 0x1d51e;
        result[1357]= 0x1d539;
        result[1358]= 0x1d53b;
        result[1359]= 0x1d53e;
        result[1360]= 0x1d540;
        result[1361]= 0x1d544;
        result[1362]= 0x1d546;
        result[1363]= 0x1d546;
        result[1364]= 0x1d54a;
        result[1365]= 0x1d550;
        result[1366]= 0x1d552;
        result[1367]= 0x1d6a5;
        result[1368]= 0x1d6a8;
        result[1369]= 0x1d6c0;
        result[1370]= 0x1d6c2;
        result[1371]= 0x1d6da;
        result[1372]= 0x1d6dc;
        result[1373]= 0x1d6fa;
        result[1374]= 0x1d6fc;
        result[1375]= 0x1d714;
        result[1376]= 0x1d716;
        result[1377]= 0x1d734;
        result[1378]= 0x1d736;
        result[1379]= 0x1d74e;
        result[1380]= 0x1d750;
        result[1381]= 0x1d76e;
        result[1382]= 0x1d770;
        result[1383]= 0x1d788;
        result[1384]= 0x1d78a;
        result[1385]= 0x1d7a8;
        result[1386]= 0x1d7aa;
        result[1387]= 0x1d7c2;
        result[1388]= 0x1d7c4;
        result[1389]= 0x1d7cb;
        result[1390]= 0x1d7ce;
        result[1391]= 0x1d7ff;
        result[1392]= 0x1da00;
        result[1393]= 0x1da36;
        result[1394]= 0x1da3b;
        result[1395]= 0x1da6c;
        result[1396]= 0x1da75;
        result[1397]= 0x1da75;
        result[1398]= 0x1da84;
        result[1399]= 0x1da84;
        result[1400]= 0x1da9b;
        result[1401]= 0x1da9f;
        result[1402]= 0x1daa1;
        result[1403]= 0x1daaf;
        result[1404]= 0x1e000;
        result[1405]= 0x1e006;
        result[1406]= 0x1e008;
        result[1407]= 0x1e018;
        result[1408]= 0x1e01b;
        result[1409]= 0x1e021;
        result[1410]= 0x1e023;
        result[1411]= 0x1e024;
        result[1412]= 0x1e026;
        result[1413]= 0x1e02a;
        result[1414]= 0x1e100;
        result[1415]= 0x1e12c;
        result[1416]= 0x1e130;
        result[1417]= 0x1e13d;
        result[1418]= 0x1e140;
        result[1419]= 0x1e149;
        result[1420]= 0x1e14e;
        result[1421]= 0x1e14e;
        result[1422]= 0x1e2c0;
        result[1423]= 0x1e2f9;
        result[1424]= 0x1e2ff;
        result[1425]= 0x1e2ff;
        result[1426]= 0x1e800;
        result[1427]= 0x1e8c4;
        result[1428]= 0x1e8d0;
        result[1429]= 0x1e8d6;
        result[1430]= 0x1e900;
        result[1431]= 0x1e94b;
        result[1432]= 0x1e950;
        result[1433]= 0x1e959;
        result[1434]= 0x1ecb0;
        result[1435]= 0x1ecb0;
        result[1436]= 0x1ee00;
        result[1437]= 0x1ee03;
        result[1438]= 0x1ee05;
        result[1439]= 0x1ee1f;
        result[1440]= 0x1ee21;
        result[1441]= 0x1ee22;
        result[1442]= 0x1ee24;
        result[1443]= 0x1ee24;
        result[1444]= 0x1ee27;
        result[1445]= 0x1ee27;
        result[1446]= 0x1ee29;
        result[1447]= 0x1ee32;
        result[1448]= 0x1ee34;
        result[1449]= 0x1ee37;
        result[1450]= 0x1ee39;
        result[1451]= 0x1ee39;
        result[1452]= 0x1ee3b;
        result[1453]= 0x1ee3b;
        result[1454]= 0x1ee42;
        result[1455]= 0x1ee42;
        result[1456]= 0x1ee47;
        result[1457]= 0x1ee47;
        result[1458]= 0x1ee49;
        result[1459]= 0x1ee49;
        result[1460]= 0x1ee4b;
        result[1461]= 0x1ee4b;
        result[1462]= 0x1ee4d;
        result[1463]= 0x1ee4f;
        result[1464]= 0x1ee51;
        result[1465]= 0x1ee52;
        result[1466]= 0x1ee54;
        result[1467]= 0x1ee54;
        result[1468]= 0x1ee57;
        result[1469]= 0x1ee57;
        result[1470]= 0x1ee59;
        result[1471]= 0x1ee59;
        result[1472]= 0x1ee5b;
        result[1473]= 0x1ee5b;
        result[1474]= 0x1ee5d;
        result[1475]= 0x1ee5d;
        result[1476]= 0x1ee5f;
        result[1477]= 0x1ee5f;
        result[1478]= 0x1ee61;
        result[1479]= 0x1ee62;
        result[1480]= 0x1ee64;
        result[1481]= 0x1ee64;
        result[1482]= 0x1ee67;
        result[1483]= 0x1ee6a;
        result[1484]= 0x1ee6c;
        result[1485]= 0x1ee72;
        result[1486]= 0x1ee74;
        result[1487]= 0x1ee77;
        result[1488]= 0x1ee79;
        result[1489]= 0x1ee7c;
        result[1490]= 0x1ee7e;
        result[1491]= 0x1ee7e;
        result[1492]= 0x1ee80;
        result[1493]= 0x1ee89;
        result[1494]= 0x1ee8b;
        result[1495]= 0x1ee9b;
        result[1496]= 0x1eea1;
        result[1497]= 0x1eea3;
        result[1498]= 0x1eea5;
        result[1499]= 0x1eea9;
        result[1500]= 0x1eeab;
        result[1501]= 0x1eebb;
        result[1502]= 0x1fbf0;
        result[1503]= 0x1fbf9;
        result[1504]= 0x20000;
        result[1505]= 0x2a6dd;
        result[1506]= 0x2a700;
        result[1507]= 0x2b734;
        result[1508]= 0x2b740;
        result[1509]= 0x2b81d;
        result[1510]= 0x2b820;
        result[1511]= 0x2cea1;
        result[1512]= 0x2ceb0;
        result[1513]= 0x2ebe0;
        result[1514]= 0x2f800;
        result[1515]= 0x2fa1d;
        result[1516]= 0x30000;
        result[1517]= 0x3134a;
        result[1518]= 0xe0001;
        result[1519]= 0xe0001;
        result[1520]= 0xe0020;
        result[1521]= 0xe007f;
        result[1522]= 0xe0100;
        result[1523]= 0xe01ef;
        return result;
    }

    static TokenType NFA_JAVA_185(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (((ch>=0x0&&ch<=0x8)||((ch>=0xe&&ch<=0x1b)||((ch== '$')||((ch>='0'&&ch<='9')||((ch>='A'&&ch<='Z')||((ch== '_')||((ch>='a'&&ch<='z')||(ch>=0x7f&&ch<=0x9f))))))))||(ch>=128&&checkIntervals(NFA_MOVES_JAVA_185, ch))) {
            nextStates.set(185);
            if (validTypes.contains(TokenType.IDENTIFIER)) return TokenType.IDENTIFIER;
        }
        return null;
    }

    static TokenType NFA_JAVA_186(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'l') {
            nextStates.set(546);
        }
        return null;
    }

    static TokenType NFA_JAVA_187(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'a') {
            nextStates.set(344);
        }
        return null;
    }

    static TokenType NFA_JAVA_188(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            nextStates.set(367);
        }
        return null;
    }

    static TokenType NFA_JAVA_189(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'a') {
            nextStates.set(129);
        }
        return null;
    }

    static TokenType NFA_JAVA_190(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'i') {
            nextStates.set(263);
        }
        return null;
    }

    static TokenType NFA_JAVA_191(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'c') {
            nextStates.set(361);
        }
        return null;
    }

    static TokenType NFA_JAVA_192(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '&') {
            if (validTypes.contains(TokenType.SC_AND)) return TokenType.SC_AND;
        }
        return null;
    }

    static TokenType NFA_JAVA_193(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'd') {
            if (validTypes.contains(TokenType.VOID)) return TokenType.VOID;
        }
        return null;
    }

    static TokenType NFA_JAVA_194(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'c') {
            nextStates.set(138);
        }
        return null;
    }

    static TokenType NFA_JAVA_195(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            nextStates.set(256);
        }
        return null;
    }

    static TokenType NFA_JAVA_196(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'c') {
            nextStates.set(103);
        }
        return null;
    }

    static TokenType NFA_JAVA_197(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 's') {
            nextStates.set(357);
        }
        return null;
    }

    static TokenType NFA_JAVA_198(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'a') {
            nextStates.set(541);
        }
        return null;
    }

    static TokenType NFA_JAVA_199(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'a') {
            nextStates.set(241);
        }
        return null;
    }

    static TokenType NFA_JAVA_200(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'n') {
            nextStates.set(400);
        }
        return null;
    }

    static TokenType NFA_JAVA_201(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'w') {
            nextStates.set(362);
        }
        return null;
    }

    static TokenType NFA_JAVA_202(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '=') {
            if (validTypes.contains(TokenType.LE)) return TokenType.LE;
        }
        return null;
    }

    static TokenType NFA_JAVA_203(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'p') {
            nextStates.set(304);
        }
        return null;
    }

    static TokenType NFA_JAVA_204(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'd') {
            if (validTypes.contains(TokenType.SYNCHRONIZED)) return TokenType.SYNCHRONIZED;
        }
        return null;
    }

    static TokenType NFA_JAVA_205(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            nextStates.set(95);
        }
        return null;
    }

    static TokenType NFA_JAVA_206(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'a') {
            nextStates.set(376);
        }
        return null;
    }

    static TokenType NFA_JAVA_207(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'w') {
            if (validTypes.contains(TokenType.THROW)) return TokenType.THROW;
        }
        return null;
    }

    static TokenType NFA_JAVA_208(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'n') {
            if (validTypes.contains(TokenType.RETURN)) return TokenType.RETURN;
        }
        return null;
    }

    static TokenType NFA_JAVA_209(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'b') {
            nextStates.set(89);
        }
        return null;
    }

    static TokenType NFA_JAVA_210(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'b') {
            nextStates.set(266);
        }
        return null;
    }

    static TokenType NFA_JAVA_211(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'r') {
            nextStates.set(289);
        }
        return null;
    }

    static TokenType NFA_JAVA_212(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'i') {
            nextStates.set(332);
        }
        return null;
    }

    static TokenType NFA_JAVA_213(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '+') {
            if (validTypes.contains(TokenType.INCR)) return TokenType.INCR;
        }
        return null;
    }

    static TokenType NFA_JAVA_214(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'a') {
            nextStates.set(451);
        }
        return null;
    }

    static TokenType NFA_JAVA_215(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'g') {
            nextStates.set(294);
        }
        return null;
    }

    static TokenType NFA_JAVA_216(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            nextStates.set(338);
        }
        return null;
    }

    static TokenType NFA_JAVA_217(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '=') {
            if (validTypes.contains(TokenType.MINUSASSIGN)) return TokenType.MINUSASSIGN;
        }
        return null;
    }

    static TokenType NFA_JAVA_218(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'n') {
            nextStates.set(172);
        }
        return null;
    }

    static TokenType NFA_JAVA_219(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'r') {
            nextStates.set(100);
        }
        return null;
    }

    static TokenType NFA_JAVA_220(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'r') {
            nextStates.set(388);
        }
        return null;
    }

    static TokenType NFA_JAVA_221(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            if (validTypes.contains(TokenType.NATIVE)) return TokenType.NATIVE;
        }
        return null;
    }

    static TokenType NFA_JAVA_222(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            if (validTypes.contains(TokenType._DEFAULT)) return TokenType._DEFAULT;
        }
        return null;
    }

    static TokenType NFA_JAVA_223(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            nextStates.set(280);
        }
        return null;
    }

    static TokenType NFA_JAVA_224(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            if (validTypes.contains(TokenType.SHORT)) return TokenType.SHORT;
        }
        return null;
    }

    static TokenType NFA_JAVA_225(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'r') {
            if (validTypes.contains(TokenType.FOR)) return TokenType.FOR;
        }
        return null;
    }

    static TokenType NFA_JAVA_226(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '<') {
            nextStates.set(339);
        }
        return null;
    }

    static TokenType NFA_JAVA_227(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'v') {
            nextStates.set(517);
        }
        return null;
    }

    static TokenType NFA_JAVA_228(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            if (validTypes.contains(TokenType.ME)) return TokenType.ME;
        }
        return null;
    }

    static TokenType NFA_JAVA_229(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'v') {
            nextStates.set(214);
        }
        return null;
    }

    static TokenType NFA_JAVA_230(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'l') {
            nextStates.set(183);
        }
        return null;
    }

    static TokenType NFA_JAVA_231(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 's') {
            nextStates.set(453);
        }
        return null;
    }

    static TokenType NFA_JAVA_232(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'r') {
            nextStates.set(426);
        }
        return null;
    }

    static TokenType NFA_JAVA_233(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            nextStates.set(274);
        }
        return null;
    }

    static TokenType NFA_JAVA_234(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '(') {
            if (validTypes.contains(TokenType.LPAREN)) return TokenType.LPAREN;
        }
        return null;
    }

    static TokenType NFA_JAVA_235(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'r') {
            nextStates.set(444);
        }
        return null;
    }

    static TokenType NFA_JAVA_236(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'd') {
            if (validTypes.contains(TokenType.NON_SEALED)) return TokenType.NON_SEALED;
        }
        return null;
    }

    static TokenType NFA_JAVA_237(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'u') {
            nextStates.set(313);
        }
        return null;
    }

    static TokenType NFA_JAVA_238(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'i') {
            nextStates.set(229);
        }
        return null;
    }

    static TokenType NFA_JAVA_239(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'l') {
            nextStates.set(173);
        }
        return null;
    }

    static TokenType NFA_JAVA_240(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '>') {
            if (validTypes.contains(TokenType.RSIGNEDSHIFT)) return TokenType.RSIGNEDSHIFT;
        }
        return null;
    }

    static TokenType NFA_JAVA_241(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            nextStates.set(405);
        }
        return null;
    }

    static TokenType NFA_JAVA_242(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'n') {
            nextStates.set(423);
        }
        return null;
    }

    static TokenType NFA_JAVA_243(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '"') {
            nextStates.set(17);
        }
        return null;
    }

    static TokenType NFA_JAVA_244(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            nextStates.set(90);
        }
        return null;
    }

    static TokenType NFA_JAVA_245(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'w') {
            nextStates.set(106);
        }
        return null;
    }

    static TokenType NFA_JAVA_246(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '>') {
            nextStates.set(240);
        }
        return null;
    }

    static TokenType NFA_JAVA_247(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            if (validTypes.contains(TokenType.INT)) return TokenType.INT;
        }
        return null;
    }

    static TokenType NFA_JAVA_248(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'v') {
            nextStates.set(221);
        }
        return null;
    }

    static TokenType NFA_JAVA_249(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '>') {
            nextStates.set(509);
        }
        return null;
    }

    static TokenType NFA_JAVA_250(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'i') {
            nextStates.set(143);
        }
        return null;
    }

    static TokenType NFA_JAVA_251(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            if (validTypes.contains(TokenType.CONST)) return TokenType.CONST;
        }
        return null;
    }

    static TokenType NFA_JAVA_252(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '.') {
            if (validTypes.contains(TokenType.VAR_ARGS)) return TokenType.VAR_ARGS;
        }
        return null;
    }

    static TokenType NFA_JAVA_253(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            nextStates.set(394);
        }
        return null;
    }

    static TokenType NFA_JAVA_254(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'f') {
            nextStates.set(508);
        }
        return null;
    }

    static TokenType NFA_JAVA_255(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'f') {
            nextStates.set(165);
        }
        return null;
    }

    static TokenType NFA_JAVA_256(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'd') {
            if (validTypes.contains(TokenType.PROTECTED)) return TokenType.PROTECTED;
        }
        return null;
    }

    static TokenType NFA_JAVA_257(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'o') {
            nextStates.set(211);
        }
        return null;
    }

    static TokenType NFA_JAVA_258(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'd') {
            if (validTypes.contains(TokenType.SEALED)) return TokenType.SEALED;
        }
        return null;
    }

    static TokenType NFA_JAVA_259(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'a') {
            nextStates.set(244);
        }
        return null;
    }

    static TokenType NFA_JAVA_260(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'c') {
            nextStates.set(460);
        }
        return null;
    }

    static TokenType NFA_JAVA_261(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'u') {
            nextStates.set(354);
        }
        return null;
    }

    static TokenType NFA_JAVA_262(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '\'') {
            nextStates.set(50);
        }
        return null;
    }

    static TokenType NFA_JAVA_263(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'n') {
            if (validTypes.contains(TokenType.BEGIN)) return TokenType.BEGIN;
        }
        return null;
    }

    static TokenType NFA_JAVA_264(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'p') {
            nextStates.set(446);
        }
        return null;
    }

    static TokenType NFA_JAVA_265(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 's') {
            nextStates.set(317);
        }
        return null;
    }

    static TokenType NFA_JAVA_266(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 's') {
            nextStates.set(134);
        }
        return null;
    }

    static TokenType NFA_JAVA_267(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'c') {
            nextStates.set(459);
        }
        return null;
    }

    static TokenType NFA_JAVA_268(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'n') {
            nextStates.set(155);
        }
        return null;
    }

    static TokenType NFA_JAVA_269(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            if (validTypes.contains(TokenType.FLOAT)) return TokenType.FLOAT;
        }
        return null;
    }

    static TokenType NFA_JAVA_270(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== 'B')||(ch== 'b')) {
            nextStates.set(102);
        }
        return null;
    }

    static TokenType NFA_JAVA_271(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='7') {
            nextStates.set(30);
        }
        return null;
    }

    static TokenType NFA_JAVA_272(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'o') {
            nextStates.set(283);
        }
        return null;
    }

    static TokenType NFA_JAVA_273(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            nextStates.set(466);
        }
        return null;
    }

    static TokenType NFA_JAVA_274(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'f') {
            nextStates.set(206);
        }
        return null;
    }

    static TokenType NFA_JAVA_275(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '=') {
            if (validTypes.contains(TokenType.XORASSIGN)) return TokenType.XORASSIGN;
        }
        return null;
    }

    static TokenType NFA_JAVA_276(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'f') {
            nextStates.set(406);
        }
        return null;
    }

    static TokenType NFA_JAVA_277(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'p') {
            if (validTypes.contains(TokenType.STRICTFP)) return TokenType.STRICTFP;
        }
        return null;
    }

    static TokenType NFA_JAVA_278(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== ',') {
            if (validTypes.contains(TokenType.COMMA)) return TokenType.COMMA;
        }
        return null;
    }

    static TokenType NFA_JAVA_279(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '=') {
            if (validTypes.contains(TokenType.NE)) return TokenType.NE;
        }
        return null;
    }

    static TokenType NFA_JAVA_280(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'r') {
            nextStates.set(237);
        }
        return null;
    }

    static TokenType NFA_JAVA_281(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '.') {
            nextStates.set(353);
        }
        return null;
    }

    static TokenType NFA_JAVA_282(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '<') {
            if (validTypes.contains(TokenType.LT)) return TokenType.LT;
        }
        return null;
    }

    static TokenType NFA_JAVA_283(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'a') {
            nextStates.set(269);
        }
        return null;
    }

    static TokenType NFA_JAVA_284(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'c') {
            nextStates.set(176);
        }
        return null;
    }

    static TokenType NFA_JAVA_285(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'g') {
            nextStates.set(377);
        }
        return null;
    }

    static TokenType NFA_JAVA_286(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'p') {
            nextStates.set(146);
        }
        return null;
    }

    static TokenType NFA_JAVA_287(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'z') {
            nextStates.set(528);
        }
        return null;
    }

    static TokenType NFA_JAVA_288(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '^') {
            nextStates.set(275);
        }
        return null;
    }

    static TokenType NFA_JAVA_289(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'd') {
            if (validTypes.contains(TokenType.RECORD)) return TokenType.RECORD;
        }
        return null;
    }

    static TokenType NFA_JAVA_290(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||(ch>='a'&&ch<='f'))) {
            nextStates.set(68);
        }
        return null;
    }

    static TokenType NFA_JAVA_291(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'i') {
            nextStates.set(418);
        }
        return null;
    }

    static TokenType NFA_JAVA_292(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '"') {
            nextStates.set(23);
        }
        return null;
    }

    static TokenType NFA_JAVA_293(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>=0x0&&ch<='!')||(ch>='#')) {
            nextStates.set(30);
        }
        return null;
    }

    static TokenType NFA_JAVA_294(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'o') {
            nextStates.set(540);
        }
        return null;
    }

    static TokenType NFA_JAVA_295(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '\n') {
            nextStates.set(30);
        }
        return null;
    }

    static TokenType NFA_JAVA_296(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            nextStates.set(542);
        }
        return null;
    }

    static TokenType NFA_JAVA_297(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'g') {
            if (validTypes.contains(TokenType.PROG)) return TokenType.PROG;
        }
        return null;
    }

    static TokenType NFA_JAVA_298(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== 'X')||(ch== 'x')) {
            nextStates.set(67);
        }
        return null;
    }

    static TokenType NFA_JAVA_299(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'i') {
            nextStates.set(309);
        }
        return null;
    }

    static TokenType NFA_JAVA_300(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'n') {
            nextStates.set(488);
        }
        return null;
    }

    static TokenType NFA_JAVA_301(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'l') {
            nextStates.set(222);
        }
        return null;
    }

    static TokenType NFA_JAVA_302(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== ':') {
            if (validTypes.contains(TokenType.DOUBLE_COLON)) return TokenType.DOUBLE_COLON;
        }
        return null;
    }

    static TokenType NFA_JAVA_303(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'm') {
            nextStates.set(481);
        }
        return null;
    }

    static TokenType NFA_JAVA_304(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'r') {
            nextStates.set(447);
        }
        return null;
    }

    static TokenType NFA_JAVA_305(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            nextStates.set(343);
        }
        return null;
    }

    static TokenType NFA_JAVA_306(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '&') {
            nextStates.set(192);
        }
        return null;
    }

    static TokenType NFA_JAVA_307(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'n') {
            nextStates.set(164);
        }
        return null;
    }

    static TokenType NFA_JAVA_308(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '>') {
            nextStates.set(456);
        }
        return null;
    }

    static TokenType NFA_JAVA_309(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'n') {
            nextStates.set(125);
        }
        return null;
    }

    static TokenType NFA_JAVA_310(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '=') {
            if (validTypes.contains(TokenType.GE)) return TokenType.GE;
        }
        return null;
    }

    static TokenType NFA_JAVA_311(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            nextStates.set(258);
        }
        return null;
    }

    static TokenType NFA_JAVA_312(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'h') {
            nextStates.set(232);
        }
        return null;
    }

    static TokenType NFA_JAVA_313(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            if (validTypes.contains(TokenType.TRUE)) return TokenType.TRUE;
        }
        return null;
    }

    static TokenType NFA_JAVA_314(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'f') {
            nextStates.set(277);
        }
        return null;
    }

    static TokenType NFA_JAVA_315(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'h') {
            nextStates.set(496);
        }
        return null;
    }

    static TokenType NFA_JAVA_316(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='7') {
            nextStates.set(52);
        }
        return null;
    }

    static TokenType NFA_JAVA_317(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            if (validTypes.contains(TokenType.ELSE)) return TokenType.ELSE;
        }
        return null;
    }

    static TokenType NFA_JAVA_318(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '=') {
            nextStates.set(499);
        }
        return null;
    }

    static TokenType NFA_JAVA_319(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== ')') {
            if (validTypes.contains(TokenType.RPAREN)) return TokenType.RPAREN;
        }
        return null;
    }

    static TokenType NFA_JAVA_320(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'b') {
            nextStates.set(273);
        }
        return null;
    }

    static TokenType NFA_JAVA_321(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'o') {
            nextStates.set(419);
        }
        return null;
    }

    static TokenType NFA_JAVA_322(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '>') {
            if (validTypes.contains(TokenType.GT)) return TokenType.GT;
        }
        return null;
    }

    static TokenType NFA_JAVA_323(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'l') {
            nextStates.set(88);
        }
        return null;
    }

    static TokenType NFA_JAVA_324(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 's') {
            nextStates.set(399);
        }
        return null;
    }

    static TokenType NFA_JAVA_325(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'k') {
            if (validTypes.contains(TokenType.BREAK)) return TokenType.BREAK;
        }
        return null;
    }

    static TokenType NFA_JAVA_326(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'r') {
            nextStates.set(276);
        }
        return null;
    }

    static TokenType NFA_JAVA_327(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'i') {
            nextStates.set(330);
        }
        return null;
    }

    static TokenType NFA_JAVA_328(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            nextStates.set(142);
        }
        return null;
    }

    static TokenType NFA_JAVA_329(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'n') {
            nextStates.set(458);
        }
        return null;
    }

    static TokenType NFA_JAVA_330(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'n') {
            nextStates.set(382);
        }
        return null;
    }

    static TokenType NFA_JAVA_331(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'l') {
            nextStates.set(448);
        }
        return null;
    }

    static TokenType NFA_JAVA_332(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'n') {
            nextStates.set(247);
        }
        return null;
    }

    static TokenType NFA_JAVA_333(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'k') {
            nextStates.set(445);
        }
        return null;
    }

    static TokenType NFA_JAVA_334(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'c') {
            nextStates.set(491);
        }
        return null;
    }

    static TokenType NFA_JAVA_335(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'o') {
            nextStates.set(307);
        }
        return null;
    }

    static TokenType NFA_JAVA_336(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            nextStates.set(122);
        }
        return null;
    }

    static TokenType NFA_JAVA_337(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'n') {
            nextStates.set(468);
        }
        return null;
    }

    static TokenType NFA_JAVA_338(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'c') {
            nextStates.set(402);
        }
        return null;
    }

    static TokenType NFA_JAVA_339(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '<') {
            if (validTypes.contains(TokenType.LSHIFT)) return TokenType.LSHIFT;
        }
        return null;
    }

    static TokenType NFA_JAVA_340(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '/') {
            nextStates.set(116);
        }
        return null;
    }

    static TokenType NFA_JAVA_341(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'f') {
            nextStates.set(107);
        }
        return null;
    }

    static TokenType NFA_JAVA_342(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'n') {
            nextStates.set(480);
        }
        return null;
    }

    static TokenType NFA_JAVA_343(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'm') {
            nextStates.set(396);
        }
        return null;
    }

    static TokenType NFA_JAVA_344(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'l') {
            nextStates.set(452);
        }
        return null;
    }

    static TokenType NFA_JAVA_345(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'p') {
            nextStates.set(368);
        }
        return null;
    }

    static TokenType NFA_JAVA_346(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'i') {
            nextStates.set(390);
        }
        return null;
    }

    static TokenType NFA_JAVA_347(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'f') {
            if (validTypes.contains(TokenType.INSTANCEOF)) return TokenType.INSTANCEOF;
        }
        return null;
    }

    static TokenType NFA_JAVA_348(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'l') {
            nextStates.set(498);
        }
        return null;
    }

    static TokenType NFA_JAVA_349(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '|') {
            if (validTypes.contains(TokenType.SC_OR)) return TokenType.SC_OR;
        }
        return null;
    }

    static TokenType NFA_JAVA_350(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            if (validTypes.contains(TokenType.FALSE)) return TokenType.FALSE;
        }
        return null;
    }

    static TokenType NFA_JAVA_351(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'r') {
            nextStates.set(132);
        }
        return null;
    }

    static TokenType NFA_JAVA_352(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'h') {
            if (validTypes.contains(TokenType.SWITCH)) return TokenType.SWITCH;
        }
        return null;
    }

    static TokenType NFA_JAVA_353(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '.') {
            nextStates.set(252);
        }
        return null;
    }

    static TokenType NFA_JAVA_354(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'b') {
            nextStates.set(374);
        }
        return null;
    }

    static TokenType NFA_JAVA_355(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '"') {
            nextStates.set(243);
        }
        return null;
    }

    static TokenType NFA_JAVA_356(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            if (validTypes.contains(TokenType.CASE)) return TokenType.CASE;
        }
        return null;
    }

    static TokenType NFA_JAVA_357(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'y') {
            nextStates.set(515);
        }
        return null;
    }

    static TokenType NFA_JAVA_358(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'h') {
            nextStates.set(431);
        }
        return null;
    }

    static TokenType NFA_JAVA_359(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 's') {
            nextStates.set(162);
        }
        return null;
    }

    static TokenType NFA_JAVA_360(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'c') {
            nextStates.set(114);
        }
        return null;
    }

    static TokenType NFA_JAVA_361(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'o') {
            nextStates.set(268);
        }
        return null;
    }

    static TokenType NFA_JAVA_362(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 's') {
            if (validTypes.contains(TokenType.THROWS)) return TokenType.THROWS;
        }
        return null;
    }

    static TokenType NFA_JAVA_363(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '"') {
            nextStates.set(449);
        }
        return null;
    }

    static TokenType NFA_JAVA_364(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'd') {
            nextStates.set(391);
        }
        return null;
    }

    static TokenType NFA_JAVA_365(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            nextStates.set(218);
        }
        return null;
    }

    static TokenType NFA_JAVA_366(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '>') {
            nextStates.set(380);
        }
        return null;
    }

    static TokenType NFA_JAVA_367(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            nextStates.set(200);
        }
        return null;
    }

    static TokenType NFA_JAVA_368(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'o') {
            nextStates.set(375);
        }
        return null;
    }

    static TokenType NFA_JAVA_369(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '\n') {
            nextStates.set(30);
        }
        return null;
    }

    static TokenType NFA_JAVA_370(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'c') {
            nextStates.set(257);
        }
        return null;
    }

    static TokenType NFA_JAVA_371(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'l') {
            if (validTypes.contains(TokenType.FINAL)) return TokenType.FINAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_372(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'i') {
            nextStates.set(152);
        }
        return null;
    }

    static TokenType NFA_JAVA_373(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '>') {
            nextStates.set(249);
        }
        return null;
    }

    static TokenType NFA_JAVA_374(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'l') {
            nextStates.set(117);
        }
        return null;
    }

    static TokenType NFA_JAVA_375(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'r') {
            nextStates.set(443);
        }
        return null;
    }

    static TokenType NFA_JAVA_376(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'u') {
            nextStates.set(301);
        }
        return null;
    }

    static TokenType NFA_JAVA_377(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            if (validTypes.contains(TokenType.PACKAGE)) return TokenType.PACKAGE;
        }
        return null;
    }

    static TokenType NFA_JAVA_378(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            if (validTypes.contains(TokenType.BYTE)) return TokenType.BYTE;
        }
        return null;
    }

    static TokenType NFA_JAVA_379(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'a') {
            nextStates.set(186);
        }
        return null;
    }

    static TokenType NFA_JAVA_380(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '=') {
            if (validTypes.contains(TokenType.RUNSIGNEDSHIFTASSIGN)) return TokenType.RUNSIGNEDSHIFTASSIGN;
        }
        return null;
    }

    static TokenType NFA_JAVA_381(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'i') {
            nextStates.set(331);
        }
        return null;
    }

    static TokenType NFA_JAVA_382(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'u') {
            nextStates.set(424);
        }
        return null;
    }

    static TokenType NFA_JAVA_383(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'c') {
            nextStates.set(352);
        }
        return null;
    }

    static TokenType NFA_JAVA_384(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '_') {
            if (validTypes.contains(TokenType.UNDERSCORE)) return TokenType.UNDERSCORE;
        }
        return null;
    }

    static TokenType NFA_JAVA_385(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'n') {
            nextStates.set(425);
        }
        return null;
    }

    static TokenType NFA_JAVA_386(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'f') {
            if (validTypes.contains(TokenType.IF)) return TokenType.IF;
        }
        return null;
    }

    static TokenType NFA_JAVA_387(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '@') {
            if (validTypes.contains(TokenType.AT)) return TokenType.AT;
        }
        return null;
    }

    static TokenType NFA_JAVA_388(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'y') {
            if (validTypes.contains(TokenType.TRY)) return TokenType.TRY;
        }
        return null;
    }

    static TokenType NFA_JAVA_389(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            nextStates.set(300);
        }
        return null;
    }

    static TokenType NFA_JAVA_390(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'n') {
            nextStates.set(133);
        }
        return null;
    }

    static TokenType NFA_JAVA_391(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'o') {
            nextStates.set(261);
        }
        return null;
    }

    static TokenType NFA_JAVA_392(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='7') {
            nextStates.set(271);
        }
        return null;
    }

    static TokenType NFA_JAVA_393(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'a') {
            nextStates.set(115);
        }
        return null;
    }

    static TokenType NFA_JAVA_394(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'w') {
            if (validTypes.contains(TokenType.NEW)) return TokenType.NEW;
        }
        return null;
    }

    static TokenType NFA_JAVA_395(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== 'X')||(ch== 'x')) {
            nextStates.set(111);
        }
        return null;
    }

    static TokenType NFA_JAVA_396(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            nextStates.set(385);
        }
        return null;
    }

    static TokenType NFA_JAVA_397(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '"') {
            nextStates.set(355);
        }
        return null;
    }

    static TokenType NFA_JAVA_398(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'l') {
            if (validTypes.contains(TokenType.NULL)) return TokenType.NULL;
        }
        return null;
    }

    static TokenType NFA_JAVA_399(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'w') {
            nextStates.set(127);
        }
        return null;
    }

    static TokenType NFA_JAVA_400(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'd') {
            nextStates.set(151);
        }
        return null;
    }

    static TokenType NFA_JAVA_401(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '=') {
            if (validTypes.contains(TokenType.STARASSIGN)) return TokenType.STARASSIGN;
        }
        return null;
    }

    static TokenType NFA_JAVA_402(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'h') {
            if (validTypes.contains(TokenType.CATCH)) return TokenType.CATCH;
        }
        return null;
    }

    static TokenType NFA_JAVA_403(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'c') {
            nextStates.set(333);
        }
        return null;
    }

    static TokenType NFA_JAVA_404(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            nextStates.set(326);
        }
        return null;
    }

    static TokenType NFA_JAVA_405(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'i') {
            nextStates.set(248);
        }
        return null;
    }

    static TokenType NFA_JAVA_406(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'a') {
            nextStates.set(360);
        }
        return null;
    }

    static TokenType NFA_JAVA_407(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 's') {
            if (validTypes.contains(TokenType.THIS)) return TokenType.THIS;
        }
        return null;
    }

    static TokenType NFA_JAVA_408(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'p') {
            nextStates.set(163);
        }
        return null;
    }

    static TokenType NFA_JAVA_409(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            nextStates.set(175);
        }
        return null;
    }

    static TokenType NFA_JAVA_410(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'i') {
            nextStates.set(386);
        }
        return null;
    }

    static TokenType NFA_JAVA_411(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '0'||ch== '1') {
            nextStates.set(6);
            if (validTypes.contains(TokenType.INTEGER_LITERAL)) return TokenType.INTEGER_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_412(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '&') {
            nextStates.set(79);
        }
        return null;
    }

    static TokenType NFA_JAVA_413(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'i') {
            nextStates.set(303);
        }
        return null;
    }

    static TokenType NFA_JAVA_414(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== 'X')||(ch== 'x')) {
            nextStates.set(110);
        }
        return null;
    }

    static TokenType NFA_JAVA_415(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            nextStates.set(195);
        }
        return null;
    }

    static TokenType NFA_JAVA_416(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            if (validTypes.contains(TokenType.PRIVATE)) return TokenType.PRIVATE;
        }
        return null;
    }

    static TokenType NFA_JAVA_417(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'l') {
            nextStates.set(272);
        }
        return null;
    }

    static TokenType NFA_JAVA_418(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            nextStates.set(505);
        }
        return null;
    }

    static TokenType NFA_JAVA_419(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'n') {
            nextStates.set(96);
        }
        return null;
    }

    static TokenType NFA_JAVA_420(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '%') {
            nextStates.set(430);
        }
        return null;
    }

    static TokenType NFA_JAVA_421(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'a') {
            nextStates.set(457);
        }
        return null;
    }

    static TokenType NFA_JAVA_422(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            nextStates.set(259);
        }
        return null;
    }

    static TokenType NFA_JAVA_423(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 's') {
            nextStates.set(97);
        }
        return null;
    }

    static TokenType NFA_JAVA_424(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            if (validTypes.contains(TokenType.CONTINUE)) return TokenType.CONTINUE;
        }
        return null;
    }

    static TokenType NFA_JAVA_425(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            nextStates.set(510);
        }
        return null;
    }

    static TokenType NFA_JAVA_426(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'o') {
            nextStates.set(201);
        }
        return null;
    }

    static TokenType NFA_JAVA_427(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 's') {
            nextStates.set(170);
        }
        return null;
    }

    static TokenType NFA_JAVA_428(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'b') {
            nextStates.set(534);
        }
        return null;
    }

    static TokenType NFA_JAVA_429(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'p') {
            nextStates.set(545);
        }
        return null;
    }

    static TokenType NFA_JAVA_430(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '=') {
            if (validTypes.contains(TokenType.REMASSIGN)) return TokenType.REMASSIGN;
        }
        return null;
    }

    static TokenType NFA_JAVA_431(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'r') {
            nextStates.set(182);
        }
        return null;
    }

    static TokenType NFA_JAVA_432(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== ']') {
            if (validTypes.contains(TokenType.RBRACKET)) return TokenType.RBRACKET;
        }
        return null;
    }

    static TokenType NFA_JAVA_433(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 's') {
            nextStates.set(409);
        }
        return null;
    }

    static TokenType NFA_JAVA_434(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            nextStates.set(537);
        }
        return null;
    }

    static TokenType NFA_JAVA_435(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'r') {
            nextStates.set(180);
        }
        return null;
    }

    static TokenType NFA_JAVA_436(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            nextStates.set(86);
        }
        return null;
    }

    static TokenType NFA_JAVA_437(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '"') {
            if (validTypes.contains(TokenType.TEXT_BLOCK_LITERAL)) return TokenType.TEXT_BLOCK_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_438(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||(ch>='a'&&ch<='f'))) {
            nextStates.set(74);
        }
        return null;
    }

    static TokenType NFA_JAVA_439(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            if (validTypes.contains(TokenType._ASSERT)) return TokenType._ASSERT;
        }
        return null;
    }

    static TokenType NFA_JAVA_440(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '~') {
            if (validTypes.contains(TokenType.TILDE)) return TokenType.TILDE;
        }
        return null;
    }

    static TokenType NFA_JAVA_441(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '!') {
            nextStates.set(279);
        }
        return null;
    }

    static TokenType NFA_JAVA_442(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'f') {
            nextStates.set(417);
        }
        return null;
    }

    static TokenType NFA_JAVA_443(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            if (validTypes.contains(TokenType._IMPORT)) return TokenType._IMPORT;
        }
        return null;
    }

    static TokenType NFA_JAVA_444(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            nextStates.set(484);
        }
        return null;
    }

    static TokenType NFA_JAVA_445(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'a') {
            nextStates.set(285);
        }
        return null;
    }

    static TokenType NFA_JAVA_446(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'a') {
            nextStates.set(403);
        }
        return null;
    }

    static TokenType NFA_JAVA_447(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'o') {
            nextStates.set(297);
        }
        return null;
    }

    static TokenType NFA_JAVA_448(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            if (validTypes.contains(TokenType.VOLATILE)) return TokenType.VOLATILE;
        }
        return null;
    }

    static TokenType NFA_JAVA_449(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>=0x0&&ch<='!')||(ch>='#')) {
            nextStates.set(30);
        }
        return null;
    }

    static TokenType NFA_JAVA_450(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'n') {
            nextStates.set(126);
        }
        return null;
    }

    static TokenType NFA_JAVA_451(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            nextStates.set(416);
        }
        return null;
    }

    static TokenType NFA_JAVA_452(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            nextStates.set(236);
        }
        return null;
    }

    static TokenType NFA_JAVA_453(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'h') {
            nextStates.set(140);
        }
        return null;
    }

    static TokenType NFA_JAVA_454(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '|') {
            if (validTypes.contains(TokenType.BIT_OR)) return TokenType.BIT_OR;
        }
        return null;
    }

    static TokenType NFA_JAVA_455(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'f') {
            nextStates.set(299);
        }
        return null;
    }

    static TokenType NFA_JAVA_456(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '>') {
            nextStates.set(366);
        }
        return null;
    }

    static TokenType NFA_JAVA_457(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'r') {
            if (validTypes.contains(TokenType.CHAR)) return TokenType.CHAR;
        }
        return null;
    }

    static TokenType NFA_JAVA_458(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '-') {
            nextStates.set(359);
        }
        return null;
    }

    static TokenType NFA_JAVA_459(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'a') {
            nextStates.set(160);
        }
        return null;
    }

    static TokenType NFA_JAVA_460(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'h') {
            nextStates.set(421);
        }
        return null;
    }

    static TokenType NFA_JAVA_461(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            nextStates.set(512);
        }
        return null;
    }

    static TokenType NFA_JAVA_462(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '/') {
            if (validTypes.contains(TokenType.SLASH)) return TokenType.SLASH;
        }
        return null;
    }

    static TokenType NFA_JAVA_463(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'l') {
            nextStates.set(398);
        }
        return null;
    }

    static TokenType NFA_JAVA_464(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            nextStates.set(370);
        }
        return null;
    }

    static TokenType NFA_JAVA_465(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'u') {
            nextStates.set(463);
        }
        return null;
    }

    static TokenType NFA_JAVA_466(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'g') {
            nextStates.set(190);
        }
        return null;
    }

    static TokenType NFA_JAVA_467(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '+') {
            nextStates.set(112);
        }
        return null;
    }

    static TokenType NFA_JAVA_468(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 's') {
            nextStates.set(296);
        }
        return null;
    }

    static TokenType NFA_JAVA_469(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '-') {
            nextStates.set(154);
        }
        return null;
    }

    static TokenType NFA_JAVA_470(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'd') {
            nextStates.set(233);
        }
        return null;
    }

    static TokenType NFA_JAVA_471(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'v') {
            nextStates.set(532);
        }
        return null;
    }

    static TokenType NFA_JAVA_472(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '/') {
            nextStates.set(80);
        }
        return null;
    }

    static TokenType NFA_JAVA_473(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            nextStates.set(94);
        }
        return null;
    }

    static TokenType NFA_JAVA_474(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 's') {
            nextStates.set(436);
        }
        return null;
    }

    static TokenType NFA_JAVA_475(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'n') {
            nextStates.set(253);
        }
        return null;
    }

    static TokenType NFA_JAVA_476(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '|') {
            nextStates.set(349);
        }
        return null;
    }

    static TokenType NFA_JAVA_477(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='7') {
            nextStates.set(547);
        }
        return null;
    }

    static TokenType NFA_JAVA_478(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '<') {
            nextStates.set(141);
        }
        return null;
    }

    static TokenType NFA_JAVA_479(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '<') {
            nextStates.set(478);
        }
        return null;
    }

    static TokenType NFA_JAVA_480(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'o') {
            nextStates.set(329);
        }
        return null;
    }

    static TokenType NFA_JAVA_481(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'p') {
            nextStates.set(136);
        }
        return null;
    }

    static TokenType NFA_JAVA_482(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'p') {
            nextStates.set(495);
        }
        return null;
    }

    static TokenType NFA_JAVA_483(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'm') {
            if (validTypes.contains(TokenType.ENUM)) return TokenType.ENUM;
        }
        return null;
    }

    static TokenType NFA_JAVA_484(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            nextStates.set(179);
        }
        return null;
    }

    static TokenType NFA_JAVA_485(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'b') {
            nextStates.set(348);
        }
        return null;
    }

    static TokenType NFA_JAVA_486(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '{') {
            if (validTypes.contains(TokenType.LBRACE)) return TokenType.LBRACE;
        }
        return null;
    }

    static TokenType NFA_JAVA_487(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='7') {
            nextStates.set(23);
        }
        return null;
    }

    static TokenType NFA_JAVA_488(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            if (validTypes.contains(TokenType.TRANSIENT)) return TokenType.TRANSIENT;
        }
        return null;
    }

    static TokenType NFA_JAVA_489(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '>') {
            nextStates.set(178);
        }
        return null;
    }

    static TokenType NFA_JAVA_490(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'v') {
            nextStates.set(124);
        }
        return null;
    }

    static TokenType NFA_JAVA_491(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            if (validTypes.contains(TokenType.ABSTRACT)) return TokenType.ABSTRACT;
        }
        return null;
    }

    static TokenType NFA_JAVA_492(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'c') {
            nextStates.set(335);
        }
        return null;
    }

    static TokenType NFA_JAVA_493(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'i') {
            nextStates.set(284);
        }
        return null;
    }

    static TokenType NFA_JAVA_494(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'i') {
            nextStates.set(407);
        }
        return null;
    }

    static TokenType NFA_JAVA_495(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'u') {
            nextStates.set(485);
        }
        return null;
    }

    static TokenType NFA_JAVA_496(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'r') {
            nextStates.set(137);
        }
        return null;
    }

    static TokenType NFA_JAVA_497(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            nextStates.set(123);
        }
        return null;
    }

    static TokenType NFA_JAVA_498(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'i') {
            nextStates.set(81);
        }
        return null;
    }

    static TokenType NFA_JAVA_499(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '=') {
            if (validTypes.contains(TokenType.EQ)) return TokenType.EQ;
        }
        return null;
    }

    static TokenType NFA_JAVA_500(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '&') {
            if (validTypes.contains(TokenType.BIT_AND)) return TokenType.BIT_AND;
        }
        return null;
    }

    static TokenType NFA_JAVA_501(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'o') {
            if (validTypes.contains(TokenType.GOTO)) return TokenType.GOTO;
        }
        return null;
    }

    static TokenType NFA_JAVA_502(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 's') {
            if (validTypes.contains(TokenType.CLASS)) return TokenType.CLASS;
        }
        return null;
    }

    static TokenType NFA_JAVA_503(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 's') {
            nextStates.set(497);
        }
        return null;
    }

    static TokenType NFA_JAVA_504(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '>') {
            if (validTypes.contains(TokenType.LAMBDA)) return TokenType.LAMBDA;
        }
        return null;
    }

    static TokenType NFA_JAVA_505(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 's') {
            if (validTypes.contains(TokenType.PERMITS)) return TokenType.PERMITS;
        }
        return null;
    }

    static TokenType NFA_JAVA_506(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'd') {
            nextStates.set(150);
        }
        return null;
    }

    static TokenType NFA_JAVA_507(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== ';') {
            if (validTypes.contains(TokenType.SEMICOLON)) return TokenType.SEMICOLON;
        }
        return null;
    }

    static TokenType NFA_JAVA_508(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'a') {
            nextStates.set(230);
        }
        return null;
    }

    static TokenType NFA_JAVA_509(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '>') {
            if (validTypes.contains(TokenType.RUNSIGNEDSHIFT)) return TokenType.RUNSIGNEDSHIFT;
        }
        return null;
    }

    static TokenType NFA_JAVA_510(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 's') {
            if (validTypes.contains(TokenType.IMPLEMENTS)) return TokenType.IMPLEMENTS;
        }
        return null;
    }

    static TokenType NFA_JAVA_511(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            nextStates.set(220);
        }
        return null;
    }

    static TokenType NFA_JAVA_512(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'h') {
            nextStates.set(494);
        }
        return null;
    }

    static TokenType NFA_JAVA_513(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '%') {
            if (validTypes.contains(TokenType.REM)) return TokenType.REM;
        }
        return null;
    }

    static TokenType NFA_JAVA_514(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '=') {
            if (validTypes.contains(TokenType.ASSIGN)) return TokenType.ASSIGN;
        }
        return null;
    }

    static TokenType NFA_JAVA_515(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'n') {
            nextStates.set(144);
        }
        return null;
    }

    static TokenType NFA_JAVA_516(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'l') {
            nextStates.set(311);
        }
        return null;
    }

    static TokenType NFA_JAVA_517(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'o') {
            nextStates.set(181);
        }
        return null;
    }

    static TokenType NFA_JAVA_518(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'c') {
            nextStates.set(415);
        }
        return null;
    }

    static TokenType NFA_JAVA_519(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='7') {
            nextStates.set(8);
            if (validTypes.contains(TokenType.INTEGER_LITERAL)) return TokenType.INTEGER_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_520(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            nextStates.set(378);
        }
        return null;
    }

    static TokenType NFA_JAVA_521(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '!') {
            if (validTypes.contains(TokenType.BANG)) return TokenType.BANG;
        }
        return null;
    }

    static TokenType NFA_JAVA_522(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'a') {
            nextStates.set(242);
        }
        return null;
    }

    static TokenType NFA_JAVA_523(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== ':') {
            if (validTypes.contains(TokenType.COLON)) return TokenType.COLON;
        }
        return null;
    }

    static TokenType NFA_JAVA_524(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'i') {
            nextStates.set(193);
        }
        return null;
    }

    static TokenType NFA_JAVA_525(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '^') {
            if (validTypes.contains(TokenType.XOR)) return TokenType.XOR;
        }
        return null;
    }

    static TokenType NFA_JAVA_526(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== ':') {
            nextStates.set(302);
        }
        return null;
    }

    static TokenType NFA_JAVA_527(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'r') {
            if (validTypes.contains(TokenType.SUPER)) return TokenType.SUPER;
        }
        return null;
    }

    static TokenType NFA_JAVA_528(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            nextStates.set(204);
        }
        return null;
    }

    static TokenType NFA_JAVA_529(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '}') {
            if (validTypes.contains(TokenType.RBRACE)) return TokenType.RBRACE;
        }
        return null;
    }

    static TokenType NFA_JAVA_530(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '?') {
            if (validTypes.contains(TokenType.HOOK)) return TokenType.HOOK;
        }
        return null;
    }

    static TokenType NFA_JAVA_531(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'b') {
            nextStates.set(120);
        }
        return null;
    }

    static TokenType NFA_JAVA_532(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'a') {
            nextStates.set(91);
        }
        return null;
    }

    static TokenType NFA_JAVA_533(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'r') {
            nextStates.set(224);
        }
        return null;
    }

    static TokenType NFA_JAVA_534(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'o') {
            nextStates.set(157);
        }
        return null;
    }

    static TokenType NFA_JAVA_535(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== 'X')||(ch== 'x')) {
            nextStates.set(438);
        }
        return null;
    }

    static TokenType NFA_JAVA_536(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'y') {
            if (validTypes.contains(TokenType.FINALLY)) return TokenType.FINALLY;
        }
        return null;
    }

    static TokenType NFA_JAVA_537(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'r') {
            nextStates.set(522);
        }
        return null;
    }

    static TokenType NFA_JAVA_538(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '+') {
            nextStates.set(213);
        }
        return null;
    }

    static TokenType NFA_JAVA_539(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '|') {
            nextStates.set(543);
        }
        return null;
    }

    static TokenType NFA_JAVA_540(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            nextStates.set(501);
        }
        return null;
    }

    static TokenType NFA_JAVA_541(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 't') {
            nextStates.set(381);
        }
        return null;
    }

    static TokenType NFA_JAVA_542(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'a') {
            nextStates.set(450);
        }
        return null;
    }

    static TokenType NFA_JAVA_543(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '=') {
            if (validTypes.contains(TokenType.ORASSIGN)) return TokenType.ORASSIGN;
        }
        return null;
    }

    static TokenType NFA_JAVA_544(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            nextStates.set(128);
        }
        return null;
    }

    static TokenType NFA_JAVA_545(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'e') {
            nextStates.set(527);
        }
        return null;
    }

    static TokenType NFA_JAVA_546(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== 'l') {
            nextStates.set(536);
        }
        return null;
    }

    static TokenType NFA_JAVA_547(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='7') {
            nextStates.set(571);
        }
        return null;
    }

    static TokenType NFA_JAVA_548(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(24);
        }
        return null;
    }

    static TokenType NFA_JAVA_549(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '0') {
            nextStates.set(130);
        }
        return null;
    }

    static TokenType NFA_JAVA_550(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='9') {
            nextStates.set(21);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) return TokenType.FLOATING_POINT_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_551(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='7') {
            nextStates.set(660);
        }
        return null;
    }

    static TokenType NFA_JAVA_552(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== 'E')||(ch== 'e')) {
            nextStates.set(71);
        }
        return null;
    }

    static TokenType NFA_JAVA_553(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '0'||ch== '1') {
            if (validTypes.contains(TokenType.INTEGER_LITERAL)) return TokenType.INTEGER_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_554(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||((ch== '_')||(ch>='a'&&ch<='f')))) {
            nextStates.set(27);
        }
        return null;
    }

    static TokenType NFA_JAVA_555(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '\r') {
            nextStates.set(295);
        }
        return null;
    }

    static TokenType NFA_JAVA_556(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '"') {
            nextStates.set(363);
        }
        return null;
    }

    static private int[] NFA_MOVES_JAVA_557= NFA_MOVES_JAVA_557_init();
    static private int[] NFA_MOVES_JAVA_557_init() {
        int[] result= new int[16];
        result[0]= '"';
        result[1]= '"';
        result[2]= '\'';
        result[3]= '\'';
        result[4]= '\\';
        result[5]= '\\';
        result[6]= 'b';
        result[7]= 'b';
        result[8]= 'f';
        result[9]= 'f';
        result[10]= 'n';
        result[11]= 'n';
        result[12]= 'r';
        result[13]= 'r';
        result[14]= 't';
        result[15]= 't';
        return result;
    }

    static TokenType NFA_JAVA_557(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (checkIntervals(NFA_MOVES_JAVA_557, ch)) {
            nextStates.set(571);
        }
        return null;
    }

    static TokenType NFA_JAVA_558(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||((ch== '_')||(ch>='a'&&ch<='f')))) {
            nextStates.set(46);
        }
        return null;
    }

    static TokenType NFA_JAVA_559(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '\n') {
            nextStates.set(32);
            if (validTypes.contains(TokenType.WHITESPACE)) return TokenType.WHITESPACE;
        }
        return null;
    }

    static TokenType NFA_JAVA_560(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== '"')||((ch== '\'')||((ch== '\\')||((ch== 'b')||((ch== 'f')||((ch== 'n')||(ch>='r'&&ch<='t'))))))) {
            nextStates.set(30);
        }
        return null;
    }

    static TokenType NFA_JAVA_561(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '0') {
            nextStates.set(519);
        }
        return null;
    }

    static TokenType NFA_JAVA_562(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(5);
        }
        return null;
    }

    static TokenType NFA_JAVA_563(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='9') {
            nextStates.set(40);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) return TokenType.FLOATING_POINT_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_564(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||(ch>='a'&&ch<='f'))) {
            nextStates.set(69);
        }
        return null;
    }

    static TokenType NFA_JAVA_565(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '0'||ch== '1') {
            nextStates.set(660);
        }
        return null;
    }

    static TokenType NFA_JAVA_566(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '0') {
            nextStates.set(270);
        }
        return null;
    }

    static TokenType NFA_JAVA_567(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||(ch>='a'&&ch<='f'))) {
            nextStates.set(588);
        }
        return null;
    }

    static TokenType NFA_JAVA_568(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='7') {
            if (validTypes.contains(TokenType.INTEGER_LITERAL)) return TokenType.INTEGER_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_569(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='3') {
            nextStates.set(135);
        }
        return null;
    }

    static TokenType NFA_JAVA_570(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='9') {
            nextStates.set(660);
        }
        return null;
    }

    static TokenType NFA_JAVA_571(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '\'') {
            if (validTypes.contains(TokenType.CHARACTER_LITERAL)) return TokenType.CHARACTER_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_572(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== 'E')||(ch== 'e')) {
            nextStates.set(43);
        }
        return null;
    }

    static TokenType NFA_JAVA_573(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== 'E')||(ch== 'e')) {
            nextStates.set(47);
        }
        return null;
    }

    static TokenType NFA_JAVA_574(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(56);
        }
        return null;
    }

    static TokenType NFA_JAVA_575(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '0') {
            nextStates.set(316);
        }
        return null;
    }

    static TokenType NFA_JAVA_576(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(53);
        }
        return null;
    }

    static TokenType NFA_JAVA_577(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(63);
        }
        return null;
    }

    static TokenType NFA_JAVA_578(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '\t') {
            nextStates.set(32);
            if (validTypes.contains(TokenType.WHITESPACE)) return TokenType.WHITESPACE;
        }
        return null;
    }

    static TokenType NFA_JAVA_579(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '\r') {
            nextStates.set(32);
            if (validTypes.contains(TokenType.WHITESPACE)) return TokenType.WHITESPACE;
        }
        return null;
    }

    static TokenType NFA_JAVA_580(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||((ch== '_')||(ch>='a'&&ch<='f')))) {
            nextStates.set(22);
        }
        return null;
    }

    static TokenType NFA_JAVA_581(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='7')||(ch== '_')) {
            nextStates.set(8);
        }
        return null;
    }

    static TokenType NFA_JAVA_582(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||((ch== '_')||(ch>='a'&&ch<='f')))) {
            nextStates.set(10);
        }
        return null;
    }

    static TokenType NFA_JAVA_583(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='9') {
            nextStates.set(16);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) return TokenType.FLOATING_POINT_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_584(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='9') {
            nextStates.set(1);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) return TokenType.FLOATING_POINT_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_585(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(49);
        }
        return null;
    }

    static TokenType NFA_JAVA_586(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='9') {
            nextStates.set(73);
        }
        return null;
    }

    static TokenType NFA_JAVA_587(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>=0x0&&ch<='!')||((ch>='#'&&ch<='[')||(ch>=']'))) {
            nextStates.set(30);
        }
        return null;
    }

    static TokenType NFA_JAVA_588(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== 'P')||(ch== 'p')) {
            nextStates.set(14);
        }
        return null;
    }

    static TokenType NFA_JAVA_589(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '\f') {
            nextStates.set(32);
            if (validTypes.contains(TokenType.WHITESPACE)) return TokenType.WHITESPACE;
        }
        return null;
    }

    static TokenType NFA_JAVA_590(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(15);
        }
        return null;
    }

    static TokenType NFA_JAVA_591(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(62);
        }
        return null;
    }

    static TokenType NFA_JAVA_592(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||((ch== '_')||(ch>='a'&&ch<='f')))) {
            nextStates.set(7);
        }
        return null;
    }

    static TokenType NFA_JAVA_593(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== '\t')||((ch== '\f')||(ch== ' '))) {
            nextStates.set(17);
        }
        return null;
    }

    static TokenType NFA_JAVA_594(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='9') {
            nextStates.set(44);
        }
        return null;
    }

    static TokenType NFA_JAVA_595(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== 'D')||((ch== 'F')||((ch== 'd')||(ch== 'f')))) {
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) return TokenType.FLOATING_POINT_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_596(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '\\') {
            nextStates.set(25);
        }
        return null;
    }

    static TokenType NFA_JAVA_597(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='9') {
            nextStates.set(38);
        }
        return null;
    }

    static TokenType NFA_JAVA_598(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '.') {
            nextStates.set(156);
        }
        return null;
    }

    static TokenType NFA_JAVA_599(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(45);
        }
        return null;
    }

    static TokenType NFA_JAVA_600(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='7') {
            nextStates.set(571);
        }
        return null;
    }

    static TokenType NFA_JAVA_601(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== 'E')||(ch== 'e')) {
            nextStates.set(9);
        }
        return null;
    }

    static TokenType NFA_JAVA_602(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '\\') {
            nextStates.set(60);
        }
        return null;
    }

    static TokenType NFA_JAVA_603(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='9') {
            nextStates.set(2);
        }
        return null;
    }

    static TokenType NFA_JAVA_604(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>=0x0&&ch<='\t')||((ch== 0xb||ch== '\f')||((ch>=0xe&&ch<='!')||((ch>='#'&&ch<='[')||(ch>=']'))))) {
            nextStates.set(23);
        }
        return null;
    }

    static TokenType NFA_JAVA_605(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '\n') {
            nextStates.set(30);
        }
        return null;
    }

    static TokenType NFA_JAVA_606(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(26);
        }
        return null;
    }

    static TokenType NFA_JAVA_607(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>=0x0&&ch<='\t')||((ch== 0xb||ch== '\f')||((ch>=0xe&&ch<='&')||((ch>='('&&ch<='[')||(ch>=']'))))) {
            nextStates.set(571);
        }
        return null;
    }

    static TokenType NFA_JAVA_608(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== 'D')||((ch== 'F')||((ch== 'd')||(ch== 'f')))) {
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) return TokenType.FLOATING_POINT_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_609(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '"') {
            nextStates.set(109);
        }
        return null;
    }

    static TokenType NFA_JAVA_610(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(20);
        }
        return null;
    }

    static TokenType NFA_JAVA_611(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '\\') {
            nextStates.set(76);
        }
        return null;
    }

    static TokenType NFA_JAVA_612(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== '+')||(ch== '-')) {
            nextStates.set(583);
        }
        return null;
    }

    static TokenType NFA_JAVA_613(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '\r') {
            nextStates.set(369);
        }
        return null;
    }

    static TokenType NFA_JAVA_614(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== ' ') {
            nextStates.set(32);
            if (validTypes.contains(TokenType.WHITESPACE)) return TokenType.WHITESPACE;
        }
        return null;
    }

    static TokenType NFA_JAVA_615(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '0') {
            nextStates.set(414);
        }
        return null;
    }

    static TokenType NFA_JAVA_616(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '\r') {
            nextStates.set(30);
        }
        return null;
    }

    static TokenType NFA_JAVA_617(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||(ch>='a'&&ch<='f'))) {
            if (validTypes.contains(TokenType.INTEGER_LITERAL)) return TokenType.INTEGER_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_618(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '\r') {
            nextStates.set(30);
        }
        return null;
    }

    static TokenType NFA_JAVA_619(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||(ch>='a'&&ch<='f'))) {
            nextStates.set(639);
        }
        return null;
    }

    static TokenType NFA_JAVA_620(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='7') {
            nextStates.set(19);
        }
        return null;
    }

    static TokenType NFA_JAVA_621(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '\\') {
            nextStates.set(34);
        }
        return null;
    }

    static TokenType NFA_JAVA_622(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(35);
        }
        return null;
    }

    static TokenType NFA_JAVA_623(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='9') {
            nextStates.set(649);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) return TokenType.FLOATING_POINT_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_624(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='3') {
            nextStates.set(477);
        }
        return null;
    }

    static TokenType NFA_JAVA_625(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '0') {
            nextStates.set(298);
        }
        return null;
    }

    static TokenType NFA_JAVA_626(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '"') {
            if (validTypes.contains(TokenType.STRING_LITERAL)) return TokenType.STRING_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_627(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== '+')||(ch== '-')) {
            nextStates.set(651);
        }
        return null;
    }

    static TokenType NFA_JAVA_628(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== '0'||ch== '1')||(ch== '_')) {
            nextStates.set(64);
        }
        return null;
    }

    static TokenType NFA_JAVA_629(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '\n') {
            nextStates.set(30);
        }
        return null;
    }

    static TokenType NFA_JAVA_630(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='9')||(ch== '_')) {
            nextStates.set(65);
        }
        return null;
    }

    static TokenType NFA_JAVA_631(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== 'D')||((ch== 'F')||((ch== 'd')||(ch== 'f')))) {
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) return TokenType.FLOATING_POINT_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_632(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='9') {
            nextStates.set(573);
        }
        return null;
    }

    static TokenType NFA_JAVA_633(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='7') {
            nextStates.set(70);
        }
        return null;
    }

    static TokenType NFA_JAVA_634(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='9') {
            if (validTypes.contains(TokenType.INTEGER_LITERAL)) return TokenType.INTEGER_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_635(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='3') {
            nextStates.set(392);
        }
        return null;
    }

    static TokenType NFA_JAVA_636(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='9') {
            nextStates.set(36);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) return TokenType.FLOATING_POINT_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_637(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||(ch>='a'&&ch<='f'))) {
            nextStates.set(660);
        }
        return null;
    }

    static TokenType NFA_JAVA_638(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '.') {
            nextStates.set(12);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) return TokenType.FLOATING_POINT_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_639(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '.') {
            nextStates.set(290);
        }
        return null;
    }

    static TokenType NFA_JAVA_640(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== '+')||(ch== '-')) {
            nextStates.set(652);
        }
        return null;
    }

    static TokenType NFA_JAVA_641(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '.') {
            nextStates.set(642);
        }
        return null;
    }

    static TokenType NFA_JAVA_642(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== 'P')||(ch== 'p')) {
            nextStates.set(37);
        }
        return null;
    }

    static TokenType NFA_JAVA_643(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='9') {
            nextStates.set(65);
            if (validTypes.contains(TokenType.INTEGER_LITERAL)) return TokenType.INTEGER_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_644(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='7') {
            nextStates.set(57);
        }
        return null;
    }

    static TokenType NFA_JAVA_645(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||(ch>='a'&&ch<='f'))) {
            nextStates.set(61);
        }
        return null;
    }

    static TokenType NFA_JAVA_646(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== '"')||((ch== '\'')||((ch== '\\')||((ch== 'b')||((ch== 'f')||((ch== 'n')||(ch>='r'&&ch<='t'))))))) {
            nextStates.set(23);
        }
        return null;
    }

    static TokenType NFA_JAVA_647(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== '+')||(ch== '-')) {
            nextStates.set(655);
        }
        return null;
    }

    static TokenType NFA_JAVA_648(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== 'D')||((ch== 'F')||((ch== 'd')||(ch== 'f')))) {
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) return TokenType.FLOATING_POINT_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_649(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== 'D')||((ch== 'F')||((ch== 'd')||(ch== 'f')))) {
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) return TokenType.FLOATING_POINT_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_650(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='9') {
            nextStates.set(18);
        }
        return null;
    }

    static TokenType NFA_JAVA_651(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='9') {
            nextStates.set(3);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) return TokenType.FLOATING_POINT_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_652(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='9') {
            nextStates.set(28);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) return TokenType.FLOATING_POINT_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_653(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '"') {
            nextStates.set(293);
        }
        return null;
    }

    static TokenType NFA_JAVA_654(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '0') {
            nextStates.set(395);
        }
        return null;
    }

    static TokenType NFA_JAVA_655(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='9') {
            nextStates.set(42);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) return TokenType.FLOATING_POINT_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_656(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch>='0'&&ch<='7')||(ch== '_')) {
            nextStates.set(59);
        }
        return null;
    }

    static TokenType NFA_JAVA_657(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='7') {
            nextStates.set(23);
        }
        return null;
    }

    static TokenType NFA_JAVA_658(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='7') {
            nextStates.set(30);
        }
        return null;
    }

    static TokenType NFA_JAVA_659(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='9') {
            nextStates.set(58);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) return TokenType.FLOATING_POINT_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_660(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== 'L')||(ch== 'l')) {
            if (validTypes.contains(TokenType.LONG_LITERAL)) return TokenType.LONG_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_661(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== '0'||ch== '1')||(ch== '_')) {
            nextStates.set(6);
        }
        return null;
    }

    static TokenType NFA_JAVA_662(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== '+')||(ch== '-')) {
            nextStates.set(667);
        }
        return null;
    }

    static TokenType NFA_JAVA_663(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='9') {
            nextStates.set(595);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) return TokenType.FLOATING_POINT_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_664(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== 'D')||((ch== 'F')||((ch== 'd')||(ch== 'f')))) {
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) return TokenType.FLOATING_POINT_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_665(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '0') {
            nextStates.set(535);
        }
        return null;
    }

    static TokenType NFA_JAVA_666(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='9') {
            nextStates.set(72);
        }
        return null;
    }

    static TokenType NFA_JAVA_667(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='9') {
            nextStates.set(51);
        }
        return null;
    }

    static TokenType NFA_JAVA_668(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if ((ch== '+')||(ch== '-')) {
            nextStates.set(636);
        }
        return null;
    }

    static TokenType NFA_JAVA_669(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='9') {
            nextStates.set(41);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) return TokenType.FLOATING_POINT_LITERAL;
        }
        return null;
    }

    static TokenType NFA_JAVA_670(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='9') {
            nextStates.set(638);
        }
        return null;
    }

    static TokenType NFA_JAVA_671(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>='0'&&ch<='9') {
            nextStates.set(75);
            if (validTypes.contains(TokenType.FLOATING_POINT_LITERAL)) return TokenType.FLOATING_POINT_LITERAL;
        }
        return null;
    }

    static private void NFA_FUNCTIONS_JAVA_init() {
        NfaFunction[] functions= new NfaFunction[672];
        functions[0]= ZeptonNfaData::NFA_COMPOSITE_JAVA_0;
        functions[1]= ZeptonNfaData::NFA_COMPOSITE_JAVA_1;
        functions[2]= ZeptonNfaData::NFA_COMPOSITE_JAVA_2;
        functions[3]= ZeptonNfaData::NFA_COMPOSITE_JAVA_3;
        functions[4]= ZeptonNfaData::NFA_COMPOSITE_JAVA_4;
        functions[5]= ZeptonNfaData::NFA_COMPOSITE_JAVA_5;
        functions[6]= ZeptonNfaData::NFA_COMPOSITE_JAVA_6;
        functions[7]= ZeptonNfaData::NFA_COMPOSITE_JAVA_7;
        functions[8]= ZeptonNfaData::NFA_COMPOSITE_JAVA_8;
        functions[9]= ZeptonNfaData::NFA_COMPOSITE_JAVA_9;
        functions[10]= ZeptonNfaData::NFA_COMPOSITE_JAVA_10;
        functions[11]= ZeptonNfaData::NFA_COMPOSITE_JAVA_11;
        functions[12]= ZeptonNfaData::NFA_COMPOSITE_JAVA_12;
        functions[13]= ZeptonNfaData::NFA_COMPOSITE_JAVA_13;
        functions[14]= ZeptonNfaData::NFA_COMPOSITE_JAVA_14;
        functions[15]= ZeptonNfaData::NFA_COMPOSITE_JAVA_15;
        functions[16]= ZeptonNfaData::NFA_COMPOSITE_JAVA_16;
        functions[17]= ZeptonNfaData::NFA_COMPOSITE_JAVA_17;
        functions[18]= ZeptonNfaData::NFA_COMPOSITE_JAVA_18;
        functions[19]= ZeptonNfaData::NFA_COMPOSITE_JAVA_19;
        functions[20]= ZeptonNfaData::NFA_COMPOSITE_JAVA_20;
        functions[21]= ZeptonNfaData::NFA_COMPOSITE_JAVA_21;
        functions[22]= ZeptonNfaData::NFA_COMPOSITE_JAVA_22;
        functions[23]= ZeptonNfaData::NFA_COMPOSITE_JAVA_23;
        functions[24]= ZeptonNfaData::NFA_COMPOSITE_JAVA_24;
        functions[25]= ZeptonNfaData::NFA_COMPOSITE_JAVA_25;
        functions[26]= ZeptonNfaData::NFA_COMPOSITE_JAVA_26;
        functions[27]= ZeptonNfaData::NFA_COMPOSITE_JAVA_27;
        functions[28]= ZeptonNfaData::NFA_COMPOSITE_JAVA_28;
        functions[29]= ZeptonNfaData::NFA_COMPOSITE_JAVA_29;
        functions[30]= ZeptonNfaData::NFA_COMPOSITE_JAVA_30;
        functions[31]= ZeptonNfaData::NFA_COMPOSITE_JAVA_31;
        functions[32]= ZeptonNfaData::NFA_COMPOSITE_JAVA_32;
        functions[33]= ZeptonNfaData::NFA_COMPOSITE_JAVA_33;
        functions[34]= ZeptonNfaData::NFA_COMPOSITE_JAVA_34;
        functions[35]= ZeptonNfaData::NFA_COMPOSITE_JAVA_35;
        functions[36]= ZeptonNfaData::NFA_COMPOSITE_JAVA_36;
        functions[37]= ZeptonNfaData::NFA_COMPOSITE_JAVA_37;
        functions[38]= ZeptonNfaData::NFA_COMPOSITE_JAVA_38;
        functions[39]= ZeptonNfaData::NFA_COMPOSITE_JAVA_39;
        functions[40]= ZeptonNfaData::NFA_COMPOSITE_JAVA_40;
        functions[41]= ZeptonNfaData::NFA_COMPOSITE_JAVA_41;
        functions[42]= ZeptonNfaData::NFA_COMPOSITE_JAVA_42;
        functions[43]= ZeptonNfaData::NFA_COMPOSITE_JAVA_43;
        functions[44]= ZeptonNfaData::NFA_COMPOSITE_JAVA_44;
        functions[45]= ZeptonNfaData::NFA_COMPOSITE_JAVA_45;
        functions[46]= ZeptonNfaData::NFA_COMPOSITE_JAVA_46;
        functions[47]= ZeptonNfaData::NFA_COMPOSITE_JAVA_47;
        functions[48]= ZeptonNfaData::NFA_COMPOSITE_JAVA_48;
        functions[49]= ZeptonNfaData::NFA_COMPOSITE_JAVA_49;
        functions[50]= ZeptonNfaData::NFA_COMPOSITE_JAVA_50;
        functions[51]= ZeptonNfaData::NFA_COMPOSITE_JAVA_51;
        functions[52]= ZeptonNfaData::NFA_COMPOSITE_JAVA_52;
        functions[53]= ZeptonNfaData::NFA_COMPOSITE_JAVA_53;
        functions[54]= ZeptonNfaData::NFA_COMPOSITE_JAVA_54;
        functions[55]= ZeptonNfaData::NFA_COMPOSITE_JAVA_55;
        functions[56]= ZeptonNfaData::NFA_COMPOSITE_JAVA_56;
        functions[57]= ZeptonNfaData::NFA_COMPOSITE_JAVA_57;
        functions[58]= ZeptonNfaData::NFA_COMPOSITE_JAVA_58;
        functions[59]= ZeptonNfaData::NFA_COMPOSITE_JAVA_59;
        functions[60]= ZeptonNfaData::NFA_COMPOSITE_JAVA_60;
        functions[61]= ZeptonNfaData::NFA_COMPOSITE_JAVA_61;
        functions[62]= ZeptonNfaData::NFA_COMPOSITE_JAVA_62;
        functions[63]= ZeptonNfaData::NFA_COMPOSITE_JAVA_63;
        functions[64]= ZeptonNfaData::NFA_COMPOSITE_JAVA_64;
        functions[65]= ZeptonNfaData::NFA_COMPOSITE_JAVA_65;
        functions[66]= ZeptonNfaData::NFA_COMPOSITE_JAVA_66;
        functions[67]= ZeptonNfaData::NFA_COMPOSITE_JAVA_67;
        functions[68]= ZeptonNfaData::NFA_COMPOSITE_JAVA_68;
        functions[69]= ZeptonNfaData::NFA_COMPOSITE_JAVA_69;
        functions[70]= ZeptonNfaData::NFA_COMPOSITE_JAVA_70;
        functions[71]= ZeptonNfaData::NFA_COMPOSITE_JAVA_71;
        functions[72]= ZeptonNfaData::NFA_COMPOSITE_JAVA_72;
        functions[73]= ZeptonNfaData::NFA_COMPOSITE_JAVA_73;
        functions[74]= ZeptonNfaData::NFA_COMPOSITE_JAVA_74;
        functions[75]= ZeptonNfaData::NFA_COMPOSITE_JAVA_75;
        functions[76]= ZeptonNfaData::NFA_COMPOSITE_JAVA_76;
        functions[77]= ZeptonNfaData::NFA_JAVA_77;
        functions[78]= ZeptonNfaData::NFA_JAVA_78;
        functions[79]= ZeptonNfaData::NFA_JAVA_79;
        functions[80]= ZeptonNfaData::NFA_JAVA_80;
        functions[81]= ZeptonNfaData::NFA_JAVA_81;
        functions[82]= ZeptonNfaData::NFA_JAVA_82;
        functions[83]= ZeptonNfaData::NFA_JAVA_83;
        functions[84]= ZeptonNfaData::NFA_JAVA_84;
        functions[85]= ZeptonNfaData::NFA_JAVA_85;
        functions[86]= ZeptonNfaData::NFA_JAVA_86;
        functions[87]= ZeptonNfaData::NFA_JAVA_87;
        functions[88]= ZeptonNfaData::NFA_JAVA_88;
        functions[89]= ZeptonNfaData::NFA_JAVA_89;
        functions[90]= ZeptonNfaData::NFA_JAVA_90;
        functions[91]= ZeptonNfaData::NFA_JAVA_91;
        functions[92]= ZeptonNfaData::NFA_JAVA_92;
        functions[93]= ZeptonNfaData::NFA_JAVA_93;
        functions[94]= ZeptonNfaData::NFA_JAVA_94;
        functions[95]= ZeptonNfaData::NFA_JAVA_95;
        functions[96]= ZeptonNfaData::NFA_JAVA_96;
        functions[97]= ZeptonNfaData::NFA_JAVA_97;
        functions[98]= ZeptonNfaData::NFA_JAVA_98;
        functions[99]= ZeptonNfaData::NFA_JAVA_99;
        functions[100]= ZeptonNfaData::NFA_JAVA_100;
        functions[101]= ZeptonNfaData::NFA_JAVA_101;
        functions[102]= ZeptonNfaData::NFA_JAVA_102;
        functions[103]= ZeptonNfaData::NFA_JAVA_103;
        functions[104]= ZeptonNfaData::NFA_JAVA_104;
        functions[105]= ZeptonNfaData::NFA_JAVA_105;
        functions[106]= ZeptonNfaData::NFA_JAVA_106;
        functions[107]= ZeptonNfaData::NFA_JAVA_107;
        functions[108]= ZeptonNfaData::NFA_JAVA_108;
        functions[109]= ZeptonNfaData::NFA_JAVA_109;
        functions[110]= ZeptonNfaData::NFA_JAVA_110;
        functions[111]= ZeptonNfaData::NFA_JAVA_111;
        functions[112]= ZeptonNfaData::NFA_JAVA_112;
        functions[113]= ZeptonNfaData::NFA_JAVA_113;
        functions[114]= ZeptonNfaData::NFA_JAVA_114;
        functions[115]= ZeptonNfaData::NFA_JAVA_115;
        functions[116]= ZeptonNfaData::NFA_JAVA_116;
        functions[117]= ZeptonNfaData::NFA_JAVA_117;
        functions[118]= ZeptonNfaData::NFA_JAVA_118;
        functions[119]= ZeptonNfaData::NFA_JAVA_119;
        functions[120]= ZeptonNfaData::NFA_JAVA_120;
        functions[121]= ZeptonNfaData::NFA_JAVA_121;
        functions[122]= ZeptonNfaData::NFA_JAVA_122;
        functions[123]= ZeptonNfaData::NFA_JAVA_123;
        functions[124]= ZeptonNfaData::NFA_JAVA_124;
        functions[125]= ZeptonNfaData::NFA_JAVA_125;
        functions[126]= ZeptonNfaData::NFA_JAVA_126;
        functions[127]= ZeptonNfaData::NFA_JAVA_127;
        functions[128]= ZeptonNfaData::NFA_JAVA_128;
        functions[129]= ZeptonNfaData::NFA_JAVA_129;
        functions[130]= ZeptonNfaData::NFA_JAVA_130;
        functions[131]= ZeptonNfaData::NFA_JAVA_131;
        functions[132]= ZeptonNfaData::NFA_JAVA_132;
        functions[133]= ZeptonNfaData::NFA_JAVA_133;
        functions[134]= ZeptonNfaData::NFA_JAVA_134;
        functions[135]= ZeptonNfaData::NFA_JAVA_135;
        functions[136]= ZeptonNfaData::NFA_JAVA_136;
        functions[137]= ZeptonNfaData::NFA_JAVA_137;
        functions[138]= ZeptonNfaData::NFA_JAVA_138;
        functions[139]= ZeptonNfaData::NFA_JAVA_139;
        functions[140]= ZeptonNfaData::NFA_JAVA_140;
        functions[141]= ZeptonNfaData::NFA_JAVA_141;
        functions[142]= ZeptonNfaData::NFA_JAVA_142;
        functions[143]= ZeptonNfaData::NFA_JAVA_143;
        functions[144]= ZeptonNfaData::NFA_JAVA_144;
        functions[145]= ZeptonNfaData::NFA_JAVA_145;
        functions[146]= ZeptonNfaData::NFA_JAVA_146;
        functions[147]= ZeptonNfaData::NFA_JAVA_147;
        functions[148]= ZeptonNfaData::NFA_JAVA_148;
        functions[149]= ZeptonNfaData::NFA_JAVA_149;
        functions[150]= ZeptonNfaData::NFA_JAVA_150;
        functions[151]= ZeptonNfaData::NFA_JAVA_151;
        functions[152]= ZeptonNfaData::NFA_JAVA_152;
        functions[153]= ZeptonNfaData::NFA_JAVA_153;
        functions[154]= ZeptonNfaData::NFA_JAVA_154;
        functions[155]= ZeptonNfaData::NFA_JAVA_155;
        functions[156]= ZeptonNfaData::NFA_JAVA_156;
        functions[157]= ZeptonNfaData::NFA_JAVA_157;
        functions[158]= ZeptonNfaData::NFA_JAVA_158;
        functions[159]= ZeptonNfaData::NFA_JAVA_159;
        functions[160]= ZeptonNfaData::NFA_JAVA_160;
        functions[161]= ZeptonNfaData::NFA_JAVA_161;
        functions[162]= ZeptonNfaData::NFA_JAVA_162;
        functions[163]= ZeptonNfaData::NFA_JAVA_163;
        functions[164]= ZeptonNfaData::NFA_JAVA_164;
        functions[165]= ZeptonNfaData::NFA_JAVA_165;
        functions[166]= ZeptonNfaData::NFA_JAVA_166;
        functions[167]= ZeptonNfaData::NFA_JAVA_167;
        functions[168]= ZeptonNfaData::NFA_JAVA_168;
        functions[169]= ZeptonNfaData::NFA_JAVA_169;
        functions[170]= ZeptonNfaData::NFA_JAVA_170;
        functions[171]= ZeptonNfaData::NFA_JAVA_171;
        functions[172]= ZeptonNfaData::NFA_JAVA_172;
        functions[173]= ZeptonNfaData::NFA_JAVA_173;
        functions[174]= ZeptonNfaData::NFA_JAVA_174;
        functions[175]= ZeptonNfaData::NFA_JAVA_175;
        functions[176]= ZeptonNfaData::NFA_JAVA_176;
        functions[177]= ZeptonNfaData::NFA_JAVA_177;
        functions[178]= ZeptonNfaData::NFA_JAVA_178;
        functions[179]= ZeptonNfaData::NFA_JAVA_179;
        functions[180]= ZeptonNfaData::NFA_JAVA_180;
        functions[181]= ZeptonNfaData::NFA_JAVA_181;
        functions[182]= ZeptonNfaData::NFA_JAVA_182;
        functions[183]= ZeptonNfaData::NFA_JAVA_183;
        functions[184]= ZeptonNfaData::NFA_JAVA_184;
        functions[185]= ZeptonNfaData::NFA_JAVA_185;
        functions[186]= ZeptonNfaData::NFA_JAVA_186;
        functions[187]= ZeptonNfaData::NFA_JAVA_187;
        functions[188]= ZeptonNfaData::NFA_JAVA_188;
        functions[189]= ZeptonNfaData::NFA_JAVA_189;
        functions[190]= ZeptonNfaData::NFA_JAVA_190;
        functions[191]= ZeptonNfaData::NFA_JAVA_191;
        functions[192]= ZeptonNfaData::NFA_JAVA_192;
        functions[193]= ZeptonNfaData::NFA_JAVA_193;
        functions[194]= ZeptonNfaData::NFA_JAVA_194;
        functions[195]= ZeptonNfaData::NFA_JAVA_195;
        functions[196]= ZeptonNfaData::NFA_JAVA_196;
        functions[197]= ZeptonNfaData::NFA_JAVA_197;
        functions[198]= ZeptonNfaData::NFA_JAVA_198;
        functions[199]= ZeptonNfaData::NFA_JAVA_199;
        functions[200]= ZeptonNfaData::NFA_JAVA_200;
        functions[201]= ZeptonNfaData::NFA_JAVA_201;
        functions[202]= ZeptonNfaData::NFA_JAVA_202;
        functions[203]= ZeptonNfaData::NFA_JAVA_203;
        functions[204]= ZeptonNfaData::NFA_JAVA_204;
        functions[205]= ZeptonNfaData::NFA_JAVA_205;
        functions[206]= ZeptonNfaData::NFA_JAVA_206;
        functions[207]= ZeptonNfaData::NFA_JAVA_207;
        functions[208]= ZeptonNfaData::NFA_JAVA_208;
        functions[209]= ZeptonNfaData::NFA_JAVA_209;
        functions[210]= ZeptonNfaData::NFA_JAVA_210;
        functions[211]= ZeptonNfaData::NFA_JAVA_211;
        functions[212]= ZeptonNfaData::NFA_JAVA_212;
        functions[213]= ZeptonNfaData::NFA_JAVA_213;
        functions[214]= ZeptonNfaData::NFA_JAVA_214;
        functions[215]= ZeptonNfaData::NFA_JAVA_215;
        functions[216]= ZeptonNfaData::NFA_JAVA_216;
        functions[217]= ZeptonNfaData::NFA_JAVA_217;
        functions[218]= ZeptonNfaData::NFA_JAVA_218;
        functions[219]= ZeptonNfaData::NFA_JAVA_219;
        functions[220]= ZeptonNfaData::NFA_JAVA_220;
        functions[221]= ZeptonNfaData::NFA_JAVA_221;
        functions[222]= ZeptonNfaData::NFA_JAVA_222;
        functions[223]= ZeptonNfaData::NFA_JAVA_223;
        functions[224]= ZeptonNfaData::NFA_JAVA_224;
        functions[225]= ZeptonNfaData::NFA_JAVA_225;
        functions[226]= ZeptonNfaData::NFA_JAVA_226;
        functions[227]= ZeptonNfaData::NFA_JAVA_227;
        functions[228]= ZeptonNfaData::NFA_JAVA_228;
        functions[229]= ZeptonNfaData::NFA_JAVA_229;
        functions[230]= ZeptonNfaData::NFA_JAVA_230;
        functions[231]= ZeptonNfaData::NFA_JAVA_231;
        functions[232]= ZeptonNfaData::NFA_JAVA_232;
        functions[233]= ZeptonNfaData::NFA_JAVA_233;
        functions[234]= ZeptonNfaData::NFA_JAVA_234;
        functions[235]= ZeptonNfaData::NFA_JAVA_235;
        functions[236]= ZeptonNfaData::NFA_JAVA_236;
        functions[237]= ZeptonNfaData::NFA_JAVA_237;
        functions[238]= ZeptonNfaData::NFA_JAVA_238;
        functions[239]= ZeptonNfaData::NFA_JAVA_239;
        functions[240]= ZeptonNfaData::NFA_JAVA_240;
        functions[241]= ZeptonNfaData::NFA_JAVA_241;
        functions[242]= ZeptonNfaData::NFA_JAVA_242;
        functions[243]= ZeptonNfaData::NFA_JAVA_243;
        functions[244]= ZeptonNfaData::NFA_JAVA_244;
        functions[245]= ZeptonNfaData::NFA_JAVA_245;
        functions[246]= ZeptonNfaData::NFA_JAVA_246;
        functions[247]= ZeptonNfaData::NFA_JAVA_247;
        functions[248]= ZeptonNfaData::NFA_JAVA_248;
        functions[249]= ZeptonNfaData::NFA_JAVA_249;
        functions[250]= ZeptonNfaData::NFA_JAVA_250;
        functions[251]= ZeptonNfaData::NFA_JAVA_251;
        functions[252]= ZeptonNfaData::NFA_JAVA_252;
        functions[253]= ZeptonNfaData::NFA_JAVA_253;
        functions[254]= ZeptonNfaData::NFA_JAVA_254;
        functions[255]= ZeptonNfaData::NFA_JAVA_255;
        functions[256]= ZeptonNfaData::NFA_JAVA_256;
        functions[257]= ZeptonNfaData::NFA_JAVA_257;
        functions[258]= ZeptonNfaData::NFA_JAVA_258;
        functions[259]= ZeptonNfaData::NFA_JAVA_259;
        functions[260]= ZeptonNfaData::NFA_JAVA_260;
        functions[261]= ZeptonNfaData::NFA_JAVA_261;
        functions[262]= ZeptonNfaData::NFA_JAVA_262;
        functions[263]= ZeptonNfaData::NFA_JAVA_263;
        functions[264]= ZeptonNfaData::NFA_JAVA_264;
        functions[265]= ZeptonNfaData::NFA_JAVA_265;
        functions[266]= ZeptonNfaData::NFA_JAVA_266;
        functions[267]= ZeptonNfaData::NFA_JAVA_267;
        functions[268]= ZeptonNfaData::NFA_JAVA_268;
        functions[269]= ZeptonNfaData::NFA_JAVA_269;
        functions[270]= ZeptonNfaData::NFA_JAVA_270;
        functions[271]= ZeptonNfaData::NFA_JAVA_271;
        functions[272]= ZeptonNfaData::NFA_JAVA_272;
        functions[273]= ZeptonNfaData::NFA_JAVA_273;
        functions[274]= ZeptonNfaData::NFA_JAVA_274;
        functions[275]= ZeptonNfaData::NFA_JAVA_275;
        functions[276]= ZeptonNfaData::NFA_JAVA_276;
        functions[277]= ZeptonNfaData::NFA_JAVA_277;
        functions[278]= ZeptonNfaData::NFA_JAVA_278;
        functions[279]= ZeptonNfaData::NFA_JAVA_279;
        functions[280]= ZeptonNfaData::NFA_JAVA_280;
        functions[281]= ZeptonNfaData::NFA_JAVA_281;
        functions[282]= ZeptonNfaData::NFA_JAVA_282;
        functions[283]= ZeptonNfaData::NFA_JAVA_283;
        functions[284]= ZeptonNfaData::NFA_JAVA_284;
        functions[285]= ZeptonNfaData::NFA_JAVA_285;
        functions[286]= ZeptonNfaData::NFA_JAVA_286;
        functions[287]= ZeptonNfaData::NFA_JAVA_287;
        functions[288]= ZeptonNfaData::NFA_JAVA_288;
        functions[289]= ZeptonNfaData::NFA_JAVA_289;
        functions[290]= ZeptonNfaData::NFA_JAVA_290;
        functions[291]= ZeptonNfaData::NFA_JAVA_291;
        functions[292]= ZeptonNfaData::NFA_JAVA_292;
        functions[293]= ZeptonNfaData::NFA_JAVA_293;
        functions[294]= ZeptonNfaData::NFA_JAVA_294;
        functions[295]= ZeptonNfaData::NFA_JAVA_295;
        functions[296]= ZeptonNfaData::NFA_JAVA_296;
        functions[297]= ZeptonNfaData::NFA_JAVA_297;
        functions[298]= ZeptonNfaData::NFA_JAVA_298;
        functions[299]= ZeptonNfaData::NFA_JAVA_299;
        functions[300]= ZeptonNfaData::NFA_JAVA_300;
        functions[301]= ZeptonNfaData::NFA_JAVA_301;
        functions[302]= ZeptonNfaData::NFA_JAVA_302;
        functions[303]= ZeptonNfaData::NFA_JAVA_303;
        functions[304]= ZeptonNfaData::NFA_JAVA_304;
        functions[305]= ZeptonNfaData::NFA_JAVA_305;
        functions[306]= ZeptonNfaData::NFA_JAVA_306;
        functions[307]= ZeptonNfaData::NFA_JAVA_307;
        functions[308]= ZeptonNfaData::NFA_JAVA_308;
        functions[309]= ZeptonNfaData::NFA_JAVA_309;
        functions[310]= ZeptonNfaData::NFA_JAVA_310;
        functions[311]= ZeptonNfaData::NFA_JAVA_311;
        functions[312]= ZeptonNfaData::NFA_JAVA_312;
        functions[313]= ZeptonNfaData::NFA_JAVA_313;
        functions[314]= ZeptonNfaData::NFA_JAVA_314;
        functions[315]= ZeptonNfaData::NFA_JAVA_315;
        functions[316]= ZeptonNfaData::NFA_JAVA_316;
        functions[317]= ZeptonNfaData::NFA_JAVA_317;
        functions[318]= ZeptonNfaData::NFA_JAVA_318;
        functions[319]= ZeptonNfaData::NFA_JAVA_319;
        functions[320]= ZeptonNfaData::NFA_JAVA_320;
        functions[321]= ZeptonNfaData::NFA_JAVA_321;
        functions[322]= ZeptonNfaData::NFA_JAVA_322;
        functions[323]= ZeptonNfaData::NFA_JAVA_323;
        functions[324]= ZeptonNfaData::NFA_JAVA_324;
        functions[325]= ZeptonNfaData::NFA_JAVA_325;
        functions[326]= ZeptonNfaData::NFA_JAVA_326;
        functions[327]= ZeptonNfaData::NFA_JAVA_327;
        functions[328]= ZeptonNfaData::NFA_JAVA_328;
        functions[329]= ZeptonNfaData::NFA_JAVA_329;
        functions[330]= ZeptonNfaData::NFA_JAVA_330;
        functions[331]= ZeptonNfaData::NFA_JAVA_331;
        functions[332]= ZeptonNfaData::NFA_JAVA_332;
        functions[333]= ZeptonNfaData::NFA_JAVA_333;
        functions[334]= ZeptonNfaData::NFA_JAVA_334;
        functions[335]= ZeptonNfaData::NFA_JAVA_335;
        functions[336]= ZeptonNfaData::NFA_JAVA_336;
        functions[337]= ZeptonNfaData::NFA_JAVA_337;
        functions[338]= ZeptonNfaData::NFA_JAVA_338;
        functions[339]= ZeptonNfaData::NFA_JAVA_339;
        functions[340]= ZeptonNfaData::NFA_JAVA_340;
        functions[341]= ZeptonNfaData::NFA_JAVA_341;
        functions[342]= ZeptonNfaData::NFA_JAVA_342;
        functions[343]= ZeptonNfaData::NFA_JAVA_343;
        functions[344]= ZeptonNfaData::NFA_JAVA_344;
        functions[345]= ZeptonNfaData::NFA_JAVA_345;
        functions[346]= ZeptonNfaData::NFA_JAVA_346;
        functions[347]= ZeptonNfaData::NFA_JAVA_347;
        functions[348]= ZeptonNfaData::NFA_JAVA_348;
        functions[349]= ZeptonNfaData::NFA_JAVA_349;
        functions[350]= ZeptonNfaData::NFA_JAVA_350;
        functions[351]= ZeptonNfaData::NFA_JAVA_351;
        functions[352]= ZeptonNfaData::NFA_JAVA_352;
        functions[353]= ZeptonNfaData::NFA_JAVA_353;
        functions[354]= ZeptonNfaData::NFA_JAVA_354;
        functions[355]= ZeptonNfaData::NFA_JAVA_355;
        functions[356]= ZeptonNfaData::NFA_JAVA_356;
        functions[357]= ZeptonNfaData::NFA_JAVA_357;
        functions[358]= ZeptonNfaData::NFA_JAVA_358;
        functions[359]= ZeptonNfaData::NFA_JAVA_359;
        functions[360]= ZeptonNfaData::NFA_JAVA_360;
        functions[361]= ZeptonNfaData::NFA_JAVA_361;
        functions[362]= ZeptonNfaData::NFA_JAVA_362;
        functions[363]= ZeptonNfaData::NFA_JAVA_363;
        functions[364]= ZeptonNfaData::NFA_JAVA_364;
        functions[365]= ZeptonNfaData::NFA_JAVA_365;
        functions[366]= ZeptonNfaData::NFA_JAVA_366;
        functions[367]= ZeptonNfaData::NFA_JAVA_367;
        functions[368]= ZeptonNfaData::NFA_JAVA_368;
        functions[369]= ZeptonNfaData::NFA_JAVA_369;
        functions[370]= ZeptonNfaData::NFA_JAVA_370;
        functions[371]= ZeptonNfaData::NFA_JAVA_371;
        functions[372]= ZeptonNfaData::NFA_JAVA_372;
        functions[373]= ZeptonNfaData::NFA_JAVA_373;
        functions[374]= ZeptonNfaData::NFA_JAVA_374;
        functions[375]= ZeptonNfaData::NFA_JAVA_375;
        functions[376]= ZeptonNfaData::NFA_JAVA_376;
        functions[377]= ZeptonNfaData::NFA_JAVA_377;
        functions[378]= ZeptonNfaData::NFA_JAVA_378;
        functions[379]= ZeptonNfaData::NFA_JAVA_379;
        functions[380]= ZeptonNfaData::NFA_JAVA_380;
        functions[381]= ZeptonNfaData::NFA_JAVA_381;
        functions[382]= ZeptonNfaData::NFA_JAVA_382;
        functions[383]= ZeptonNfaData::NFA_JAVA_383;
        functions[384]= ZeptonNfaData::NFA_JAVA_384;
        functions[385]= ZeptonNfaData::NFA_JAVA_385;
        functions[386]= ZeptonNfaData::NFA_JAVA_386;
        functions[387]= ZeptonNfaData::NFA_JAVA_387;
        functions[388]= ZeptonNfaData::NFA_JAVA_388;
        functions[389]= ZeptonNfaData::NFA_JAVA_389;
        functions[390]= ZeptonNfaData::NFA_JAVA_390;
        functions[391]= ZeptonNfaData::NFA_JAVA_391;
        functions[392]= ZeptonNfaData::NFA_JAVA_392;
        functions[393]= ZeptonNfaData::NFA_JAVA_393;
        functions[394]= ZeptonNfaData::NFA_JAVA_394;
        functions[395]= ZeptonNfaData::NFA_JAVA_395;
        functions[396]= ZeptonNfaData::NFA_JAVA_396;
        functions[397]= ZeptonNfaData::NFA_JAVA_397;
        functions[398]= ZeptonNfaData::NFA_JAVA_398;
        functions[399]= ZeptonNfaData::NFA_JAVA_399;
        functions[400]= ZeptonNfaData::NFA_JAVA_400;
        functions[401]= ZeptonNfaData::NFA_JAVA_401;
        functions[402]= ZeptonNfaData::NFA_JAVA_402;
        functions[403]= ZeptonNfaData::NFA_JAVA_403;
        functions[404]= ZeptonNfaData::NFA_JAVA_404;
        functions[405]= ZeptonNfaData::NFA_JAVA_405;
        functions[406]= ZeptonNfaData::NFA_JAVA_406;
        functions[407]= ZeptonNfaData::NFA_JAVA_407;
        functions[408]= ZeptonNfaData::NFA_JAVA_408;
        functions[409]= ZeptonNfaData::NFA_JAVA_409;
        functions[410]= ZeptonNfaData::NFA_JAVA_410;
        functions[411]= ZeptonNfaData::NFA_JAVA_411;
        functions[412]= ZeptonNfaData::NFA_JAVA_412;
        functions[413]= ZeptonNfaData::NFA_JAVA_413;
        functions[414]= ZeptonNfaData::NFA_JAVA_414;
        functions[415]= ZeptonNfaData::NFA_JAVA_415;
        functions[416]= ZeptonNfaData::NFA_JAVA_416;
        functions[417]= ZeptonNfaData::NFA_JAVA_417;
        functions[418]= ZeptonNfaData::NFA_JAVA_418;
        functions[419]= ZeptonNfaData::NFA_JAVA_419;
        functions[420]= ZeptonNfaData::NFA_JAVA_420;
        functions[421]= ZeptonNfaData::NFA_JAVA_421;
        functions[422]= ZeptonNfaData::NFA_JAVA_422;
        functions[423]= ZeptonNfaData::NFA_JAVA_423;
        functions[424]= ZeptonNfaData::NFA_JAVA_424;
        functions[425]= ZeptonNfaData::NFA_JAVA_425;
        functions[426]= ZeptonNfaData::NFA_JAVA_426;
        functions[427]= ZeptonNfaData::NFA_JAVA_427;
        functions[428]= ZeptonNfaData::NFA_JAVA_428;
        functions[429]= ZeptonNfaData::NFA_JAVA_429;
        functions[430]= ZeptonNfaData::NFA_JAVA_430;
        functions[431]= ZeptonNfaData::NFA_JAVA_431;
        functions[432]= ZeptonNfaData::NFA_JAVA_432;
        functions[433]= ZeptonNfaData::NFA_JAVA_433;
        functions[434]= ZeptonNfaData::NFA_JAVA_434;
        functions[435]= ZeptonNfaData::NFA_JAVA_435;
        functions[436]= ZeptonNfaData::NFA_JAVA_436;
        functions[437]= ZeptonNfaData::NFA_JAVA_437;
        functions[438]= ZeptonNfaData::NFA_JAVA_438;
        functions[439]= ZeptonNfaData::NFA_JAVA_439;
        functions[440]= ZeptonNfaData::NFA_JAVA_440;
        functions[441]= ZeptonNfaData::NFA_JAVA_441;
        functions[442]= ZeptonNfaData::NFA_JAVA_442;
        functions[443]= ZeptonNfaData::NFA_JAVA_443;
        functions[444]= ZeptonNfaData::NFA_JAVA_444;
        functions[445]= ZeptonNfaData::NFA_JAVA_445;
        functions[446]= ZeptonNfaData::NFA_JAVA_446;
        functions[447]= ZeptonNfaData::NFA_JAVA_447;
        functions[448]= ZeptonNfaData::NFA_JAVA_448;
        functions[449]= ZeptonNfaData::NFA_JAVA_449;
        functions[450]= ZeptonNfaData::NFA_JAVA_450;
        functions[451]= ZeptonNfaData::NFA_JAVA_451;
        functions[452]= ZeptonNfaData::NFA_JAVA_452;
        functions[453]= ZeptonNfaData::NFA_JAVA_453;
        functions[454]= ZeptonNfaData::NFA_JAVA_454;
        functions[455]= ZeptonNfaData::NFA_JAVA_455;
        functions[456]= ZeptonNfaData::NFA_JAVA_456;
        functions[457]= ZeptonNfaData::NFA_JAVA_457;
        functions[458]= ZeptonNfaData::NFA_JAVA_458;
        functions[459]= ZeptonNfaData::NFA_JAVA_459;
        functions[460]= ZeptonNfaData::NFA_JAVA_460;
        functions[461]= ZeptonNfaData::NFA_JAVA_461;
        functions[462]= ZeptonNfaData::NFA_JAVA_462;
        functions[463]= ZeptonNfaData::NFA_JAVA_463;
        functions[464]= ZeptonNfaData::NFA_JAVA_464;
        functions[465]= ZeptonNfaData::NFA_JAVA_465;
        functions[466]= ZeptonNfaData::NFA_JAVA_466;
        functions[467]= ZeptonNfaData::NFA_JAVA_467;
        functions[468]= ZeptonNfaData::NFA_JAVA_468;
        functions[469]= ZeptonNfaData::NFA_JAVA_469;
        functions[470]= ZeptonNfaData::NFA_JAVA_470;
        functions[471]= ZeptonNfaData::NFA_JAVA_471;
        functions[472]= ZeptonNfaData::NFA_JAVA_472;
        functions[473]= ZeptonNfaData::NFA_JAVA_473;
        functions[474]= ZeptonNfaData::NFA_JAVA_474;
        functions[475]= ZeptonNfaData::NFA_JAVA_475;
        functions[476]= ZeptonNfaData::NFA_JAVA_476;
        functions[477]= ZeptonNfaData::NFA_JAVA_477;
        functions[478]= ZeptonNfaData::NFA_JAVA_478;
        functions[479]= ZeptonNfaData::NFA_JAVA_479;
        functions[480]= ZeptonNfaData::NFA_JAVA_480;
        functions[481]= ZeptonNfaData::NFA_JAVA_481;
        functions[482]= ZeptonNfaData::NFA_JAVA_482;
        functions[483]= ZeptonNfaData::NFA_JAVA_483;
        functions[484]= ZeptonNfaData::NFA_JAVA_484;
        functions[485]= ZeptonNfaData::NFA_JAVA_485;
        functions[486]= ZeptonNfaData::NFA_JAVA_486;
        functions[487]= ZeptonNfaData::NFA_JAVA_487;
        functions[488]= ZeptonNfaData::NFA_JAVA_488;
        functions[489]= ZeptonNfaData::NFA_JAVA_489;
        functions[490]= ZeptonNfaData::NFA_JAVA_490;
        functions[491]= ZeptonNfaData::NFA_JAVA_491;
        functions[492]= ZeptonNfaData::NFA_JAVA_492;
        functions[493]= ZeptonNfaData::NFA_JAVA_493;
        functions[494]= ZeptonNfaData::NFA_JAVA_494;
        functions[495]= ZeptonNfaData::NFA_JAVA_495;
        functions[496]= ZeptonNfaData::NFA_JAVA_496;
        functions[497]= ZeptonNfaData::NFA_JAVA_497;
        functions[498]= ZeptonNfaData::NFA_JAVA_498;
        functions[499]= ZeptonNfaData::NFA_JAVA_499;
        functions[500]= ZeptonNfaData::NFA_JAVA_500;
        functions[501]= ZeptonNfaData::NFA_JAVA_501;
        functions[502]= ZeptonNfaData::NFA_JAVA_502;
        functions[503]= ZeptonNfaData::NFA_JAVA_503;
        functions[504]= ZeptonNfaData::NFA_JAVA_504;
        functions[505]= ZeptonNfaData::NFA_JAVA_505;
        functions[506]= ZeptonNfaData::NFA_JAVA_506;
        functions[507]= ZeptonNfaData::NFA_JAVA_507;
        functions[508]= ZeptonNfaData::NFA_JAVA_508;
        functions[509]= ZeptonNfaData::NFA_JAVA_509;
        functions[510]= ZeptonNfaData::NFA_JAVA_510;
        functions[511]= ZeptonNfaData::NFA_JAVA_511;
        functions[512]= ZeptonNfaData::NFA_JAVA_512;
        functions[513]= ZeptonNfaData::NFA_JAVA_513;
        functions[514]= ZeptonNfaData::NFA_JAVA_514;
        functions[515]= ZeptonNfaData::NFA_JAVA_515;
        functions[516]= ZeptonNfaData::NFA_JAVA_516;
        functions[517]= ZeptonNfaData::NFA_JAVA_517;
        functions[518]= ZeptonNfaData::NFA_JAVA_518;
        functions[519]= ZeptonNfaData::NFA_JAVA_519;
        functions[520]= ZeptonNfaData::NFA_JAVA_520;
        functions[521]= ZeptonNfaData::NFA_JAVA_521;
        functions[522]= ZeptonNfaData::NFA_JAVA_522;
        functions[523]= ZeptonNfaData::NFA_JAVA_523;
        functions[524]= ZeptonNfaData::NFA_JAVA_524;
        functions[525]= ZeptonNfaData::NFA_JAVA_525;
        functions[526]= ZeptonNfaData::NFA_JAVA_526;
        functions[527]= ZeptonNfaData::NFA_JAVA_527;
        functions[528]= ZeptonNfaData::NFA_JAVA_528;
        functions[529]= ZeptonNfaData::NFA_JAVA_529;
        functions[530]= ZeptonNfaData::NFA_JAVA_530;
        functions[531]= ZeptonNfaData::NFA_JAVA_531;
        functions[532]= ZeptonNfaData::NFA_JAVA_532;
        functions[533]= ZeptonNfaData::NFA_JAVA_533;
        functions[534]= ZeptonNfaData::NFA_JAVA_534;
        functions[535]= ZeptonNfaData::NFA_JAVA_535;
        functions[536]= ZeptonNfaData::NFA_JAVA_536;
        functions[537]= ZeptonNfaData::NFA_JAVA_537;
        functions[538]= ZeptonNfaData::NFA_JAVA_538;
        functions[539]= ZeptonNfaData::NFA_JAVA_539;
        functions[540]= ZeptonNfaData::NFA_JAVA_540;
        functions[541]= ZeptonNfaData::NFA_JAVA_541;
        functions[542]= ZeptonNfaData::NFA_JAVA_542;
        functions[543]= ZeptonNfaData::NFA_JAVA_543;
        functions[544]= ZeptonNfaData::NFA_JAVA_544;
        functions[545]= ZeptonNfaData::NFA_JAVA_545;
        functions[546]= ZeptonNfaData::NFA_JAVA_546;
        functions[547]= ZeptonNfaData::NFA_JAVA_547;
        functions[548]= ZeptonNfaData::NFA_JAVA_548;
        functions[549]= ZeptonNfaData::NFA_JAVA_549;
        functions[550]= ZeptonNfaData::NFA_JAVA_550;
        functions[551]= ZeptonNfaData::NFA_JAVA_551;
        functions[552]= ZeptonNfaData::NFA_JAVA_552;
        functions[553]= ZeptonNfaData::NFA_JAVA_553;
        functions[554]= ZeptonNfaData::NFA_JAVA_554;
        functions[555]= ZeptonNfaData::NFA_JAVA_555;
        functions[556]= ZeptonNfaData::NFA_JAVA_556;
        functions[557]= ZeptonNfaData::NFA_JAVA_557;
        functions[558]= ZeptonNfaData::NFA_JAVA_558;
        functions[559]= ZeptonNfaData::NFA_JAVA_559;
        functions[560]= ZeptonNfaData::NFA_JAVA_560;
        functions[561]= ZeptonNfaData::NFA_JAVA_561;
        functions[562]= ZeptonNfaData::NFA_JAVA_562;
        functions[563]= ZeptonNfaData::NFA_JAVA_563;
        functions[564]= ZeptonNfaData::NFA_JAVA_564;
        functions[565]= ZeptonNfaData::NFA_JAVA_565;
        functions[566]= ZeptonNfaData::NFA_JAVA_566;
        functions[567]= ZeptonNfaData::NFA_JAVA_567;
        functions[568]= ZeptonNfaData::NFA_JAVA_568;
        functions[569]= ZeptonNfaData::NFA_JAVA_569;
        functions[570]= ZeptonNfaData::NFA_JAVA_570;
        functions[571]= ZeptonNfaData::NFA_JAVA_571;
        functions[572]= ZeptonNfaData::NFA_JAVA_572;
        functions[573]= ZeptonNfaData::NFA_JAVA_573;
        functions[574]= ZeptonNfaData::NFA_JAVA_574;
        functions[575]= ZeptonNfaData::NFA_JAVA_575;
        functions[576]= ZeptonNfaData::NFA_JAVA_576;
        functions[577]= ZeptonNfaData::NFA_JAVA_577;
        functions[578]= ZeptonNfaData::NFA_JAVA_578;
        functions[579]= ZeptonNfaData::NFA_JAVA_579;
        functions[580]= ZeptonNfaData::NFA_JAVA_580;
        functions[581]= ZeptonNfaData::NFA_JAVA_581;
        functions[582]= ZeptonNfaData::NFA_JAVA_582;
        functions[583]= ZeptonNfaData::NFA_JAVA_583;
        functions[584]= ZeptonNfaData::NFA_JAVA_584;
        functions[585]= ZeptonNfaData::NFA_JAVA_585;
        functions[586]= ZeptonNfaData::NFA_JAVA_586;
        functions[587]= ZeptonNfaData::NFA_JAVA_587;
        functions[588]= ZeptonNfaData::NFA_JAVA_588;
        functions[589]= ZeptonNfaData::NFA_JAVA_589;
        functions[590]= ZeptonNfaData::NFA_JAVA_590;
        functions[591]= ZeptonNfaData::NFA_JAVA_591;
        functions[592]= ZeptonNfaData::NFA_JAVA_592;
        functions[593]= ZeptonNfaData::NFA_JAVA_593;
        functions[594]= ZeptonNfaData::NFA_JAVA_594;
        functions[595]= ZeptonNfaData::NFA_JAVA_595;
        functions[596]= ZeptonNfaData::NFA_JAVA_596;
        functions[597]= ZeptonNfaData::NFA_JAVA_597;
        functions[598]= ZeptonNfaData::NFA_JAVA_598;
        functions[599]= ZeptonNfaData::NFA_JAVA_599;
        functions[600]= ZeptonNfaData::NFA_JAVA_600;
        functions[601]= ZeptonNfaData::NFA_JAVA_601;
        functions[602]= ZeptonNfaData::NFA_JAVA_602;
        functions[603]= ZeptonNfaData::NFA_JAVA_603;
        functions[604]= ZeptonNfaData::NFA_JAVA_604;
        functions[605]= ZeptonNfaData::NFA_JAVA_605;
        functions[606]= ZeptonNfaData::NFA_JAVA_606;
        functions[607]= ZeptonNfaData::NFA_JAVA_607;
        functions[608]= ZeptonNfaData::NFA_JAVA_608;
        functions[609]= ZeptonNfaData::NFA_JAVA_609;
        functions[610]= ZeptonNfaData::NFA_JAVA_610;
        functions[611]= ZeptonNfaData::NFA_JAVA_611;
        functions[612]= ZeptonNfaData::NFA_JAVA_612;
        functions[613]= ZeptonNfaData::NFA_JAVA_613;
        functions[614]= ZeptonNfaData::NFA_JAVA_614;
        functions[615]= ZeptonNfaData::NFA_JAVA_615;
        functions[616]= ZeptonNfaData::NFA_JAVA_616;
        functions[617]= ZeptonNfaData::NFA_JAVA_617;
        functions[618]= ZeptonNfaData::NFA_JAVA_618;
        functions[619]= ZeptonNfaData::NFA_JAVA_619;
        functions[620]= ZeptonNfaData::NFA_JAVA_620;
        functions[621]= ZeptonNfaData::NFA_JAVA_621;
        functions[622]= ZeptonNfaData::NFA_JAVA_622;
        functions[623]= ZeptonNfaData::NFA_JAVA_623;
        functions[624]= ZeptonNfaData::NFA_JAVA_624;
        functions[625]= ZeptonNfaData::NFA_JAVA_625;
        functions[626]= ZeptonNfaData::NFA_JAVA_626;
        functions[627]= ZeptonNfaData::NFA_JAVA_627;
        functions[628]= ZeptonNfaData::NFA_JAVA_628;
        functions[629]= ZeptonNfaData::NFA_JAVA_629;
        functions[630]= ZeptonNfaData::NFA_JAVA_630;
        functions[631]= ZeptonNfaData::NFA_JAVA_631;
        functions[632]= ZeptonNfaData::NFA_JAVA_632;
        functions[633]= ZeptonNfaData::NFA_JAVA_633;
        functions[634]= ZeptonNfaData::NFA_JAVA_634;
        functions[635]= ZeptonNfaData::NFA_JAVA_635;
        functions[636]= ZeptonNfaData::NFA_JAVA_636;
        functions[637]= ZeptonNfaData::NFA_JAVA_637;
        functions[638]= ZeptonNfaData::NFA_JAVA_638;
        functions[639]= ZeptonNfaData::NFA_JAVA_639;
        functions[640]= ZeptonNfaData::NFA_JAVA_640;
        functions[641]= ZeptonNfaData::NFA_JAVA_641;
        functions[642]= ZeptonNfaData::NFA_JAVA_642;
        functions[643]= ZeptonNfaData::NFA_JAVA_643;
        functions[644]= ZeptonNfaData::NFA_JAVA_644;
        functions[645]= ZeptonNfaData::NFA_JAVA_645;
        functions[646]= ZeptonNfaData::NFA_JAVA_646;
        functions[647]= ZeptonNfaData::NFA_JAVA_647;
        functions[648]= ZeptonNfaData::NFA_JAVA_648;
        functions[649]= ZeptonNfaData::NFA_JAVA_649;
        functions[650]= ZeptonNfaData::NFA_JAVA_650;
        functions[651]= ZeptonNfaData::NFA_JAVA_651;
        functions[652]= ZeptonNfaData::NFA_JAVA_652;
        functions[653]= ZeptonNfaData::NFA_JAVA_653;
        functions[654]= ZeptonNfaData::NFA_JAVA_654;
        functions[655]= ZeptonNfaData::NFA_JAVA_655;
        functions[656]= ZeptonNfaData::NFA_JAVA_656;
        functions[657]= ZeptonNfaData::NFA_JAVA_657;
        functions[658]= ZeptonNfaData::NFA_JAVA_658;
        functions[659]= ZeptonNfaData::NFA_JAVA_659;
        functions[660]= ZeptonNfaData::NFA_JAVA_660;
        functions[661]= ZeptonNfaData::NFA_JAVA_661;
        functions[662]= ZeptonNfaData::NFA_JAVA_662;
        functions[663]= ZeptonNfaData::NFA_JAVA_663;
        functions[664]= ZeptonNfaData::NFA_JAVA_664;
        functions[665]= ZeptonNfaData::NFA_JAVA_665;
        functions[666]= ZeptonNfaData::NFA_JAVA_666;
        functions[667]= ZeptonNfaData::NFA_JAVA_667;
        functions[668]= ZeptonNfaData::NFA_JAVA_668;
        functions[669]= ZeptonNfaData::NFA_JAVA_669;
        functions[670]= ZeptonNfaData::NFA_JAVA_670;
        functions[671]= ZeptonNfaData::NFA_JAVA_671;
        functionTableMap.put(LexicalState.JAVA, functions);
    }

    static TokenType NFA_COMPOSITE_IN_MULTI_LINE_COMMENT_0(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if (ch== '*') {
            nextStates.set(2);
        }
        if (ch>=0x0) {
            if (validTypes.contains(TokenType.ANY_CHAR)) type= TokenType.ANY_CHAR;
        }
        return type;
    }

    static TokenType NFA_IN_MULTI_LINE_COMMENT_1(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>=0x0) {
            if (validTypes.contains(TokenType.ANY_CHAR)) return TokenType.ANY_CHAR;
        }
        return null;
    }

    static TokenType NFA_IN_MULTI_LINE_COMMENT_2(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '/') {
            if (validTypes.contains(TokenType.MULTI_LINE_COMMENT)) return TokenType.MULTI_LINE_COMMENT;
        }
        return null;
    }

    static TokenType NFA_IN_MULTI_LINE_COMMENT_3(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '*') {
            nextStates.set(2);
        }
        return null;
    }

    static private void NFA_FUNCTIONS_IN_MULTI_LINE_COMMENT_init() {
        NfaFunction[] functions= new NfaFunction[4];
        functions[0]= ZeptonNfaData::NFA_COMPOSITE_IN_MULTI_LINE_COMMENT_0;
        functions[1]= ZeptonNfaData::NFA_IN_MULTI_LINE_COMMENT_1;
        functions[2]= ZeptonNfaData::NFA_IN_MULTI_LINE_COMMENT_2;
        functions[3]= ZeptonNfaData::NFA_IN_MULTI_LINE_COMMENT_3;
        functionTableMap.put(LexicalState.IN_MULTI_LINE_COMMENT, functions);
    }

    static TokenType NFA_COMPOSITE_IN_SINGLE_LINE_COMMENT_0(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if (ch== '\r') {
            nextStates.set(3);
        }
        if (ch>=0x0) {
            if (validTypes.contains(TokenType.ANY_CHAR)) type= TokenType.ANY_CHAR;
        }
        if (ch== '\n') {
            if (validTypes.contains(TokenType.SINGLE_LINE_COMMENT)) type= TokenType.SINGLE_LINE_COMMENT;
        }
        else if (ch== '\r') {
            if (validTypes.contains(TokenType.SINGLE_LINE_COMMENT)) type= TokenType.SINGLE_LINE_COMMENT;
        }
        return type;
    }

    static TokenType NFA_COMPOSITE_IN_SINGLE_LINE_COMMENT_1(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        TokenType type= null;
        if (ch== '\r') {
            nextStates.set(3);
        }
        else if (ch== '\n') {
            if (validTypes.contains(TokenType.SINGLE_LINE_COMMENT)) type= TokenType.SINGLE_LINE_COMMENT;
        }
        if (ch== '\r') {
            if (validTypes.contains(TokenType.SINGLE_LINE_COMMENT)) type= TokenType.SINGLE_LINE_COMMENT;
        }
        return type;
    }

    static TokenType NFA_IN_SINGLE_LINE_COMMENT_2(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch>=0x0) {
            if (validTypes.contains(TokenType.ANY_CHAR)) return TokenType.ANY_CHAR;
        }
        return null;
    }

    static TokenType NFA_IN_SINGLE_LINE_COMMENT_3(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '\n') {
            if (validTypes.contains(TokenType.SINGLE_LINE_COMMENT)) return TokenType.SINGLE_LINE_COMMENT;
        }
        return null;
    }

    static TokenType NFA_IN_SINGLE_LINE_COMMENT_4(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '\n') {
            if (validTypes.contains(TokenType.SINGLE_LINE_COMMENT)) return TokenType.SINGLE_LINE_COMMENT;
        }
        return null;
    }

    static TokenType NFA_IN_SINGLE_LINE_COMMENT_5(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '\r') {
            if (validTypes.contains(TokenType.SINGLE_LINE_COMMENT)) return TokenType.SINGLE_LINE_COMMENT;
        }
        return null;
    }

    static TokenType NFA_IN_SINGLE_LINE_COMMENT_6(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
        if (ch== '\r') {
            nextStates.set(3);
        }
        return null;
    }

    static private void NFA_FUNCTIONS_IN_SINGLE_LINE_COMMENT_init() {
        NfaFunction[] functions= new NfaFunction[7];
        functions[0]= ZeptonNfaData::NFA_COMPOSITE_IN_SINGLE_LINE_COMMENT_0;
        functions[1]= ZeptonNfaData::NFA_COMPOSITE_IN_SINGLE_LINE_COMMENT_1;
        functions[2]= ZeptonNfaData::NFA_IN_SINGLE_LINE_COMMENT_2;
        functions[3]= ZeptonNfaData::NFA_IN_SINGLE_LINE_COMMENT_3;
        functions[4]= ZeptonNfaData::NFA_IN_SINGLE_LINE_COMMENT_4;
        functions[5]= ZeptonNfaData::NFA_IN_SINGLE_LINE_COMMENT_5;
        functions[6]= ZeptonNfaData::NFA_IN_SINGLE_LINE_COMMENT_6;
        functionTableMap.put(LexicalState.IN_SINGLE_LINE_COMMENT, functions);
    }

}
